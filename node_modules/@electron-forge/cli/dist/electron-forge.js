#!/usr/bin/env node
"use strict";
var _chalk = _interopRequireDefault(require("chalk"));
var _commander = _interopRequireDefault(require("commander"));
var _listr2 = require("listr2");
require("./util/terminate");
var _checkSystem = require("./util/check-system");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// eslint-disable-next-line @typescript-eslint/no-var-requires
const metadata = require('../package.json');
const originalSC = _commander.default.executeSubCommand.bind(_commander.default);
_commander.default.executeSubCommand = (argv, args, unknown)=>{
    let indexOfDoubleDash = process.argv.indexOf('--');
    indexOfDoubleDash = indexOfDoubleDash < 0 ? process.argv.length + 1 : indexOfDoubleDash;
    const passThroughArgs = args.filter((arg)=>process.argv.indexOf(arg) > indexOfDoubleDash
    );
    const normalArgs = args.filter((arg)=>process.argv.indexOf(arg) <= indexOfDoubleDash
    );
    let newArgs = args;
    let newUnknown = unknown;
    if (passThroughArgs.length > 0) {
        newArgs = normalArgs.concat(unknown).concat('--').concat(passThroughArgs);
        newUnknown = [];
    }
    return originalSC(argv, newArgs, newUnknown);
};
_commander.default.version(metadata.version).option('--verbose', 'Enables verbose mode').command('init', 'Initialize a new Electron application').command('import', 'Attempts to navigate you through the process of importing an existing project to "electron-forge"').command('lint', 'Lints the current Electron application').command('package', 'Package the current Electron application').command('make', 'Generate distributables for the current Electron application').command('start', 'Start the current Electron application').command('publish', 'Publish the current Electron application to GitHub').command('install', 'Install an Electron application from GitHub').on('command:*', (commands)=>{
    if (!_commander.default._execs.has(commands[0])) {
        console.error();
        console.error(_chalk.default.red(`Unknown command "${_commander.default.args.join(' ')}".`));
        console.error('See --help for a list of available commands.');
        process.exit(1);
    }
});
(async ()=>{
    const runner = new _listr2.Listr([
        {
            title: 'Checking your system',
            task: async (_, task)=>{
                return await (0, _checkSystem).checkSystem(task);
            }
        }, 
    ], {
        concurrent: false,
        exitOnError: false
    });
    await runner.run();
    if (runner.err.length) {
        console.error(_chalk.default.red(`\nIt looks like you are missing some dependencies you need to get Electron running.
Make sure you have git installed and Node.js version ${metadata.engines.node}`));
        process.exit(1);
    }
    _commander.default.parse(process.argv);
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG4vLyBUaGlzIGZpbGUgcmVxdWlyZXMgYSBzaGViYW5nIGFib3ZlLiBJZiBpdCBpcyBtaXNzaW5nLCB0aGlzIGlzIGFuIGVycm9yLlxuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHByb2dyYW0gZnJvbSAnY29tbWFuZGVyJztcbmltcG9ydCB7IExpc3RyIH0gZnJvbSAnbGlzdHIyJztcblxuaW1wb3J0ICcuL3V0aWwvdGVybWluYXRlJztcblxuaW1wb3J0IHsgY2hlY2tTeXN0ZW0gfSBmcm9tICcuL3V0aWwvY2hlY2stc3lzdGVtJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbmNvbnN0IG1ldGFkYXRhID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5cbmNvbnN0IG9yaWdpbmFsU0MgPSBwcm9ncmFtLmV4ZWN1dGVTdWJDb21tYW5kLmJpbmQocHJvZ3JhbSk7XG5wcm9ncmFtLmV4ZWN1dGVTdWJDb21tYW5kID0gKGFyZ3Y6IHN0cmluZ1tdLCBhcmdzOiBzdHJpbmdbXSwgdW5rbm93bjogc3RyaW5nW10pID0+IHtcbiAgbGV0IGluZGV4T2ZEb3VibGVEYXNoID0gcHJvY2Vzcy5hcmd2LmluZGV4T2YoJy0tJyk7XG4gIGluZGV4T2ZEb3VibGVEYXNoID0gaW5kZXhPZkRvdWJsZURhc2ggPCAwID8gcHJvY2Vzcy5hcmd2Lmxlbmd0aCArIDEgOiBpbmRleE9mRG91YmxlRGFzaDtcblxuICBjb25zdCBwYXNzVGhyb3VnaEFyZ3MgPSBhcmdzLmZpbHRlcigoYXJnKSA9PiBwcm9jZXNzLmFyZ3YuaW5kZXhPZihhcmcpID4gaW5kZXhPZkRvdWJsZURhc2gpO1xuICBjb25zdCBub3JtYWxBcmdzID0gYXJncy5maWx0ZXIoKGFyZykgPT4gcHJvY2Vzcy5hcmd2LmluZGV4T2YoYXJnKSA8PSBpbmRleE9mRG91YmxlRGFzaCk7XG5cbiAgbGV0IG5ld0FyZ3MgPSBhcmdzO1xuICBsZXQgbmV3VW5rbm93biA9IHVua25vd247XG4gIGlmIChwYXNzVGhyb3VnaEFyZ3MubGVuZ3RoID4gMCkge1xuICAgIG5ld0FyZ3MgPSBub3JtYWxBcmdzLmNvbmNhdCh1bmtub3duKS5jb25jYXQoJy0tJykuY29uY2F0KHBhc3NUaHJvdWdoQXJncyk7XG4gICAgbmV3VW5rbm93biA9IFtdO1xuICB9XG4gIHJldHVybiBvcmlnaW5hbFNDKGFyZ3YsIG5ld0FyZ3MsIG5ld1Vua25vd24pO1xufTtcblxucHJvZ3JhbVxuICAudmVyc2lvbihtZXRhZGF0YS52ZXJzaW9uKVxuICAub3B0aW9uKCctLXZlcmJvc2UnLCAnRW5hYmxlcyB2ZXJib3NlIG1vZGUnKVxuICAuY29tbWFuZCgnaW5pdCcsICdJbml0aWFsaXplIGEgbmV3IEVsZWN0cm9uIGFwcGxpY2F0aW9uJylcbiAgLmNvbW1hbmQoJ2ltcG9ydCcsICdBdHRlbXB0cyB0byBuYXZpZ2F0ZSB5b3UgdGhyb3VnaCB0aGUgcHJvY2VzcyBvZiBpbXBvcnRpbmcgYW4gZXhpc3RpbmcgcHJvamVjdCB0byBcImVsZWN0cm9uLWZvcmdlXCInKVxuICAuY29tbWFuZCgnbGludCcsICdMaW50cyB0aGUgY3VycmVudCBFbGVjdHJvbiBhcHBsaWNhdGlvbicpXG4gIC5jb21tYW5kKCdwYWNrYWdlJywgJ1BhY2thZ2UgdGhlIGN1cnJlbnQgRWxlY3Ryb24gYXBwbGljYXRpb24nKVxuICAuY29tbWFuZCgnbWFrZScsICdHZW5lcmF0ZSBkaXN0cmlidXRhYmxlcyBmb3IgdGhlIGN1cnJlbnQgRWxlY3Ryb24gYXBwbGljYXRpb24nKVxuICAuY29tbWFuZCgnc3RhcnQnLCAnU3RhcnQgdGhlIGN1cnJlbnQgRWxlY3Ryb24gYXBwbGljYXRpb24nKVxuICAuY29tbWFuZCgncHVibGlzaCcsICdQdWJsaXNoIHRoZSBjdXJyZW50IEVsZWN0cm9uIGFwcGxpY2F0aW9uIHRvIEdpdEh1YicpXG4gIC5jb21tYW5kKCdpbnN0YWxsJywgJ0luc3RhbGwgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24gZnJvbSBHaXRIdWInKVxuICAub24oJ2NvbW1hbmQ6KicsIChjb21tYW5kcykgPT4ge1xuICAgIGlmICghcHJvZ3JhbS5fZXhlY3MuaGFzKGNvbW1hbmRzWzBdKSkge1xuICAgICAgY29uc29sZS5lcnJvcigpO1xuICAgICAgY29uc29sZS5lcnJvcihjaGFsay5yZWQoYFVua25vd24gY29tbWFuZCBcIiR7cHJvZ3JhbS5hcmdzLmpvaW4oJyAnKX1cIi5gKSk7XG4gICAgICBjb25zb2xlLmVycm9yKCdTZWUgLS1oZWxwIGZvciBhIGxpc3Qgb2YgYXZhaWxhYmxlIGNvbW1hbmRzLicpO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgfSk7XG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJ1bm5lciA9IG5ldyBMaXN0cjxuZXZlcj4oXG4gICAgW1xuICAgICAge1xuICAgICAgICB0aXRsZTogJ0NoZWNraW5nIHlvdXIgc3lzdGVtJyxcbiAgICAgICAgdGFzazogYXN5bmMgKF8sIHRhc2spID0+IHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgY2hlY2tTeXN0ZW0odGFzayk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gICAge1xuICAgICAgY29uY3VycmVudDogZmFsc2UsXG4gICAgICBleGl0T25FcnJvcjogZmFsc2UsXG4gICAgfVxuICApO1xuXG4gIGF3YWl0IHJ1bm5lci5ydW4oKTtcblxuICBpZiAocnVubmVyLmVyci5sZW5ndGgpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgY2hhbGsucmVkKGBcXG5JdCBsb29rcyBsaWtlIHlvdSBhcmUgbWlzc2luZyBzb21lIGRlcGVuZGVuY2llcyB5b3UgbmVlZCB0byBnZXQgRWxlY3Ryb24gcnVubmluZy5cbk1ha2Ugc3VyZSB5b3UgaGF2ZSBnaXQgaW5zdGFsbGVkIGFuZCBOb2RlLmpzIHZlcnNpb24gJHttZXRhZGF0YS5lbmdpbmVzLm5vZGV9YClcbiAgICApO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuXG4gIHByb2dyYW0ucGFyc2UocHJvY2Vzcy5hcmd2KTtcbn0pKCk7XG4iXSwibmFtZXMiOlsibWV0YWRhdGEiLCJyZXF1aXJlIiwib3JpZ2luYWxTQyIsInByb2dyYW0iLCJleGVjdXRlU3ViQ29tbWFuZCIsImJpbmQiLCJhcmd2IiwiYXJncyIsInVua25vd24iLCJpbmRleE9mRG91YmxlRGFzaCIsInByb2Nlc3MiLCJpbmRleE9mIiwibGVuZ3RoIiwicGFzc1Rocm91Z2hBcmdzIiwiZmlsdGVyIiwiYXJnIiwibm9ybWFsQXJncyIsIm5ld0FyZ3MiLCJuZXdVbmtub3duIiwiY29uY2F0IiwidmVyc2lvbiIsIm9wdGlvbiIsImNvbW1hbmQiLCJvbiIsImNvbW1hbmRzIiwiX2V4ZWNzIiwiaGFzIiwiY29uc29sZSIsImVycm9yIiwiY2hhbGsiLCJyZWQiLCJqb2luIiwiZXhpdCIsInJ1bm5lciIsIkxpc3RyIiwidGl0bGUiLCJ0YXNrIiwiXyIsImNoZWNrU3lzdGVtIiwiY29uY3VycmVudCIsImV4aXRPbkVycm9yIiwicnVuIiwiZXJyIiwiZW5naW5lcyIsIm5vZGUiLCJwYXJzZSJdLCJtYXBwaW5ncyI6Ijs7QUFHa0IsR0FBTyxDQUFQLE1BQU87QUFDTCxHQUFXLENBQVgsVUFBVztBQUNULEdBQVEsQ0FBUixPQUFROztBQUlGLEdBQXFCLENBQXJCLFlBQXFCOzs7Ozs7QUFFakQsRUFBOEQsQUFBOUQsNERBQThEO0FBQzlELEtBQUssQ0FBQ0EsUUFBUSxHQUFHQyxPQUFPLENBQUMsQ0FBaUI7QUFFMUMsS0FBSyxDQUFDQyxVQUFVLEdBQUdDLFVBQU8sU0FBQ0MsaUJBQWlCLENBQUNDLElBQUksQ0FBQ0YsVUFBTztBQUN6REEsVUFBTyxTQUFDQyxpQkFBaUIsSUFBSUUsSUFBYyxFQUFFQyxJQUFjLEVBQUVDLE9BQWlCLEdBQUssQ0FBQztJQUNsRixHQUFHLENBQUND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