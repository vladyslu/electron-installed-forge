"use strict";
var _path = _interopRequireDefault(require("path"));
var _core = require("@electron-forge/core");
var _commander = _interopRequireDefault(require("commander"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
require("./util/terminate");
var _workingDir = _interopRequireDefault(require("./util/working-dir"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
(async ()=>{
    let commandArgs = process.argv;
    let appArgs;
    const doubleDashIndex = process.argv.indexOf('--');
    if (doubleDashIndex !== -1) {
        commandArgs = process.argv.slice(0, doubleDashIndex);
        appArgs = process.argv.slice(doubleDashIndex + 1);
    }
    let dir = process.cwd();
    _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[cwd]').option('-p, --app-path <path>', "Override the path to the Electron app to launch (defaults to '.')").option('-l, --enable-logging', 'Enable advanced logging.  This will log internal Electron things').option('-n, --run-as-node', 'Run the Electron app as a Node.JS script').option('--vscode', 'Used to enable arg transformation for debugging Electron through VSCode.  Do not use yourself.').option('-i, --inspect-electron', 'Triggers inspect mode on Electron to allow debugging the main process.  Electron >1.7 only').option('--inspect-brk-electron', 'Triggers inspect-brk mode on Electron to allow debugging the main process.  Electron >1.7 only').action((cwd)=>{
        dir = (0, _workingDir).default(dir, cwd);
    }).parse(commandArgs);
    _commander.default.on('--help', ()=>{
        console.log('  Any arguments found after "--" will be passed to the Electron app, e.g.');
        console.log('');
        console.log('    $ electron-forge /path/to/project -l -- -d -f foo.txt');
        console.log('');
        console.log('  will pass the arguments "-d -f foo.txt" to the Electron app');
    });
    const opts = {
        dir,
        interactive: true,
        enableLogging: !!_commander.default.enableLogging,
        runAsNode: !!_commander.default.runAsNode,
        inspect: !!_commander.default.inspectElectron,
        inspectBrk: !!_commander.default.inspectBrkElectron
    };
    if (_commander.default.vscode && appArgs) {
        // Args are in the format ~arg~ so we need to strip the "~"
        appArgs = appArgs.map((arg)=>arg.substr(1, arg.length - 2)
        ).filter((arg)=>arg.length > 0
        );
    }
    if (_commander.default.appPath) opts.appPath = _commander.default.appPath;
    if (appArgs) opts.args = appArgs;
    const spawned = await _core.api.start(opts);
    await new Promise((resolve)=>{
        const listenForExit = (child)=>{
            // Why: changing to const causes TypeScript compilation to fail.
            /* eslint-disable prefer-const */ let onExit;
            let onRestart;
            /* eslint-enable prefer-const */ const removeListeners = ()=>{
                child.removeListener('exit', onExit);
                child.removeListener('restarted', onRestart);
            };
            onExit = (code)=>{
                removeListeners();
                if (spawned.restarted) return;
                if (code !== 0) {
                    process.exit(code);
                }
                resolve();
            };
            onRestart = (newChild)=>{
                removeListeners();
                listenForExit(newChild);
            };
            child.on('exit', onExit);
            child.on('restarted', onRestart);
        };
        listenForExit(spawned);
    });
})();

//# sourceMappingURL=data:application/json;base64,