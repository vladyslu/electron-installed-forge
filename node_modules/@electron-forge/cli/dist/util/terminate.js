"use strict";
var _chalk = _interopRequireDefault(require("chalk"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function redConsoleError(msg) {
    console.error(_chalk.default.red(msg));
}
process.on('unhandledRejection', (reason, promise)=>{
    redConsoleError('\nAn unhandled rejection has occurred inside Forge:');
    redConsoleError(reason.toString().trim());
    redConsoleError('\nElectron Forge was terminated. Location:');
    promise.catch((err)=>{
        if ('stack' in err) {
            const usefulStack = err.stack;
            if (usefulStack === null || usefulStack === void 0 ? void 0 : usefulStack.startsWith(reason.toString().trim())) {
                redConsoleError(usefulStack.substring(reason.toString().trim().length + 1).trim());
            }
        }
        process.exit(1);
    });
});
process.on('uncaughtException', (err)=>{
    if (err && err.message && err.stack) {
        redConsoleError('\nAn unhandled exception has occurred inside Forge:');
        redConsoleError(err.message);
        redConsoleError(err.stack);
    } else {
        redConsoleError('\nElectron Forge was terminated:');
        redConsoleError(typeof err === 'string' ? err : JSON.stringify(err));
    }
    process.exit(1);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3Rlcm1pbmF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuXG5mdW5jdGlvbiByZWRDb25zb2xlRXJyb3IobXNnOiBzdHJpbmcpIHtcbiAgY29uc29sZS5lcnJvcihjaGFsay5yZWQobXNnKSk7XG59XG5cbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChyZWFzb246IHN0cmluZywgcHJvbWlzZTogUHJvbWlzZTx1bmtub3duPikgPT4ge1xuICByZWRDb25zb2xlRXJyb3IoJ1xcbkFuIHVuaGFuZGxlZCByZWplY3Rpb24gaGFzIG9jY3VycmVkIGluc2lkZSBGb3JnZTonKTtcbiAgcmVkQ29uc29sZUVycm9yKHJlYXNvbi50b1N0cmluZygpLnRyaW0oKSk7XG4gIHJlZENvbnNvbGVFcnJvcignXFxuRWxlY3Ryb24gRm9yZ2Ugd2FzIHRlcm1pbmF0ZWQuIExvY2F0aW9uOicpO1xuICBwcm9taXNlLmNhdGNoKChlcnI6IEVycm9yKSA9PiB7XG4gICAgaWYgKCdzdGFjaycgaW4gZXJyKSB7XG4gICAgICBjb25zdCB1c2VmdWxTdGFjayA9IGVyci5zdGFjaztcbiAgICAgIGlmICh1c2VmdWxTdGFjaz8uc3RhcnRzV2l0aChyZWFzb24udG9TdHJpbmcoKS50cmltKCkpKSB7XG4gICAgICAgIHJlZENvbnNvbGVFcnJvcih1c2VmdWxTdGFjay5zdWJzdHJpbmcocmVhc29uLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCArIDEpLnRyaW0oKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfSk7XG59KTtcblxucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZXJyKSA9PiB7XG4gIGlmIChlcnIgJiYgZXJyLm1lc3NhZ2UgJiYgZXJyLnN0YWNrKSB7XG4gICAgcmVkQ29uc29sZUVycm9yKCdcXG5BbiB1bmhhbmRsZWQgZXhjZXB0aW9uIGhhcyBvY2N1cnJlZCBpbnNpZGUgRm9yZ2U6Jyk7XG4gICAgcmVkQ29uc29sZUVycm9yKGVyci5tZXNzYWdlKTtcbiAgICByZWRDb25zb2xlRXJyb3IoZXJyLnN0YWNrKTtcbiAgfSBlbHNlIHtcbiAgICByZWRDb25zb2xlRXJyb3IoJ1xcbkVsZWN0cm9uIEZvcmdlIHdhcyB0ZXJtaW5hdGVkOicpO1xuICAgIHJlZENvbnNvbGVFcnJvcih0eXBlb2YgZXJyID09PSAnc3RyaW5nJyA/IGVyciA6IEpTT04uc3RyaW5naWZ5KGVycikpO1xuICB9XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn0pO1xuIl0sIm5hbWVzIjpbInJlZENvbnNvbGVFcnJvciIsIm1zZyIsImNvbnNvbGUiLCJlcnJvciIsImNoYWxrIiwicmVkIiwicHJvY2VzcyIsIm9uIiwicmVhc29uIiwicHJvbWlzZSIsInRvU3RyaW5nIiwidHJpbSIsImNhdGNoIiwiZXJyIiwidXNlZnVsU3RhY2siLCJzdGFjayIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJleGl0IiwibWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7QUFBa0IsR0FBTyxDQUFQLE1BQU87Ozs7OztTQUVoQkEsZUFBZSxDQUFDQyxHQUFXLEVBQUUsQ0FBQztJQUNyQ0MsT0FBTyxDQUFDQyxLQUFLLENBQUNDLE1BQUssU0FBQ0MsR0FBRyxDQUFDSixHQUFHO0FBQzdCLENBQUM7QUFFREssT0FBTyxDQUFDQyxFQUFFLENBQUMsQ0FBb0Isc0JBQUdDLE1BQWMsRUFBRUMsT0FBeUIsR0FBSyxDQUFDO0lBQy9FVCxlQUFlLENBQUMsQ0FBcUQ7SUFDckVBLGVBQWUsQ0FBQ1EsTUFBTSxDQUFDRSxRQUFRLEdBQUdDLElBQUk7SUFDdENYLGVBQWUsQ0FBQyxDQUE0QztJQUM1RFMsT0FBTyxDQUFDRyxLQUFLLEVBQUVDLEdBQVUsR0FBSyxDQUFDO1FBQzdCLEVBQUUsRUFBRSxDQUFPLFVBQUlBLEdBQUcsRUFBRSxDQUFDO1lBQ25CLEtBQUssQ0FBQ0MsV0FBVyxHQUFHRCxHQUFHLENBQUNFLEtBQUs7WUFDN0IsRUFBRSxFQUFFRCxXQUFXLGFBQVhBLFdBQVcsS0FBWEEsSUFBSSxDQUFKQSxDQUF1QixHQUF2QkEsSUFBSSxDQUFKQSxDQUF1QixHQUF2QkEsV0FBVyxDQUFFRSxVQUFVLENBQUNSLE1BQU0sQ0FBQ0UsUUFBUSxHQUFHQyxJQUFJLEtBQUssQ0FBQztnQkFDdERYLGVBQWUsQ0FBQ2MsV0FBVyxDQUFDRyxTQUFTLENBQUNULE1BQU0sQ0FBQ0UsUUFBUSxHQUFHQyxJQUFJLEdBQUdPLE1BQU0sR0FBRyxDQUFDLEVBQUVQLElBQUk7WUFDakYsQ0FBQztRQUNILENBQUM7UUFDREwsT0FBTyxDQUFDYSxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0FBQ0gsQ0FBQztBQUVEYixPQUFPLENBQUNDLEVBQUUsQ0FBQyxDQUFtQixxQkFBR00sR0FBRyxHQUFLLENBQUM7SUFDeEMsRUFBRSxFQUFFQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ08sT0FBTyxJQUFJUCxHQUFHLENBQUNFLEtBQUssRUFBRSxDQUFDO1FBQ3BDZixlQUFlLENBQUMsQ0FBcUQ7UUFDckVBLGVBQWUsQ0FBQ2EsR0FBRyxDQUFDTyxPQUFPO1FBQzNCcEIsZUFBZSxDQUFDYSxHQUFHLENBQUNFLEtBQUs7SUFDM0IsQ0FBQyxNQUFNLENBQUM7UUFDTmYsZUFBZSxDQUFDLENBQWtDO1FBQ2xEQSxlQUFlLENBQUMsTUFBTSxDQUFDYSxHQUFHLEtBQUssQ0FBUSxVQUFHQSxHQUFHLEdBQUdRLElBQUksQ0FBQ0MsU0FBUyxDQUFDVCxHQUFHO0lBQ3BFLENBQUM7SUFDRFAsT0FBTyxDQUFDYSxJQUFJLENBQUMsQ0FBQztBQUNoQixDQUFDIn0=