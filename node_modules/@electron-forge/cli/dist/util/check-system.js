"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.checkValidPackageManagerVersion = checkValidPackageManagerVersion;
exports.checkSystem = checkSystem;
var _childProcess = require("child_process");
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var _core = require("@electron-forge/core");
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _semver = _interopRequireDefault(require("semver"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:check-system');
async function getGitVersion() {
    return new Promise((resolve)=>{
        (0, _childProcess).exec('git --version', (err, output)=>err ? resolve(null) : resolve(output.toString().trim().split(' ').reverse()[0])
        );
    });
}
async function checkNodeVersion() {
    const { engines  } = await _fsExtra.default.readJson(_path.default.resolve(__dirname, '..', '..', 'package.json'));
    const versionSatisfied = _semver.default.satisfies(process.versions.node, engines.node);
    if (!versionSatisfied) {
        throw new Error(`You are running Node.js version ${process.versions.node}, but Electron Forge requires Node.js ${engines.node}.`);
    }
    return process.versions.node;
}
const NPM_ALLOWLISTED_VERSIONS = {
    all: '^3.0.0 || ^4.0.0 || ~5.1.0 || ~5.2.0 || >= 5.4.2',
    darwin: '>= 5.4.0',
    linux: '>= 5.4.0'
};
const YARN_ALLOWLISTED_VERSIONS = {
    all: '0.23.3 || 0.24.6 || >= 1.0.0',
    darwin: '0.27.5',
    linux: '0.27.5'
};
function checkValidPackageManagerVersion(packageManager, version, allowlistedVersions) {
    if (!_semver.default.valid(version)) {
        d(`Invalid semver-string while checking version: ${version}`);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        throw new Error(`Could not check ${packageManager} version "${version}", assuming incompatible`);
    }
    if (!_semver.default.satisfies(version, allowlistedVersions)) {
        throw new Error(`Incompatible version of ${packageManager} detected "${version}", must be in range ${allowlistedVersions}`);
    }
}
function warnIfPackageManagerIsntAKnownGoodVersion(packageManager, version, allowlistedVersions) {
    const osVersions = allowlistedVersions[process.platform];
    const versions = osVersions ? `${allowlistedVersions.all} || ${osVersions}` : allowlistedVersions.all;
    const versionString = version.toString();
    checkValidPackageManagerVersion(packageManager, versionString, versions);
}
async function checkPackageManagerVersion() {
    const version = await _core.utils.yarnOrNpmSpawn([
        '--version'
    ]);
    const versionString = version.toString().trim();
    if (_core.utils.hasYarn()) {
        warnIfPackageManagerIsntAKnownGoodVersion('Yarn', versionString, YARN_ALLOWLISTED_VERSIONS);
        return `yarn@${versionString}`;
    } else {
        warnIfPackageManagerIsntAKnownGoodVersion('NPM', versionString, NPM_ALLOWLISTED_VERSIONS);
        return `npm@${versionString}`;
    }
}
/**
 * Some people know their system is OK and don't appreciate the 800ms lag in
 * start up that these checks (in particular the package manager check) costs.
 *
 * Simply creating this flag file in your home directory will skip these checks
 * and shave ~800ms off your forge start time.
 *
 * This is specifically not documented or everyone would make it.
 */ const SKIP_SYSTEM_CHECK = _path.default.resolve(_os.default.homedir(), '.skip-forge-system-check');
async function checkSystem(task1) {
    if (!await _fsExtra.default.pathExists(SKIP_SYSTEM_CHECK)) {
        d('checking system, create ~/.skip-forge-system-check to stop doing this');
        return task1.newListr([
            {
                title: 'Checking git exists',
                task: async (_, task)=>{
                    const gitVersion = await getGitVersion();
                    if (gitVersion) {
                        task.title = `Found git@${gitVersion}`;
                    } else {
                        throw new Error('Could not find git in environment');
                    }
                }
            },
            {
                title: 'Checking node version',
                task: async (_, task)=>{
                    const nodeVersion = await checkNodeVersion();
                    task.title = `Found node@${nodeVersion}`;
                }
            },
            {
                title: 'Checking packageManager version',
                task: async (_, task)=>{
                    const packageManager = await checkPackageManagerVersion();
                    task.title = `Found ${packageManager}`;
                }
            }, 
        ], {
            concurrent: true,
            exitOnError: false,
            rendererOptions: {
                collapse: true
            }
        });
    }
    d('skipping system check');
    return true;
}

//# sourceMappingURL=data:application/json;base64,