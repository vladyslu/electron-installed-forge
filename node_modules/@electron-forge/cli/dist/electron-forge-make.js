"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getMakeOptions = getMakeOptions;
var _path = _interopRequireDefault(require("path"));
var _core = require("@electron-forge/core");
var _get = require("@electron/get");
var _commander = _interopRequireDefault(require("commander"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
require("./util/terminate");
var _workingDir = _interopRequireDefault(require("./util/working-dir"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function getMakeOptions() {
    let dir = process.cwd();
    _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[cwd]').option('--skip-package', 'Assume the app is already packaged').option('-a, --arch [arch]', 'Target architecture').option('-p, --platform [platform]', 'Target build platform').option('--targets [targets]', 'Override your make targets for this run').allowUnknownOption(true).action((cwd)=>{
        dir = (0, _workingDir).default(dir, cwd);
    }).parse(process.argv);
    const makeOpts = {
        dir,
        interactive: true,
        skipPackage: _commander.default.skipPackage
    };
    if (_commander.default.targets) makeOpts.overrideTargets = _commander.default.targets.split(',');
    if (_commander.default.arch) makeOpts.arch = _commander.default.arch;
    if (_commander.default.platform) makeOpts.platform = _commander.default.platform;
    return makeOpts;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
if (require.main === module || global.__LINKED_FORGE__) {
    (async ()=>{
        const makeOpts = await getMakeOptions();
        (0, _get).initializeProxy();
        await _core.api.make(makeOpts);
    })();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1tYWtlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBhcGksIE1ha2VPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVByb3h5IH0gZnJvbSAnQGVsZWN0cm9uL2dldCc7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcblxuaW1wb3J0ICcuL3V0aWwvdGVybWluYXRlJztcbmltcG9ydCB3b3JraW5nRGlyIGZyb20gJy4vdXRpbC93b3JraW5nLWRpcic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNYWtlT3B0aW9ucygpOiBQcm9taXNlPE1ha2VPcHRpb25zPiB7XG4gIGxldCBkaXIgPSBwcm9jZXNzLmN3ZCgpO1xuICBwcm9ncmFtXG4gICAgLnZlcnNpb24oKGF3YWl0IGZzLnJlYWRKc29uKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9wYWNrYWdlLmpzb24nKSkpLnZlcnNpb24pXG4gICAgLmFyZ3VtZW50cygnW2N3ZF0nKVxuICAgIC5vcHRpb24oJy0tc2tpcC1wYWNrYWdlJywgJ0Fzc3VtZSB0aGUgYXBwIGlzIGFscmVhZHkgcGFja2FnZWQnKVxuICAgIC5vcHRpb24oJy1hLCAtLWFyY2ggW2FyY2hdJywgJ1RhcmdldCBhcmNoaXRlY3R1cmUnKVxuICAgIC5vcHRpb24oJy1wLCAtLXBsYXRmb3JtIFtwbGF0Zm9ybV0nLCAnVGFyZ2V0IGJ1aWxkIHBsYXRmb3JtJylcbiAgICAub3B0aW9uKCctLXRhcmdldHMgW3RhcmdldHNdJywgJ092ZXJyaWRlIHlvdXIgbWFrZSB0YXJnZXRzIGZvciB0aGlzIHJ1bicpXG4gICAgLmFsbG93VW5rbm93bk9wdGlvbih0cnVlKVxuICAgIC5hY3Rpb24oKGN3ZCkgPT4ge1xuICAgICAgZGlyID0gd29ya2luZ0RpcihkaXIsIGN3ZCk7XG4gICAgfSlcbiAgICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuICBjb25zdCBtYWtlT3B0czogTWFrZU9wdGlvbnMgPSB7XG4gICAgZGlyLFxuICAgIGludGVyYWN0aXZlOiB0cnVlLFxuICAgIHNraXBQYWNrYWdlOiBwcm9ncmFtLnNraXBQYWNrYWdlLFxuICB9O1xuICBpZiAocHJvZ3JhbS50YXJnZXRzKSBtYWtlT3B0cy5vdmVycmlkZVRhcmdldHMgPSBwcm9ncmFtLnRhcmdldHMuc3BsaXQoJywnKTtcbiAgaWYgKHByb2dyYW0uYXJjaCkgbWFrZU9wdHMuYXJjaCA9IHByb2dyYW0uYXJjaDtcbiAgaWYgKHByb2dyYW0ucGxhdGZvcm0pIG1ha2VPcHRzLnBsYXRmb3JtID0gcHJvZ3JhbS5wbGF0Zm9ybTtcblxuICByZXR1cm4gbWFrZU9wdHM7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUgfHwgKGdsb2JhbCBhcyBhbnkpLl9fTElOS0VEX0ZPUkdFX18pIHtcbiAgKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtYWtlT3B0cyA9IGF3YWl0IGdldE1ha2VPcHRpb25zKCk7XG5cbiAgICBpbml0aWFsaXplUHJveHkoKTtcblxuICAgIGF3YWl0IGFwaS5tYWtlKG1ha2VPcHRzKTtcbiAgfSkoKTtcbn1cbiJdLCJuYW1lcyI6WyJnZXRNYWtlT3B0aW9ucyIsImRpciIsInByb2Nlc3MiLCJjd2QiLCJwcm9ncmFtIiwidmVyc2lvbiIsImZzIiwicmVhZEpzb24iLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImFyZ3VtZW50cyIsIm9wdGlvbiIsImFsbG93VW5rbm93bk9wdGlvbiIsImFjdGlvbiIsIndvcmtpbmdEaXIiLCJwYXJzZSIsImFyZ3YiLCJtYWtlT3B0cyIsImludGVyYWN0aXZlIiwic2tpcFBhY2thZ2UiLCJ0YXJnZXRzIiwib3ZlcnJpZGVUYXJnZXRzIiwic3BsaXQiLCJhcmNoIiwicGxhdGZvcm0iLCJyZXF1aXJlIiwibWFpbiIsIm1vZHVsZSIsImdsb2JhbCIsIl9fTElOS0VEX0ZPUkdFX18iLCJpbml0aWFsaXplUHJveHkiLCJhcGkiLCJtYWtlIl0sIm1hcHBpbmdzIjoiOzs7O1FBVXNCQSxjQUFjLEdBQWRBLGNBQWM7QUFWbkIsR0FBTSxDQUFOLEtBQU07QUFFVSxHQUFzQixDQUF0QixLQUFzQjtBQUN2QixHQUFlLENBQWYsSUFBZTtBQUMzQixHQUFXLENBQVgsVUFBVztBQUNoQixHQUFVLENBQVYsUUFBVTs7QUFHRixHQUFvQixDQUFwQixXQUFvQjs7Ozs7O2VBRXJCQSxjQUFjLEdBQXlCLENBQUM7SUFDNUQsR0FBRyxDQUFDQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRztJQUNyQkMsVUFBTyxTQUNKQyxPQUFPLEVBQUUsS0FBSyxDQUFDQyxRQUFFLFNBQUNDLFFBQVEsQ0FBQ0MsS0FBSSxTQUFDQyxPQUFPLENBQUNDLFNBQVMsRUFBRSxDQUFpQixvQkFBSUwsT0FBTyxFQUMvRU0sU0FBUyxDQUFDLENBQU8sUUFDakJDLE1BQU0sQ0FBQyxDQUFnQixpQkFBRSxDQUFvQyxxQ0FDN0RBLE1BQU0sQ0FBQyxDQUFtQixvQkFBRSxDQUFxQixzQkFDakRBLE1BQU0sQ0FBQyxDQUEyQiw0QkFBRSxDQUF1Qix3QkFDM0RBLE1BQU0sQ0FBQyxDQUFxQixzQkFBRSxDQUF5QywwQ0FDdkVDLGtCQUFrQixDQUFDLElBQUksRUFDdkJDLE1BQU0sRUFBRVgsR0FBRyxHQUFLLENBQUM7UUFDaEJGLEdBQUcsT0FBR2MsV0FBVSxVQUFDZCxHQUFHLEVBQUVFLEdBQUc7SUFDM0IsQ0FBQyxFQUNBYSxLQUFLLENBQUNkLE9BQU8sQ0FBQ2UsSUFBSTtJQUVyQixLQUFLLENBQUNDLFFBQVEsR0FBZ0IsQ0FBQztRQUM3QmpCLEdBQUc7UUFDSGtCLFdBQVcsRUFBRSxJQUFJO1FBQ2pCQyxXQUFXLEVBQUVoQixVQUFPLFNBQUNnQixXQUFXO0lBQ2xDLENBQUM7SUFDRCxFQUFFLEVBQUVoQixVQUFPLFNBQUNpQixPQUFPLEVBQUVILFFBQVEsQ0FBQ0ksZUFBZSxHQUFHbEIsVUFBTyxTQUFDaUIsT0FBTyxDQUFDRSxLQUFLLENBQUMsQ0FBRztJQUN6RSxFQUFFLEVBQUVuQixVQUFPLFNBQUNvQixJQUFJLEVBQUVOLFFBQVEsQ0FBQ00sSUFBSSxHQUFHcEIsVUFBTyxTQUFDb0IsSUFBSTtJQUM5QyxFQUFFLEVBQUVwQixVQUFPLFNBQUNxQixRQUFRLEVBQUVQLFFBQVEsQ0FBQ08sUUFBUSxHQUFHckIsVUFBTyxTQUFDcUIsUUFBUTtJQUUxRCxNQUFNLENBQUNQLFFBQVE7QUFDakIsQ0FBQztBQUVELEVBQThELEFBQTlELDREQUE4RDtBQUM5RCxFQUFFLEVBQUVRLE9BQU8sQ0FBQ0MsSUFBSSxLQUFLQyxNQUFNLElBQUtDLE1BQU0sQ0FBU0MsZ0JBQWdCLEVBQUUsQ0FBQztlQUNuRCxDQUFDO1FBQ1osS0FBSyxDQUFDWixRQUFRLEdBQUcsS0FBSyxDQUFDbEIsY0FBYztZQUVyQytCLElBQWU7UUFFZixLQUFLLENBQUNDLEtBQUcsS0FBQ0MsSUFBSSxDQUFDZixRQUFRO0lBQ3pCLENBQUM7QUFDSCxDQUFDIn0=