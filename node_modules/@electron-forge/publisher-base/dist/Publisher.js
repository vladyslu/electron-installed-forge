"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PublisherBase = exports.default = void 0;
class Publisher {
    /**
   * @param config - A configuration object for this publisher
   * @param platformsToPublishOn - If you want this maker to run on platforms different from `defaultPlatforms` you can provide those platforms here
   */ constructor(config, platformsToPublishOn){
        this.config = config;
        this.platformsToPublishOn = platformsToPublishOn;
        this.config = config;
        Object.defineProperty(this, '__isElectronForgePublisher', {
            value: true,
            enumerable: false,
            configurable: false
        });
    }
    get platforms() {
        if (this.platformsToPublishOn) return this.platformsToPublishOn;
        if (this.defaultPlatforms) return this.defaultPlatforms;
        return [
            'win32',
            'linux',
            'darwin',
            'mas'
        ];
    }
    /**
   * Publishers must implement this method to publish the artifacts returned from
   * make calls.  If any errors occur you must throw them, failing silently or simply
   * logging will not propagate issues up to forge.
   *
   * Please note for a given version publish will be called multiple times, once
   * for each set of "platform" and "arch".  This means if you are publishing
   * darwin and win32 artifacts to somewhere like GitHub on the first publish call
   * you will have to create the version on GitHub and the second call will just
   * be appending files to the existing version.
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async publish(opts) {
        throw new Error(`Publisher ${this.name} did not implement the publish method`);
    }
}
exports.default = Publisher;
exports.PublisherBase = Publisher;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9QdWJsaXNoZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9yZ2VMaXN0clRhc2tEZWZpbml0aW9uLCBGb3JnZU1ha2VSZXN1bHQsIEZvcmdlUGxhdGZvcm0sIElGb3JnZVB1Ymxpc2hlciwgUmVzb2x2ZWRGb3JnZUNvbmZpZyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFB1Ymxpc2hlck9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIGJhc2UgZGlyZWN0b3J5IG9mIHRoZSBhcHBzIHNvdXJjZSBjb2RlXG4gICAqL1xuICBkaXI6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSByZXN1bHRzIGZyb20gcnVubmluZyB0aGUgbWFrZSBjb21tYW5kXG4gICAqL1xuICBtYWtlUmVzdWx0czogRm9yZ2VNYWtlUmVzdWx0W107XG4gIC8qKlxuICAgKiBUaGUgcmF3IGZvcmdlQ29uZmlnIHRoaXMgYXBwIGlzIHVzaW5nLlxuICAgKlxuICAgKiBZb3UgcHJvYmFibHkgc2hvdWxkbid0IHVzZSB0aGlzXG4gICAqL1xuICBmb3JnZUNvbmZpZzogUmVzb2x2ZWRGb3JnZUNvbmZpZztcbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRoYXQgYWxsb3dzIHRoZSBwdWJsaXNoZXIgdG8gcHJvdmlkZSBzdGF0dXMgLyBwcm9ncmVzcyB1cGRhdGVzXG4gICAqIHRvIHRoZSB1c2VyLiBUaGlzIG1ldGhvZCBjdXJyZW50bHkgbWFwcyB0byBzZXR0aW5nIHRoZSBcIm91dHB1dFwiIGxpbmVcbiAgICogaW4gdGhlIHB1Ymxpc2hlciBsaXN0ciB0YXNrLlxuICAgKi9cbiAgc2V0U3RhdHVzTGluZTogKHN0YXR1c0xpbmU6IHN0cmluZykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgUHVibGlzaGVyPEM+IGltcGxlbWVudHMgSUZvcmdlUHVibGlzaGVyIHtcbiAgcHVibGljIGFic3RyYWN0IG5hbWU6IHN0cmluZztcblxuICBwdWJsaWMgZGVmYXVsdFBsYXRmb3Jtcz86IEZvcmdlUGxhdGZvcm1bXTtcblxuICAvKiogQGludGVybmFsICovXG4gIF9faXNFbGVjdHJvbkZvcmdlUHVibGlzaGVyITogdHJ1ZTtcblxuICAvKipcbiAgICogQHBhcmFtIGNvbmZpZyAtIEEgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIHRoaXMgcHVibGlzaGVyXG4gICAqIEBwYXJhbSBwbGF0Zm9ybXNUb1B1Ymxpc2hPbiAtIElmIHlvdSB3YW50IHRoaXMgbWFrZXIgdG8gcnVuIG9uIHBsYXRmb3JtcyBkaWZmZXJlbnQgZnJvbSBgZGVmYXVsdFBsYXRmb3Jtc2AgeW91IGNhbiBwcm92aWRlIHRob3NlIHBsYXRmb3JtcyBoZXJlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29uZmlnOiBDLCBwcm90ZWN0ZWQgcGxhdGZvcm1zVG9QdWJsaXNoT24/OiBGb3JnZVBsYXRmb3JtW10pIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ19faXNFbGVjdHJvbkZvcmdlUHVibGlzaGVyJywge1xuICAgICAgdmFsdWU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgfSk7XG4gIH1cblxuICBnZXQgcGxhdGZvcm1zKCk6IEZvcmdlUGxhdGZvcm1bXSB7XG4gICAgaWYgKHRoaXMucGxhdGZvcm1zVG9QdWJsaXNoT24pIHJldHVybiB0aGlzLnBsYXRmb3Jtc1RvUHVibGlzaE9uO1xuICAgIGlmICh0aGlzLmRlZmF1bHRQbGF0Zm9ybXMpIHJldHVybiB0aGlzLmRlZmF1bHRQbGF0Zm9ybXM7XG4gICAgcmV0dXJuIFsnd2luMzInLCAnbGludXgnLCAnZGFyd2luJywgJ21hcyddO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcnMgbXVzdCBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gcHVibGlzaCB0aGUgYXJ0aWZhY3RzIHJldHVybmVkIGZyb21cbiAgICogbWFrZSBjYWxscy4gIElmIGFueSBlcnJvcnMgb2NjdXIgeW91IG11c3QgdGhyb3cgdGhlbSwgZmFpbGluZyBzaWxlbnRseSBvciBzaW1wbHlcbiAgICogbG9nZ2luZyB3aWxsIG5vdCBwcm9wYWdhdGUgaXNzdWVzIHVwIHRvIGZvcmdlLlxuICAgKlxuICAgKiBQbGVhc2Ugbm90ZSBmb3IgYSBnaXZlbiB2ZXJzaW9uIHB1Ymxpc2ggd2lsbCBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMsIG9uY2VcbiAgICogZm9yIGVhY2ggc2V0IG9mIFwicGxhdGZvcm1cIiBhbmQgXCJhcmNoXCIuICBUaGlzIG1lYW5zIGlmIHlvdSBhcmUgcHVibGlzaGluZ1xuICAgKiBkYXJ3aW4gYW5kIHdpbjMyIGFydGlmYWN0cyB0byBzb21ld2hlcmUgbGlrZSBHaXRIdWIgb24gdGhlIGZpcnN0IHB1Ymxpc2ggY2FsbFxuICAgKiB5b3Ugd2lsbCBoYXZlIHRvIGNyZWF0ZSB0aGUgdmVyc2lvbiBvbiBHaXRIdWIgYW5kIHRoZSBzZWNvbmQgY2FsbCB3aWxsIGp1c3RcbiAgICogYmUgYXBwZW5kaW5nIGZpbGVzIHRvIHRoZSBleGlzdGluZyB2ZXJzaW9uLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBhc3luYyBwdWJsaXNoKG9wdHM6IFB1Ymxpc2hlck9wdGlvbnMpOiBQcm9taXNlPEZvcmdlTGlzdHJUYXNrRGVmaW5pdGlvbltdIHwgdm9pZD4ge1xuICAgIHRocm93IG5ldyBFcnJvcihgUHVibGlzaGVyICR7dGhpcy5uYW1lfSBkaWQgbm90IGltcGxlbWVudCB0aGUgcHVibGlzaCBtZXRob2RgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBQdWJsaXNoZXIgYXMgUHVibGlzaGVyQmFzZSB9O1xuIl0sIm5hbWVzIjpbIlB1Ymxpc2hlciIsImNvbmZpZyIsInBsYXRmb3Jtc1RvUHVibGlzaE9uIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJwbGF0Zm9ybXMiLCJkZWZhdWx0UGxhdGZvcm1zIiwicHVibGlzaCIsIm9wdHMiLCJFcnJvciIsIm5hbWUiLCJQdWJsaXNoZXJCYXNlIl0sIm1hcHBpbmdzIjoiOzs7OztNQXlCOEJBLFNBQVM7SUFRckMsRUFHRyxBQUhIOzs7R0FHRyxBQUhILEVBR0csYUFDZ0JDLE1BQVMsRUFBWUMsb0JBQXNDLENBQUUsQ0FBQzthQUE5REQsTUFBUyxHQUFUQSxNQUFTO2FBQVlDLG9CQUFzQyxHQUF0Q0Esb0JBQXNDO1FBQzVFLElBQUksQ0FBQ0QsTUFBTSxHQUFHQSxNQUFNO1FBQ3BCRSxNQUFNLENBQUNDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBNEIsNkJBQUUsQ0FBQztZQUN6REMsS0FBSyxFQUFFLElBQUk7WUFDWEMsVUFBVSxFQUFFLEtBQUs7WUFDakJDLFlBQVksRUFBRSxLQUFLO1FBQ3JCLENBQUM7SUFDSCxDQUFDO1FBRUdDLFNBQVMsR0FBb0IsQ0FBQztRQUNoQyxFQUFFLEVBQUUsSUFBSSxDQUFDTixvQkFBb0IsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDQSxvQkFBb0I7UUFDL0QsRUFBRSxFQUFFLElBQUksQ0FBQ08sZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQ0EsZ0JBQWdCO1FBQ3ZELE1BQU0sQ0FBQyxDQUFDO1lBQUEsQ0FBTztZQUFFLENBQU87WUFBRSxDQUFRO1lBQUUsQ0FBSztRQUFBLENBQUM7SUFDNUMsQ0FBQztJQUVELEVBVUcsQUFWSDs7Ozs7Ozs7OztHQVVHLEFBVkgsRUFVRyxDQUNILEVBQTZELEFBQTdELDJEQUE2RDtVQUN2REMsT0FBTyxDQUFDQyxJQUFzQixFQUE4QyxDQUFDO1FBQ2pGLEtBQUssQ0FBQyxHQUFHLENBQUNDLEtBQUssRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDQyxJQUFJLENBQUMscUNBQXFDO0lBQzlFLENBQUM7O2tCQXpDMkJiLFNBQVM7UUE0Q2pCYyxhQUFhLEdBQTFCZCxTQUFTIn0=