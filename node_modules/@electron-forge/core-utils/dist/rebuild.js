"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.listrCompatibleRebuildHook = void 0;
var cp = _interopRequireWildcard(require("child_process"));
var path = _interopRequireWildcard(require("path"));
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const listrCompatibleRebuildHook = async (buildPath, electronVersion, platform, arch, config = {}, task, taskTitlePrefix = '')=>{
    var ref, ref1;
    task.title = `${taskTitlePrefix}Preparing native dependencies`;
    const options = {
        ...config,
        buildPath,
        electronVersion,
        arch
    };
    const child = cp.fork(path.resolve(__dirname, 'remote-rebuild.js'), [
        JSON.stringify(options)
    ], {
        stdio: [
            'pipe',
            'pipe',
            'pipe',
            'ipc'
        ]
    });
    let pendingError;
    let found = 0;
    let done = 0;
    const redraw = ()=>{
        task.title = `${taskTitlePrefix}Preparing native dependencies: ${done} / ${found}`;
    };
    (ref = child.stdout) === null || ref === void 0 ? void 0 : ref.on('data', (chunk)=>{
        task.output = chunk.toString();
    });
    (ref1 = child.stderr) === null || ref1 === void 0 ? void 0 : ref1.on('data', (chunk)=>{
        task.output = chunk.toString();
    });
    child.on('message', (message)=>{
        switch(message.msg){
            case 'module-found':
                {
                    found += 1;
                    redraw();
                    break;
                }
            case 'module-done':
                {
                    done += 1;
                    redraw();
                    break;
                }
            case 'rebuild-error':
                {
                    pendingError = new Error(message.err.message);
                    pendingError.stack = message.err.stack;
                    break;
                }
            case 'rebuild-done':
                {
                    task.task.rendererTaskOptions.persistentOutput = false;
                    break;
                }
        }
    });
    await new Promise((resolve, reject)=>{
        child.on('exit', (code)=>{
            if (code === 0 && !pendingError) {
                resolve();
            } else {
                reject(pendingError || new Error(`Rebuilder failed with exit code: ${code}`));
            }
        });
    });
};
exports.listrCompatibleRebuildHook = listrCompatibleRebuildHook;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWJ1aWxkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNwIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgRm9yZ2VBcmNoLCBGb3JnZUxpc3RyVGFzaywgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgUmVidWlsZE9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24vcmVidWlsZCc7XG5cbmV4cG9ydCBjb25zdCBsaXN0ckNvbXBhdGlibGVSZWJ1aWxkSG9vayA9IGFzeW5jIChcbiAgYnVpbGRQYXRoOiBzdHJpbmcsXG4gIGVsZWN0cm9uVmVyc2lvbjogc3RyaW5nLFxuICBwbGF0Zm9ybTogRm9yZ2VQbGF0Zm9ybSxcbiAgYXJjaDogRm9yZ2VBcmNoLFxuICBjb25maWc6IFBhcnRpYWw8UmVidWlsZE9wdGlvbnM+ID0ge30sXG4gIHRhc2s6IEZvcmdlTGlzdHJUYXNrPG5ldmVyPixcbiAgdGFza1RpdGxlUHJlZml4ID0gJydcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICB0YXNrLnRpdGxlID0gYCR7dGFza1RpdGxlUHJlZml4fVByZXBhcmluZyBuYXRpdmUgZGVwZW5kZW5jaWVzYDtcblxuICBjb25zdCBvcHRpb25zOiBSZWJ1aWxkT3B0aW9ucyA9IHtcbiAgICAuLi5jb25maWcsXG4gICAgYnVpbGRQYXRoLFxuICAgIGVsZWN0cm9uVmVyc2lvbixcbiAgICBhcmNoLFxuICB9O1xuXG4gIGNvbnN0IGNoaWxkID0gY3AuZm9yayhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAncmVtb3RlLXJlYnVpbGQuanMnKSwgW0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpXSwge1xuICAgIHN0ZGlvOiBbJ3BpcGUnLCAncGlwZScsICdwaXBlJywgJ2lwYyddLFxuICB9KTtcblxuICBsZXQgcGVuZGluZ0Vycm9yOiBFcnJvcjtcbiAgbGV0IGZvdW5kID0gMDtcbiAgbGV0IGRvbmUgPSAwO1xuXG4gIGNvbnN0IHJlZHJhdyA9ICgpID0+IHtcbiAgICB0YXNrLnRpdGxlID0gYCR7dGFza1RpdGxlUHJlZml4fVByZXBhcmluZyBuYXRpdmUgZGVwZW5kZW5jaWVzOiAke2RvbmV9IC8gJHtmb3VuZH1gO1xuICB9O1xuXG4gIGNoaWxkLnN0ZG91dD8ub24oJ2RhdGEnLCAoY2h1bmspID0+IHtcbiAgICB0YXNrLm91dHB1dCA9IGNodW5rLnRvU3RyaW5nKCk7XG4gIH0pO1xuICBjaGlsZC5zdGRlcnI/Lm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XG4gICAgdGFzay5vdXRwdXQgPSBjaHVuay50b1N0cmluZygpO1xuICB9KTtcblxuICBjaGlsZC5vbignbWVzc2FnZScsIChtZXNzYWdlOiB7IG1zZzogc3RyaW5nOyBlcnI6IHsgbWVzc2FnZTogc3RyaW5nOyBzdGFjazogc3RyaW5nIH0gfSkgPT4ge1xuICAgIHN3aXRjaCAobWVzc2FnZS5tc2cpIHtcbiAgICAgIGNhc2UgJ21vZHVsZS1mb3VuZCc6IHtcbiAgICAgICAgZm91bmQgKz0gMTtcbiAgICAgICAgcmVkcmF3KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnbW9kdWxlLWRvbmUnOiB7XG4gICAgICAgIGRvbmUgKz0gMTtcbiAgICAgICAgcmVkcmF3KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAncmVidWlsZC1lcnJvcic6IHtcbiAgICAgICAgcGVuZGluZ0Vycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UuZXJyLm1lc3NhZ2UpO1xuICAgICAgICBwZW5kaW5nRXJyb3Iuc3RhY2sgPSBtZXNzYWdlLmVyci5zdGFjaztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdyZWJ1aWxkLWRvbmUnOiB7XG4gICAgICAgIHRhc2sudGFzay5yZW5kZXJlclRhc2tPcHRpb25zLnBlcnNpc3RlbnRPdXRwdXQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY2hpbGQub24oJ2V4aXQnLCAoY29kZSkgPT4ge1xuICAgICAgaWYgKGNvZGUgPT09IDAgJiYgIXBlbmRpbmdFcnJvcikge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QocGVuZGluZ0Vycm9yIHx8IG5ldyBFcnJvcihgUmVidWlsZGVyIGZhaWxlZCB3aXRoIGV4aXQgY29kZTogJHtjb2RlfWApKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbImNwIiwicGF0aCIsImxpc3RyQ29tcGF0aWJsZVJlYnVpbGRIb29rIiwiYnVpbGRQYXRoIiwiZWxlY3Ryb25WZXJzaW9uIiwicGxhdGZvcm0iLCJhcmNoIiwiY29uZmlnIiwidGFzayIsInRhc2tUaXRsZVByZWZpeCIsImNoaWxkIiwidGl0bGUiLCJvcHRpb25zIiwiZm9yayIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RkaW8iLCJwZW5kaW5nRXJyb3IiLCJmb3VuZCIsImRvbmUiLCJyZWRyYXciLCJzdGRvdXQiLCJvbiIsImNodW5rIiwib3V0cHV0IiwidG9TdHJpbmciLCJzdGRlcnIiLCJtZXNzYWdlIiwibXNnIiwiRXJyb3IiLCJlcnIiLCJzdGFjayIsInJlbmRlcmVyVGFza09wdGlvbnMiLCJwZXJzaXN0ZW50T3V0cHV0IiwiUHJvbWlzZSIsInJlamVjdCIsImNvZGUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQVlBLEdBQUUsQ0FBRkEsRUFBRTtBQUNGQyxHQUFJLENBQUpBLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLVCxLQUFLLENBQUNDLDBCQUEwQixVQUNyQ0MsU0FBaUIsRUFDakJDLGVBQXVCLEVBQ3ZCQyxRQUF1QixFQUN2QkMsSUFBZSxF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