"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getElectronModulePath = getElectronModulePath;
exports.getElectronVersion = getElectronVersion;
exports.updateElectronDependency = updateElectronDependency;
var _path = _interopRequireDefault(require("path"));
var _debug = _interopRequireDefault(require("debug"));
var _findUp = _interopRequireDefault(require("find-up"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _semver = _interopRequireDefault(require("semver"));
var _yarnOrNpm = require("./yarn-or-npm");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:electron-version');
const electronPackageNames = [
    'electron-prebuilt-compile',
    'electron-prebuilt',
    'electron-nightly',
    'electron'
];
function findElectronDep(dep) {
    return electronPackageNames.includes(dep);
}
async function findAncestorNodeModulesPath(dir, packageName) {
    d('Looking for a lock file to indicate the root of the repo');
    const lockPath = await (0, _findUp).default([
        'package-lock.json',
        'yarn.lock',
        'pnpm-lock.yaml'
    ], {
        cwd: dir,
        type: 'file'
    });
    if (lockPath) {
        d(`Found lock file: ${lockPath}`);
        const nodeModulesPath = _path.default.join(_path.default.dirname(lockPath), 'node_modules', packageName);
        if (await _fsExtra.default.pathExists(nodeModulesPath)) {
            return nodeModulesPath;
        }
    }
    return Promise.resolve(undefined);
}
async function determineNodeModulesPath(dir, packageName) {
    const nodeModulesPath = _path.default.join(dir, 'node_modules', packageName);
    if (await _fsExtra.default.pathExists(nodeModulesPath)) {
        return nodeModulesPath;
    }
    return findAncestorNodeModulesPath(dir, packageName);
}
class PackageNotFoundError extends Error {
    constructor(packageName, dir){
        super(`Cannot find the package "${packageName}". Perhaps you need to run "${(0, _yarnOrNpm).safeYarnOrNpm()} install" in "${dir}"?`);
    }
}
exports.PackageNotFoundError = PackageNotFoundError;
function getElectronModuleName(packageJSON) {
    if (!packageJSON.devDependencies) {
        throw new Error('package.json for app does not have any devDependencies');
    }
    // Why: checked above
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const packageName = electronPackageNames.find((pkg)=>packageJSON.devDependencies[pkg]
    );
    if (packageName === undefined) {
        throw new Error('Could not find any Electron packages in devDependencies');
    }
    return packageName;
}
async function getElectronPackageJSONPath(dir, packageName) {
    const nodeModulesPath = await determineNodeModulesPath(dir, packageName);
    if (!nodeModulesPath) {
        throw new PackageNotFoundError(packageName, dir);
    }
    const electronPackageJSONPath = _path.default.join(nodeModulesPath, 'package.json');
    if (await _fsExtra.default.pathExists(electronPackageJSONPath)) {
        return electronPackageJSONPath;
    }
    return undefined;
}
async function getElectronModulePath(dir, packageJSON) {
    const moduleName = getElectronModuleName(packageJSON);
    const packageJSONPath = await getElectronPackageJSONPath(dir, moduleName);
    if (packageJSONPath) {
        return _path.default.dirname(packageJSONPath);
    }
    return undefined;
}
async function getElectronVersion(dir, packageJSON) {
    const packageName = getElectronModuleName(packageJSON);
    // Why: checked in getElectronModuleName
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    let version = packageJSON.devDependencies[packageName];
    if (!_semver.default.valid(version)) {
        // It's not an exact version, find it in the actual module
        const electronPackageJSONPath = await getElectronPackageJSONPath(dir, packageName);
        if (electronPackageJSONPath) {
            const electronPackageJSON = await _fsExtra.default.readJson(electronPackageJSONPath);
            version = electronPackageJSON.version;
        } else {
            throw new PackageNotFoundError(packageName, dir);
        }
    }
    return version;
}
function updateElectronDependency(packageJSON, dev, exact) {
    const alteredDev = [].concat(dev);
    let alteredExact = [].concat(exact);
    // Why: checked in getElectronModuleName
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    if (Object.keys(packageJSON.devDependencies).find(findElectronDep)) {
        alteredExact = alteredExact.filter((dep)=>dep !== 'electron'
        );
    } else if (packageJSON.dependencies) {
        const electronKey = Object.keys(packageJSON.dependencies).find(findElectronDep);
        if (electronKey) {
            alteredExact = alteredExact.filter((dep)=>dep !== 'electron'
            );
            d(`Moving ${electronKey} from dependencies to devDependencies`);
            alteredDev.push(`${electronKey}@${packageJSON.dependencies[electronKey]}`);
            delete packageJSON.dependencies[electronKey];
        }
    }
    return [
        alteredDev,
        alteredExact
    ];
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi12ZXJzaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGZpbmRVcCBmcm9tICdmaW5kLXVwJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCB7IHNhZmVZYXJuT3JOcG0gfSBmcm9tICcuL3lhcm4tb3ItbnBtJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTplbGVjdHJvbi12ZXJzaW9uJyk7XG5cbmNvbnN0IGVsZWN0cm9uUGFja2FnZU5hbWVzID0gWydlbGVjdHJvbi1wcmVidWlsdC1jb21waWxlJywgJ2VsZWN0cm9uLXByZWJ1aWx0JywgJ2VsZWN0cm9uLW5pZ2h0bHknLCAnZWxlY3Ryb24nXTtcblxudHlwZSBQYWNrYWdlSlNPTldpdGhEZXBzID0ge1xuICBkZXZEZXBlbmRlbmNpZXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBkZXBlbmRlbmNpZXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xufTtcblxuZnVuY3Rpb24gZmluZEVsZWN0cm9uRGVwKGRlcDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBlbGVjdHJvblBhY2thZ2VOYW1lcy5pbmNsdWRlcyhkZXApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBmaW5kQW5jZXN0b3JOb2RlTW9kdWxlc1BhdGgoZGlyOiBzdHJpbmcsIHBhY2thZ2VOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICBkKCdMb29raW5nIGZvciBhIGxvY2sgZmlsZSB0byBpbmRpY2F0ZSB0aGUgcm9vdCBvZiB0aGUgcmVwbycpO1xuICBjb25zdCBsb2NrUGF0aCA9IGF3YWl0IGZpbmRVcChbJ3BhY2thZ2UtbG9jay5qc29uJywgJ3lhcm4ubG9jaycsICdwbnBtLWxvY2sueWFtbCddLCB7IGN3ZDogZGlyLCB0eXBlOiAnZmlsZScgfSk7XG4gIGlmIChsb2NrUGF0aCkge1xuICAgIGQoYEZvdW5kIGxvY2sgZmlsZTogJHtsb2NrUGF0aH1gKTtcbiAgICBjb25zdCBub2RlTW9kdWxlc1BhdGggPSBwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKGxvY2tQYXRoKSwgJ25vZGVfbW9kdWxlcycsIHBhY2thZ2VOYW1lKTtcbiAgICBpZiAoYXdhaXQgZnMucGF0aEV4aXN0cyhub2RlTW9kdWxlc1BhdGgpKSB7XG4gICAgICByZXR1cm4gbm9kZU1vZHVsZXNQYXRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGV0ZXJtaW5lTm9kZU1vZHVsZXNQYXRoKGRpcjogc3RyaW5nLCBwYWNrYWdlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgY29uc3Qgbm9kZU1vZHVsZXNQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBwYXRoLmpvaW4oZGlyLCAnbm9kZV9tb2R1bGVzJywgcGFja2FnZU5hbWUpO1xuICBpZiAoYXdhaXQgZnMucGF0aEV4aXN0cyhub2RlTW9kdWxlc1BhdGgpKSB7XG4gICAgcmV0dXJuIG5vZGVNb2R1bGVzUGF0aDtcbiAgfVxuICByZXR1cm4gZmluZEFuY2VzdG9yTm9kZU1vZHVsZXNQYXRoKGRpciwgcGFja2FnZU5hbWUpO1xufVxuXG5leHBvcnQgY2xhc3MgUGFja2FnZU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHBhY2thZ2VOYW1lOiBzdHJpbmcsIGRpcjogc3RyaW5nKSB7XG4gICAgc3VwZXIoYENhbm5vdCBmaW5kIHRoZSBwYWNrYWdlIFwiJHtwYWNrYWdlTmFtZX1cIi4gUGVyaGFwcyB5b3UgbmVlZCB0byBydW4gXCIke3NhZmVZYXJuT3JOcG0oKX0gaW5zdGFsbFwiIGluIFwiJHtkaXJ9XCI/YCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlY3Ryb25Nb2R1bGVOYW1lKHBhY2thZ2VKU09OOiBQYWNrYWdlSlNPTldpdGhEZXBzKTogc3RyaW5nIHtcbiAgaWYgKCFwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhY2thZ2UuanNvbiBmb3IgYXBwIGRvZXMgbm90IGhhdmUgYW55IGRldkRlcGVuZGVuY2llcycpO1xuICB9XG5cbiAgLy8gV2h5OiBjaGVja2VkIGFib3ZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gIGNvbnN0IHBhY2thZ2VOYW1lID0gZWxlY3Ryb25QYWNrYWdlTmFtZXMuZmluZCgocGtnKSA9PiBwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXMhW3BrZ10pO1xuICBpZiAocGFja2FnZU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgYW55IEVsZWN0cm9uIHBhY2thZ2VzIGluIGRldkRlcGVuZGVuY2llcycpO1xuICB9XG5cbiAgcmV0dXJuIHBhY2thZ2VOYW1lO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRFbGVjdHJvblBhY2thZ2VKU09OUGF0aChkaXI6IHN0cmluZywgcGFja2FnZU5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gIGNvbnN0IG5vZGVNb2R1bGVzUGF0aCA9IGF3YWl0IGRldGVybWluZU5vZGVNb2R1bGVzUGF0aChkaXIsIHBhY2thZ2VOYW1lKTtcbiAgaWYgKCFub2RlTW9kdWxlc1BhdGgpIHtcbiAgICB0aHJvdyBuZXcgUGFja2FnZU5vdEZvdW5kRXJyb3IocGFja2FnZU5hbWUsIGRpcik7XG4gIH1cblxuICBjb25zdCBlbGVjdHJvblBhY2thZ2VKU09OUGF0aCA9IHBhdGguam9pbihub2RlTW9kdWxlc1BhdGgsICdwYWNrYWdlLmpzb24nKTtcbiAgaWYgKGF3YWl0IGZzLnBhdGhFeGlzdHMoZWxlY3Ryb25QYWNrYWdlSlNPTlBhdGgpKSB7XG4gICAgcmV0dXJuIGVsZWN0cm9uUGFja2FnZUpTT05QYXRoO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEVsZWN0cm9uTW9kdWxlUGF0aChkaXI6IHN0cmluZywgcGFja2FnZUpTT046IFBhY2thZ2VKU09OV2l0aERlcHMpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICBjb25zdCBtb2R1bGVOYW1lID0gZ2V0RWxlY3Ryb25Nb2R1bGVOYW1lKHBhY2thZ2VKU09OKTtcbiAgY29uc3QgcGFja2FnZUpTT05QYXRoID0gYXdhaXQgZ2V0RWxlY3Ryb25QYWNrYWdlSlNPTlBhdGgoZGlyLCBtb2R1bGVOYW1lKTtcbiAgaWYgKHBhY2thZ2VKU09OUGF0aCkge1xuICAgIHJldHVybiBwYXRoLmRpcm5hbWUocGFja2FnZUpTT05QYXRoKTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFbGVjdHJvblZlcnNpb24oZGlyOiBzdHJpbmcsIHBhY2thZ2VKU09OOiBQYWNrYWdlSlNPTldpdGhEZXBzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgcGFja2FnZU5hbWUgPSBnZXRFbGVjdHJvbk1vZHVsZU5hbWUocGFja2FnZUpTT04pO1xuXG4gIC8vIFdoeTogY2hlY2tlZCBpbiBnZXRFbGVjdHJvbk1vZHVsZU5hbWVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgbGV0IHZlcnNpb24gPSBwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXMhW3BhY2thZ2VOYW1lXTtcbiAgaWYgKCFzZW12ZXIudmFsaWQodmVyc2lvbikpIHtcbiAgICAvLyBJdCdzIG5vdCBhbiBleGFjdCB2ZXJzaW9uLCBmaW5kIGl0IGluIHRoZSBhY3R1YWwgbW9kdWxlXG4gICAgY29uc3QgZWxlY3Ryb25QYWNrYWdlSlNPTlBhdGggPSBhd2FpdCBnZXRFbGVjdHJvblBhY2thZ2VKU09OUGF0aChkaXIsIHBhY2thZ2VOYW1lKTtcbiAgICBpZiAoZWxlY3Ryb25QYWNrYWdlSlNPTlBhdGgpIHtcbiAgICAgIGNvbnN0IGVsZWN0cm9uUGFja2FnZUpTT04gPSBhd2FpdCBmcy5yZWFkSnNvbihlbGVjdHJvblBhY2thZ2VKU09OUGF0aCk7XG4gICAgICB2ZXJzaW9uID0gZWxlY3Ryb25QYWNrYWdlSlNPTi52ZXJzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgUGFja2FnZU5vdEZvdW5kRXJyb3IocGFja2FnZU5hbWUsIGRpcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZlcnNpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFbGVjdHJvbkRlcGVuZGVuY3kocGFja2FnZUpTT046IFBhY2thZ2VKU09OV2l0aERlcHMsIGRldjogc3RyaW5nW10sIGV4YWN0OiBzdHJpbmdbXSk6IFtzdHJpbmdbXSwgc3RyaW5nW11dIHtcbiAgY29uc3QgYWx0ZXJlZERldiA9IChbXSBhcyBzdHJpbmdbXSkuY29uY2F0KGRldik7XG4gIGxldCBhbHRlcmVkRXhhY3QgPSAoW10gYXMgc3RyaW5nW10pLmNvbmNhdChleGFjdCk7XG4gIC8vIFdoeTogY2hlY2tlZCBpbiBnZXRFbGVjdHJvbk1vZHVsZU5hbWVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgaWYgKE9iamVjdC5rZXlzKHBhY2thZ2VKU09OLmRldkRlcGVuZGVuY2llcyEpLmZpbmQoZmluZEVsZWN0cm9uRGVwKSkge1xuICAgIGFsdGVyZWRFeGFjdCA9IGFsdGVyZWRFeGFjdC5maWx0ZXIoKGRlcCkgPT4gZGVwICE9PSAnZWxlY3Ryb24nKTtcbiAgfSBlbHNlIGlmIChwYWNrYWdlSlNPTi5kZXBlbmRlbmNpZXMpIHtcbiAgICBjb25zdCBlbGVjdHJvbktleSA9IE9iamVjdC5rZXlzKHBhY2thZ2VKU09OLmRlcGVuZGVuY2llcykuZmluZChmaW5kRWxlY3Ryb25EZXApO1xuICAgIGlmIChlbGVjdHJvbktleSkge1xuICAgICAgYWx0ZXJlZEV4YWN0ID0gYWx0ZXJlZEV4YWN0LmZpbHRlcigoZGVwKSA9PiBkZXAgIT09ICdlbGVjdHJvbicpO1xuICAgICAgZChgTW92aW5nICR7ZWxlY3Ryb25LZXl9IGZyb20gZGVwZW5kZW5jaWVzIHRvIGRldkRlcGVuZGVuY2llc2ApO1xuICAgICAgYWx0ZXJlZERldi5wdXNoKGAke2VsZWN0cm9uS2V5fUAke3BhY2thZ2VKU09OLmRlcGVuZGVuY2llc1tlbGVjdHJvbktleV19YCk7XG4gICAgICBkZWxldGUgcGFja2FnZUpTT04uZGVwZW5kZW5jaWVzW2VsZWN0cm9uS2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW2FsdGVyZWREZXYsIGFsdGVyZWRFeGFjdF07XG59XG4iXSwibmFtZXMiOlsiZ2V0RWxlY3Ryb25Nb2R1bGVQYXRoIiwiZ2V0RWxlY3Ryb25WZXJzaW9uIiwidXBkYXRlRWxlY3Ryb25EZXBlbmRlbmN5IiwiZCIsImRlYnVnIiwiZWxlY3Ryb25QYWNrYWdlTmFtZXMiLCJmaW5kRWxlY3Ryb25EZXAiLCJkZXAiLCJpbmNsdWRlcyIsImZpbmRBbmNlc3Rvck5vZGVNb2R1bGVzUGF0aCIsImRpciIsInBhY2thZ2VOYW1lIiwibG9ja1BhdGgiLCJmaW5kVXAiLCJjd2QiLCJ0eXBlIiwibm9kZU1vZHVsZXNQYXRoIiwicGF0aCIsImpvaW4iLCJkaXJuYW1lIiwiZnMiLCJwYXRoRXhpc3RzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1bmRlZmluZWQiLCJkZXRlcm1pbmVOb2RlTW9kdWxlc1BhdGgiLCJQYWNrYWdlTm90Rm91bmRFcnJvciIsIkVycm9yIiwic2FmZVlhcm5Pck5wbSIsImdldEVsZWN0cm9uTW9kdWxlTmFtZSIsInBhY2thZ2VKU09OIiwiZGV2RGVwZW5kZW5jaWVzIiwiZmluZCIsInBrZyIsImdldEVsZWN0cm9uUGFja2FnZUpTT05QYXRoIiwiZWxlY3Ryb25QYWNrYWdlSlNPTlBhdGgiLCJtb2R1bGVOYW1lIiwicGFja2FnZUpTT05QYXRoIiwidmVyc2lvbiIsInNlbXZlciIsInZhbGlkIiwiZWxlY3Ryb25QYWNrYWdlSlNPTiIsInJlYWRKc29uIiwiZGV2IiwiZXhhY3QiLCJhbHRlcmVkRGV2IiwiY29uY2F0IiwiYWx0ZXJlZEV4YWN0IiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsImRlcGVuZGVuY2llcyIsImVsZWN0cm9uS2V5IiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7OztRQStFc0JBLHFCQUFxQixHQUFyQkEscUJBQXFCO1FBVXJCQyxrQkFBa0IsR0FBbEJBLGtCQUFrQjtRQW9CeEJDLHdCQUF3QixHQUF4QkEsd0JBQXdCO0FBN0d2QixHQUFNLENBQU4sS0FBTTtBQUVMLEdBQU8sQ0FBUCxNQUFPO0FBQ04sR0FBUyxDQUFULE9BQVM7QUFDYixHQUFVLENBQVYsUUFBVTtBQUNOLEdBQVEsQ0FBUixPQUFRO0FBRUcsR0FBZSxDQUFmLFVBQWU7Ozs7OztBQUU3QyxLQUFLLENBQUNDLENBQUMsT0FBR0MsTUFBSyxVQUFDLENBQWlDO0FBRWpELEtBQUssQ0FBQ0Msb0JBQW9CLEdBQUcsQ0FBQztJQUFBLENBQTJCO0lBQUUsQ0FBbUI7SUFBRSxDQUFrQjtJQUFFLENBQVU7QUFBQSxDQUFDO1NBT3RHQyxlQUFlLENBQUNDLEdBQVcsRUFBVyxDQUFDO0lBQzlDLE1BQU0sQ0FBQ0Ysb0JBQW9CLENBQUNHLFFBQVEsQ0FBQ0QsR0FBRztBQUMxQyxDQUFDO2VBRWNFLDJCQUEyQixDQUFDQyxHQUFXLEVBQUVDLFdBQW1CLEVBQStCLENBQUM7SUFDekdSLENBQUMsQ0FBQyxDQUEwRDtJQUM1RCxLQUFLLENBQUNTLFFBQVEsR0FBRyxLQUFLLEtBQUNDLE9BQU0sVUFBQyxDQUFD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