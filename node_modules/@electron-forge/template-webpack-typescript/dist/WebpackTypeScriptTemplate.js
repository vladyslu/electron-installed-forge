"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _templateBase = require("@electron-forge/template-base");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class WebpackTypeScriptTemplate extends _templateBase.BaseTemplate {
    async initializeTemplate(directory, options) {
        const superTasks = await super.initializeTemplate(directory, options);
        return [
            ...superTasks,
            {
                title: 'Setting up Forge configuration',
                task: async ()=>{
                    await this.copyTemplateFile(directory, 'forge.config.ts');
                    await _fsExtra.default.remove(_path.default.resolve(directory, 'forge.config.js'));
                }
            },
            {
                title: 'Preparing TypeScript files and configuration',
                task: async ()=>{
                    const filePath = (fileName)=>_path.default.join(directory, 'src', fileName)
                    ;
                    // Copy Webpack files
                    await this.copyTemplateFile(directory, 'webpack.main.config.ts');
                    await this.copyTemplateFile(directory, 'webpack.renderer.config.ts');
                    await this.copyTemplateFile(directory, 'webpack.rules.ts');
                    await this.copyTemplateFile(directory, 'webpack.plugins.ts');
                    await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.html'), (line)=>{
                        if (line.includes('link rel="stylesheet"')) return '';
                        return line;
                    });
                    // Copy tsconfig with a small set of presets
                    await this.copyTemplateFile(directory, 'tsconfig.json');
                    // Copy eslint config with recommended settings
                    await this.copyTemplateFile(directory, '.eslintrc.json');
                    // Remove index.js and replace with index.ts
                    await _fsExtra.default.remove(filePath('index.js'));
                    await this.copyTemplateFile(_path.default.join(directory, 'src'), 'index.ts');
                    await this.copyTemplateFile(_path.default.join(directory, 'src'), 'renderer.ts');
                    // Remove preload.js and replace with preload.ts
                    await _fsExtra.default.remove(filePath('preload.js'));
                    await this.copyTemplateFile(_path.default.join(directory, 'src'), 'preload.ts');
                    // update package.json
                    const packageJSONPath = _path.default.resolve(directory, 'package.json');
                    const packageJSON = await _fsExtra.default.readJson(packageJSONPath);
                    packageJSON.main = '.webpack/main';
                    // Configure scripts for TS template
                    packageJSON.scripts.lint = 'eslint --ext .ts,.tsx .';
                    await _fsExtra.default.writeJson(packageJSONPath, packageJSON, {
                        spaces: 2
                    });
                }
            }, 
        ];
    }
    constructor(...args){
        super(...args);
        this.templateDir = _path.default.resolve(__dirname, '..', 'tmpl');
    }
}
var _default = new WebpackTypeScriptTemplate();
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJwYWNrVHlwZVNjcmlwdFRlbXBsYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBGb3JnZUxpc3RyVGFza0RlZmluaXRpb24sIEluaXRUZW1wbGF0ZU9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IEJhc2VUZW1wbGF0ZSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS1iYXNlJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5cbmNsYXNzIFdlYnBhY2tUeXBlU2NyaXB0VGVtcGxhdGUgZXh0ZW5kcyBCYXNlVGVtcGxhdGUge1xuICBwdWJsaWMgdGVtcGxhdGVEaXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAndG1wbCcpO1xuXG4gIGFzeW5jIGluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3Rvcnk6IHN0cmluZywgb3B0aW9uczogSW5pdFRlbXBsYXRlT3B0aW9ucyk6IFByb21pc2U8Rm9yZ2VMaXN0clRhc2tEZWZpbml0aW9uW10+IHtcbiAgICBjb25zdCBzdXBlclRhc2tzID0gYXdhaXQgc3VwZXIuaW5pdGlhbGl6ZVRlbXBsYXRlKGRpcmVjdG9yeSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLnN1cGVyVGFza3MsXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnU2V0dGluZyB1cCBGb3JnZSBjb25maWd1cmF0aW9uJyxcbiAgICAgICAgdGFzazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICdmb3JnZS5jb25maWcudHMnKTtcbiAgICAgICAgICBhd2FpdCBmcy5yZW1vdmUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ2ZvcmdlLmNvbmZpZy5qcycpKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnUHJlcGFyaW5nIFR5cGVTY3JpcHQgZmlsZXMgYW5kIGNvbmZpZ3VyYXRpb24nLFxuICAgICAgICB0YXNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsZVBhdGggPSAoZmlsZU5hbWU6IHN0cmluZykgPT4gcGF0aC5qb2luKGRpcmVjdG9yeSwgJ3NyYycsIGZpbGVOYW1lKTtcblxuICAgICAgICAgIC8vIENvcHkgV2VicGFjayBmaWxlc1xuICAgICAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICd3ZWJwYWNrLm1haW4uY29uZmlnLnRzJyk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucmVuZGVyZXIuY29uZmlnLnRzJyk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucnVsZXMudHMnKTtcbiAgICAgICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5wbHVnaW5zLnRzJyk7XG5cbiAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUZpbGVCeUxpbmUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdpbmRleC5odG1sJyksIChsaW5lKSA9PiB7XG4gICAgICAgICAgICBpZiAobGluZS5pbmNsdWRlcygnbGluayByZWw9XCJzdHlsZXNoZWV0XCInKSkgcmV0dXJuICcnO1xuICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBDb3B5IHRzY29uZmlnIHdpdGggYSBzbWFsbCBzZXQgb2YgcHJlc2V0c1xuICAgICAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICd0c2NvbmZpZy5qc29uJyk7XG5cbiAgICAgICAgICAvLyBDb3B5IGVzbGludCBjb25maWcgd2l0aCByZWNvbW1lbmRlZCBzZXR0aW5nc1xuICAgICAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICcuZXNsaW50cmMuanNvbicpO1xuXG4gICAgICAgICAgLy8gUmVtb3ZlIGluZGV4LmpzIGFuZCByZXBsYWNlIHdpdGggaW5kZXgudHNcbiAgICAgICAgICBhd2FpdCBmcy5yZW1vdmUoZmlsZVBhdGgoJ2luZGV4LmpzJykpO1xuICAgICAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShwYXRoLmpvaW4oZGlyZWN0b3J5LCAnc3JjJyksICdpbmRleC50cycpO1xuXG4gICAgICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ3JlbmRlcmVyLnRzJyk7XG5cbiAgICAgICAgICAvLyBSZW1vdmUgcHJlbG9hZC5qcyBhbmQgcmVwbGFjZSB3aXRoIHByZWxvYWQudHNcbiAgICAgICAgICBhd2FpdCBmcy5yZW1vdmUoZmlsZVBhdGgoJ3ByZWxvYWQuanMnKSk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ3ByZWxvYWQudHMnKTtcblxuICAgICAgICAgIC8vIHVwZGF0ZSBwYWNrYWdlLmpzb25cbiAgICAgICAgICBjb25zdCBwYWNrYWdlSlNPTlBhdGggPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAncGFja2FnZS5qc29uJyk7XG4gICAgICAgICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCBmcy5yZWFkSnNvbihwYWNrYWdlSlNPTlBhdGgpO1xuICAgICAgICAgIHBhY2thZ2VKU09OLm1haW4gPSAnLndlYnBhY2svbWFpbic7XG4gICAgICAgICAgLy8gQ29uZmlndXJlIHNjcmlwdHMgZm9yIFRTIHRlbXBsYXRlXG4gICAgICAgICAgcGFja2FnZUpTT04uc2NyaXB0cy5saW50ID0gJ2VzbGludCAtLWV4dCAudHMsLnRzeCAuJztcbiAgICAgICAgICBhd2FpdCBmcy53cml0ZUpzb24ocGFja2FnZUpTT05QYXRoLCBwYWNrYWdlSlNPTiwge1xuICAgICAgICAgICAgc3BhY2VzOiAyLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBXZWJwYWNrVHlwZVNjcmlwdFRlbXBsYXRlKCk7XG4iXSwibmFtZXMiOlsiV2VicGFja1R5cGVTY3JpcHRUZW1wbGF0ZSIsIkJhc2VUZW1wbGF0ZSIsImluaXRpYWxpemVUZW1wbGF0ZSIsImRpcmVjdG9yeSIsIm9wdGlvbnMiLCJzdXBlclRhc2tzIiwidGl0bGUiLCJ0YXNrIiwiY29weVRlbXBsYXRlRmlsZSIsImZzIiwicmVtb3ZlIiwicGF0aCIsInJlc29sdmUiLCJmaWxlUGF0aCIsImZpbGVOYW1lIiwiam9pbiIsInVwZGF0ZUZpbGVCeUxpbmUiLCJsaW5lIiwiaW5jbHVkZXMiLCJwYWNrYWdlSlNPTlBhdGgiLCJwYWNrYWdlSlNPTiIsInJlYWRKc29uIiwibWFpbiIsInNjcmlwdHMiLCJsaW50Iiwid3JpdGVKc29uIiwic3BhY2VzIiwidGVtcGxhdGVEaXIiLCJfX2Rpcm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQWlCLEdBQU0sQ0FBTixLQUFNO0FBR00sR0FBK0IsQ0FBL0IsYUFBK0I7QUFDN0MsR0FBVSxDQUFWLFFBQVU7Ozs7OztNQUVuQkEseUJBQXlCLFNBQVNDLGFBQVk7VUFHNUNDLGtCQUFrQixDQUFDQyxTQUFpQixFQUFFQyxPQUE0QixFQUF1QyxDQUFDO1FBQzlHLEtBQUssQ0FBQ0MsVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUNILGtCQUFrQixDQUFDQyxTQUFTLEVBQUVDLE9BQU87UUFDcEUsTUFBTSxDQUFDLENBQUM7ZUFDSEMsVUFBVTtZQUNiLENBQUM7Z0JBQ0NDLEtBQUssRUFBRSxDQUFnQztnQkFDdkNDLElBQUksWUFBYyxDQUFDO29CQUNqQixLQUFLLENBQUMsSUFBSSxD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