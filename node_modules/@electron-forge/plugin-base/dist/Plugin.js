"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StartOptions", {
    enumerable: true,
    get: function() {
        return _sharedTypes.StartOptions;
    }
});
exports.namedHookWithTaskFn = exports.PluginBase = exports.default = void 0;
var _sharedTypes = require("@electron-forge/shared-types");
class Plugin {
    constructor(config){
        this.config = config;
        /** @internal */ this._resolvedHooks = {};
        Object.defineProperty(this, '__isElectronForgePlugin', {
            value: true,
            enumerable: false,
            configurable: false
        });
    }
    init(_dir, _config) {
        // This logic ensures that we only call getHooks once regardless of how many
        // times we trip hook logic in the PluginInterface.
        this._resolvedHooks = this.getHooks();
        this.getHooks = ()=>this._resolvedHooks
        ;
    }
    getHooks() {
        return {};
    }
    async startLogic(_startOpts) {
        return false;
    }
}
exports.default = Plugin;
exports.PluginBase = Plugin;
const namedHookWithTaskFn = (hookFn, name)=>{
    function namedHookWithTaskInner(...args) {
        return hookFn(this, ...args);
    }
    const fn = namedHookWithTaskInner;
    fn.__hookName = name;
    return fn;
};
exports.namedHookWithTaskFn = namedHookWithTaskFn;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9QbHVnaW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRm9yZ2VIb29rRm4sXG4gIEZvcmdlSG9va05hbWUsXG4gIEZvcmdlTGlzdHJUYXNrLFxuICBGb3JnZU11bHRpSG9va01hcCxcbiAgSUZvcmdlUGx1Z2luLFxuICBSZXNvbHZlZEZvcmdlQ29uZmlnLFxuICBTdGFydE9wdGlvbnMsXG4gIFN0YXJ0UmVzdWx0LFxufSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuZXhwb3J0IHsgU3RhcnRPcHRpb25zIH07XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFBsdWdpbjxDPiBpbXBsZW1lbnRzIElGb3JnZVBsdWdpbiB7XG4gIHB1YmxpYyBhYnN0cmFjdCBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfX2lzRWxlY3Ryb25Gb3JnZVBsdWdpbiE6IHRydWU7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3Jlc29sdmVkSG9va3M6IEZvcmdlTXVsdGlIb29rTWFwID0ge307XG5cbiAgY29uc3RydWN0b3IocHVibGljIGNvbmZpZzogQykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19pc0VsZWN0cm9uRm9yZ2VQbHVnaW4nLCB7XG4gICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIGluaXQoX2Rpcjogc3RyaW5nLCBfY29uZmlnOiBSZXNvbHZlZEZvcmdlQ29uZmlnKTogdm9pZCB7XG4gICAgLy8gVGhpcyBsb2dpYyBlbnN1cmVzIHRoYXQgd2Ugb25seSBjYWxsIGdldEhvb2tzIG9uY2UgcmVnYXJkbGVzcyBvZiBob3cgbWFueVxuICAgIC8vIHRpbWVzIHdlIHRyaXAgaG9vayBsb2dpYyBpbiB0aGUgUGx1Z2luSW50ZXJmYWNlLlxuICAgIHRoaXMuX3Jlc29sdmVkSG9va3MgPSB0aGlzLmdldEhvb2tzKCk7XG4gICAgdGhpcy5nZXRIb29rcyA9ICgpID0+IHRoaXMuX3Jlc29sdmVkSG9va3M7XG4gIH1cblxuICBnZXRIb29rcygpOiBGb3JnZU11bHRpSG9va01hcCB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgYXN5bmMgc3RhcnRMb2dpYyhfc3RhcnRPcHRzOiBTdGFydE9wdGlvbnMpOiBQcm9taXNlPFN0YXJ0UmVzdWx0PiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8vIFRoaXMgaXMgYSBmaWx0aHkgaGFjayBhcm91bmQgdHlwZXNjcmlwdCB0byBhbGxvdyBpbnRlcm5hbCBob29rcyBpbiBvdXJcbi8vIGludGVybmFsIHBsdWdpbnMgdG8gaGF2ZSBzb21lIGxldmVsIG9mIGFjY2VzcyB0byB0aGUgXCJUYXNrXCIgdGhhdCBsaXN0ciBydW5zLlxuLy8gU3BlY2lmaWNhbGx5IHRoZSBhYmlsaXR5IHRvIHNldCBhIGN1c3RvbSB0YXNrIG5hbWUgYW5kIHJlY2VpdmUgdGhlIHRhc2tcbi8vIGluc3RhbmNlIGFzIGEgcGFyYW1ldGVyXG4vL1xuLy8gVGhpcyBtZXRob2QgaXMgbm90IHR5cGUgc2FmZSBpbnRlcm5hbGx5LCBidXQgaXMgdHlwZSBzYWZlIGZvciBjb25zdW1lcnNcbi8vIEBpbnRlcm5hbFxuZXhwb3J0IGNvbnN0IG5hbWVkSG9va1dpdGhUYXNrRm4gPSA8SG9vayBleHRlbmRzIEZvcmdlSG9va05hbWU+KFxuICBob29rRm46ICh0YXNrOiBGb3JnZUxpc3RyVGFzazxuZXZlcj4gfCBudWxsLCAuLi5hcmdzOiBQYXJhbWV0ZXJzPEZvcmdlSG9va0ZuPEhvb2s+PikgPT4gUmV0dXJuVHlwZTxGb3JnZUhvb2tGbjxIb29rPj4sXG4gIG5hbWU6IHN0cmluZ1xuKTogRm9yZ2VIb29rRm48SG9vaz4gPT4ge1xuICBmdW5jdGlvbiBuYW1lZEhvb2tXaXRoVGFza0lubmVyKHRoaXM6IEZvcmdlTGlzdHJUYXNrPGFueT4gfCBudWxsLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIHJldHVybiAoaG9va0ZuIGFzIGFueSkodGhpcywgLi4uYXJncyk7XG4gIH1cbiAgY29uc3QgZm4gPSBuYW1lZEhvb2tXaXRoVGFza0lubmVyIGFzIGFueTtcbiAgZm4uX19ob29rTmFtZSA9IG5hbWU7XG4gIHJldHVybiBmbjtcbn07XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuZXhwb3J0IHsgUGx1Z2luIGFzIFBsdWdpbkJhc2UgfTtcbiJdLCJuYW1lcyI6WyJTdGFydE9wdGlvbnMiLCJQbHVnaW4iLCJjb25maWciLCJfcmVzb2x2ZWRIb29rcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiaW5pdCIsIl9kaXIiLCJfY29uZmlnIiwiZ2V0SG9va3MiLCJzdGFydExvZ2ljIiwiX3N0YXJ0T3B0cyIsIlBsdWdpbkJhc2UiLCJuYW1lZEhvb2tXaXRoVGFza0ZuIiwiaG9va0ZuIiwibmFtZSIsIm5hbWVkSG9va1dpdGhUYXNrSW5uZXIiLCJhcmdzIiwiZm4iLCJfX2hvb2tOYW1lIl0sIm1hcHBpbmdzIjoiOzs7OytCQVdTQSxDQUFZOzs7ZUFBWkEsWUFBWTs7OztBQUZkLEdBQThCLENBQTlCLFlBQThCO01BSVBDLE1BQU07Z0JBUWZDLE1BQVMsQ0FBRSxDQUFDO2FBQVpBLE1BQVMsR0FBVEEsTUFBUztRQUg1QixFQUFnQixBQUFoQixZQUFnQixBQUFoQixFQUFnQixDQUxILElBOEJkLENBeEJDQyxjQUFjLEdBQXNCLENBQUMsQ0FBQztRQUdwQ0MsTUFBTSxDQUFDQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQXlCLDBCQUFFLENBQUM7WUFDdERDLEtBQUssRUFBRSxJQUFJO1lBQ1hDLFVBQVUsRUFBRSxLQUFLO1lBQ2pCQyxZQUFZLEVBQUUsS0FBSztRQUNyQixDQUFDO0lBQ0gsQ0FBQztJQUVEQyxJQUFJLENBQUNDLElBQVksRUFBRUMsT0FBNEIsRUFBUSxDQUFDO1FBQ3RELEVBQTRFLEFBQTVFLDBFQUE0RTtRQUM1RSxFQUFtRCxBQUFuRCxpREFBbUQ7UUFDbkQsSUFBSSxDQUFDUixjQUFjLEdBQUcsSUFBSSxDQUFDUyxRQUFRO1FBQ25DLElBQUksQ0FBQ0EsUUFBUSxPQUFTLElBQUksQ0FBQ1QsY0FBYzs7SUFDM0MsQ0FBQztJQUVEUyxRQUFRLEdBQXNCLENBQUM7UUFDN0IsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7VUFFS0MsVUFBVSxDQUFDQyxVQUF3QixFQUF3QixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxLQUFLO0lBQ2QsQ0FBQzs7a0JBN0IyQmIsTUFBTTtRQXFEakJjLFVBQVUsR0FBcEJkLE1BQU07QUFiUixLQUFLLENBQUNlLG1CQUFtQixJQUM5QkMsTUFBcUgsRUFDckhDLElBQVksR0FDVSxDQUFDO2FBQ2RDLHNCQUFzQixJQUFzQ0MsSUFBSSxFQUFTLENBQUM7UUFDakYsTUFBTSxDQUFFSCxNQUFNLENBQVMsSUFBSSxLQUFLRyxJQUFJO0lBQ3RDLENBQUM7SUFDRCxLQUFLLENBQUNDLEVBQUUsR0FBR0Ysc0JBQXNCO0lBQ2pDRSxFQUFFLENBQUNDLFVBQVUsR0FBR0osSUFBSTtJQUNwQixNQUFNLENBQUNHLEVBQUU7QUFDWCxDQUFDO1FBVllMLG1CQUFtQixHQUFuQkEsbUJBQW1CIn0=