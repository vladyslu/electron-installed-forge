"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MakerSquirrel = exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _makerBase = require("@electron-forge/maker-base");
var _electronWinstaller = require("electron-winstaller");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MakerSquirrel extends _makerBase.MakerBase {
    isSupportedOnCurrentPlatform() {
        return this.isInstalled('electron-winstaller') && !process.env.DISABLE_SQUIRREL_TEST;
    }
    async make({ dir , makeDir , targetArch , packageJSON , appName , forgeConfig  }) {
        const outPath = _path.default.resolve(makeDir, `squirrel.windows/${targetArch}`);
        await this.ensureDirectory(outPath);
        const winstallerConfig = {
            name: typeof packageJSON.name === 'string' ? packageJSON.name.replace(/-/g, '_') : undefined,
            title: appName,
            noMsi: true,
            exe: `${forgeConfig.packagerConfig.executableName || appName}.exe`,
            setupExe: `${appName}-${packageJSON.version} Setup.exe`,
            ...this.config,
            appDirectory: dir,
            outputDirectory: outPath
        };
        await (0, _electronWinstaller).createWindowsInstaller(winstallerConfig);
        const nupkgVersion = (0, _electronWinstaller).convertVersion(packageJSON.version);
        const artifacts = [
            _path.default.resolve(outPath, 'RELEASES'),
            _path.default.resolve(outPath, winstallerConfig.setupExe || `${appName}Setup.exe`),
            _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-full.nupkg`), 
        ];
        const deltaPath = _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-delta.nupkg`);
        if (winstallerConfig.remoteReleases || await _fsExtra.default.pathExists(deltaPath)) {
            artifacts.push(deltaPath);
        }
        const msiPath = _path.default.resolve(outPath, winstallerConfig.setupMsi || `${appName}Setup.msi`);
        if (!winstallerConfig.noMsi && await _fsExtra.default.pathExists(msiPath)) {
            artifacts.push(msiPath);
        }
        return artifacts;
    }
    constructor(...args){
        super(...args);
        this.name = 'squirrel';
        this.defaultPlatforms = [
            'win32'
        ];
    }
}
exports.default = MakerSquirrel;
exports.MakerSquirrel = MakerSquirrel;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclNxdWlycmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBNYWtlckJhc2UsIE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IGNvbnZlcnRWZXJzaW9uLCBjcmVhdGVXaW5kb3dzSW5zdGFsbGVyLCBPcHRpb25zIGFzIEVsZWN0cm9uV2luc3RhbGxlck9wdGlvbnMgfSBmcm9tICdlbGVjdHJvbi13aW5zdGFsbGVyJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5cbmV4cG9ydCB0eXBlIE1ha2VyU3F1aXJyZWxDb25maWcgPSBPbWl0PEVsZWN0cm9uV2luc3RhbGxlck9wdGlvbnMsICdhcHBEaXJlY3RvcnknIHwgJ291dHB1dERpcmVjdG9yeSc+O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWtlclNxdWlycmVsIGV4dGVuZHMgTWFrZXJCYXNlPE1ha2VyU3F1aXJyZWxDb25maWc+IHtcbiAgbmFtZSA9ICdzcXVpcnJlbCc7XG5cbiAgZGVmYXVsdFBsYXRmb3JtczogRm9yZ2VQbGF0Zm9ybVtdID0gWyd3aW4zMiddO1xuXG4gIGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbnN0YWxsZWQoJ2VsZWN0cm9uLXdpbnN0YWxsZXInKSAmJiAhcHJvY2Vzcy5lbnYuRElTQUJMRV9TUVVJUlJFTF9URVNUO1xuICB9XG5cbiAgYXN5bmMgbWFrZSh7IGRpciwgbWFrZURpciwgdGFyZ2V0QXJjaCwgcGFja2FnZUpTT04sIGFwcE5hbWUsIGZvcmdlQ29uZmlnIH06IE1ha2VyT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBvdXRQYXRoID0gcGF0aC5yZXNvbHZlKG1ha2VEaXIsIGBzcXVpcnJlbC53aW5kb3dzLyR7dGFyZ2V0QXJjaH1gKTtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeShvdXRQYXRoKTtcblxuICAgIGNvbnN0IHdpbnN0YWxsZXJDb25maWc6IEVsZWN0cm9uV2luc3RhbGxlck9wdGlvbnMgPSB7XG4gICAgICBuYW1lOiB0eXBlb2YgcGFja2FnZUpTT04ubmFtZSA9PT0gJ3N0cmluZycgPyBwYWNrYWdlSlNPTi5uYW1lLnJlcGxhY2UoLy0vZywgJ18nKSA6IHVuZGVmaW5lZCwgLy8gc3F1aXJyZWwgaGF0ZXMgaHlwaGVuc1xuICAgICAgdGl0bGU6IGFwcE5hbWUsXG4gICAgICBub01zaTogdHJ1ZSxcbiAgICAgIGV4ZTogYCR7Zm9yZ2VDb25maWcucGFja2FnZXJDb25maWcuZXhlY3V0YWJsZU5hbWUgfHwgYXBwTmFtZX0uZXhlYCxcbiAgICAgIHNldHVwRXhlOiBgJHthcHBOYW1lfS0ke3BhY2thZ2VKU09OLnZlcnNpb259IFNldHVwLmV4ZWAsXG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFwcERpcmVjdG9yeTogZGlyLFxuICAgICAgb3V0cHV0RGlyZWN0b3J5OiBvdXRQYXRoLFxuICAgIH07XG5cbiAgICBhd2FpdCBjcmVhdGVXaW5kb3dzSW5zdGFsbGVyKHdpbnN0YWxsZXJDb25maWcpO1xuXG4gICAgY29uc3QgbnVwa2dWZXJzaW9uID0gY29udmVydFZlcnNpb24ocGFja2FnZUpTT04udmVyc2lvbik7XG5cbiAgICBjb25zdCBhcnRpZmFjdHMgPSBbXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgJ1JFTEVBU0VTJyksXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgd2luc3RhbGxlckNvbmZpZy5zZXR1cEV4ZSB8fCBgJHthcHBOYW1lfVNldHVwLmV4ZWApLFxuICAgICAgcGF0aC5yZXNvbHZlKG91dFBhdGgsIGAke3dpbnN0YWxsZXJDb25maWcubmFtZX0tJHtudXBrZ1ZlcnNpb259LWZ1bGwubnVwa2dgKSxcbiAgICBdO1xuICAgIGNvbnN0IGRlbHRhUGF0aCA9IHBhdGgucmVzb2x2ZShvdXRQYXRoLCBgJHt3aW5zdGFsbGVyQ29uZmlnLm5hbWV9LSR7bnVwa2dWZXJzaW9ufS1kZWx0YS5udXBrZ2ApO1xuICAgIGlmICh3aW5zdGFsbGVyQ29uZmlnLnJlbW90ZVJlbGVhc2VzIHx8IChhd2FpdCBmcy5wYXRoRXhpc3RzKGRlbHRhUGF0aCkpKSB7XG4gICAgICBhcnRpZmFjdHMucHVzaChkZWx0YVBhdGgpO1xuICAgIH1cbiAgICBjb25zdCBtc2lQYXRoID0gcGF0aC5yZXNvbHZlKG91dFBhdGgsIHdpbnN0YWxsZXJDb25maWcuc2V0dXBNc2kgfHwgYCR7YXBwTmFtZX1TZXR1cC5tc2lgKTtcbiAgICBpZiAoIXdpbnN0YWxsZXJDb25maWcubm9Nc2kgJiYgKGF3YWl0IGZzLnBhdGhFeGlzdHMobXNpUGF0aCkpKSB7XG4gICAgICBhcnRpZmFjdHMucHVzaChtc2lQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFydGlmYWN0cztcbiAgfVxufVxuXG5leHBvcnQgeyBNYWtlclNxdWlycmVsIH07XG4iXSwibmFtZXMiOlsiTWFrZXJTcXVpcnJlbCIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJpc0luc3RhbGxlZCIsInByb2Nlc3MiLCJlbnYiLCJESVNBQkxFX1NRVUlSUkVMX1RFU1QiLCJtYWtlIiwiZGlyIiwibWFrZURpciIsInRhcmdldEFyY2giLCJwYWNrYWdlSlNPTiIsImFwcE5hbWUiLCJmb3JnZUNvbmZpZyIsIm91dFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImVuc3VyZURpcmVjdG9yeSIsIndpbnN0YWxsZXJDb25maWciLCJuYW1lIiwicmVwbGFjZSIsInVuZGVmaW5lZCIsInRpdGxlIiwibm9Nc2kiLCJleGUiLCJwYWNrYWdlckNvbmZpZyIsImV4ZWN1dGFibGVOYW1lIiwic2V0dXBFeGUiLCJ2ZXJzaW9uIiwiY29uZmlnIiwiYXBwRGlyZWN0b3J5Iiwib3V0cHV0RGlyZWN0b3J5IiwiY3JlYXRlV2luZG93c0luc3RhbGxlciIsIm51cGtnVmVyc2lvbiIsImNvbnZlcnRWZXJzaW9uIiwiYXJ0aWZhY3RzIiwiZGVsdGFQYXRoIiwicmVtb3RlUmVsZWFzZXMiLCJmcyIsInBhdGhFeGlzdHMiLCJwdXNoIiwibXNpUGF0aCIsInNldHVwTXNpIiwiZGVmYXVsdFBsYXRmb3JtcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUIsR0FBTSxDQUFOLEtBQU07QUFFaUIsR0FBNEIsQ0FBNUIsVUFBNEI7QUFFeUIsR0FBcUIsQ0FBckIsbUJBQXFCO0FBQ25HLEdBQVUsQ0FBVixRQUFVOzs7Ozs7TUFJSkEsYUFBYSxTQUFTQyxVQUFTO0lBS2xEQyw0QkFBNEIsR0FBWSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUFxQiwwQkFBTUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLHFCQUFxQjtJQUN0RixDQUFDO1VBRUtDLElBQUksQ0FBQyxDQUFDLENBQUNDLEdBQUcsR0FBRUMsT0FBTyxHQUFFQyxVQUFVLEdBQUVDLFdBQVcsR0FBRUMsT0FBTyxHQUFFQyxXQUFXLEVBQWUsQ0FBQyxFQUFxQixDQUFDO1FBQzVHLEtBQUssQ0FBQ0MsT0FBTyxHQUFHQyxLQUFJLFNBQUNDLE9BQU8sQ0FBQ1AsT0FBTyxHQUFHLGlCQUFpQixFQUFFQyxVQUFVO1FBQ3BFLEtBQUssQ0FBQyxJQUFJLENBQUNPLGVBQWUsQ0FBQ0gsT0FBTztRQUVsQyxLQUFLLENBQUNJLGdCQUFnQixHQUE4QixDQUFDO1lBQ25EQyxJQUFJLEVBQUUsTUFBTSxDQUFDUixXQUFXLENBQUNRLElBQUksS0FBSyxDQUFRLFVBQUdSLFdBQVcsQ0FBQ1EsSUFBSSxDQUFDQyxPQUFPLE9BQU8sQ0FBRyxNQUFJQyxTQUFTO1lBQzVGQyxLQUFLLEVBQUVWLE9BQU87WUFDZFcsS0FBSyxFQUFFLElBQUk7WUFDWEMsR0FBRyxLQUFLWCxXQUFXLENBQUNZLGNBQWMsQ0FBQ0MsY0FBYyxJQUFJZCxPQUFPLENBQUMsSUFBSTtZQUNqRWUsUUFBUSxLQUFLZixPQUFPLENBQUMsQ0FBQyxFQUFFRCxXQUFXLENBQUNpQixPQUFPLENBQUMsVUFBVTtlQUNuRCxJQUFJLENBQUNDLE1BQU07WUFDZEMsWUFBWSxFQUFFdEIsR0FBRztZQUNqQnVCLGVBQWUsRUFBRWpCLE9BQU87UUFDMUIsQ0FBQztRQUVELEtBQUssS0FBQ2tCLG1CQUFzQix5QkFBQ2QsZ0JBQWdCO1FBRTdDLEtBQUssQ0FBQ2UsWUFBWSxPQUFHQyxtQkFBYyxpQkFBQ3ZCLFdBQVcsQ0FBQ2lCLE9BQU87UUFFdkQsS0FBSyxDQUFDTyxTQUFTLEdBQUcsQ0FBQztZQUNqQnBCLEtBQUksU0FBQ0MsT0FBTyxDQUFDRixPQUFPLEVBQUUsQ0FBVTtZQUNoQ0MsS0FBSSxTQUFDQyxPQUFPLENBQUNGLE9BQU8sRUFBRUksZ0JBQWdCLENBQUNTLFFBQVEsT0FBT2YsT0FBTyxDQUFDLFNBQVM7WUFDdkVHLEtBQUksU0FBQ0MsT0FBTyxDQUFDRixPQUFPLEtBQUtJLGdCQUFnQixDQUFDQyxJQUFJLENBQUMsQ0FBQyxFQUFFYyxZQUFZLENBQUMsV0FBVztRQUM1RSxDQUFDO1FBQ0QsS0FBSyxDQUFDRyxTQUFTLEdBQUdyQixLQUFJLFNBQUNDLE9BQU8sQ0FBQ0YsT0FBTyxLQUFLSSxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRWMsWUFBWSxDQUFDLFlBQVk7UUFDN0YsRUFBRSxFQUFFZixnQkFBZ0IsQ0FBQ21CLGNBQWMsSUFBSyxLQUFLLENBQUNDLFFBQUUsU0FBQ0MsVUFBVSxDQUFDSCxTQUFTLEdBQUksQ0FBQztZQUN4RUQsU0FBUyxDQUFDSyxJQUFJLENBQUNKLFNBQVM7UUFDMUIsQ0FBQztRQUNELEtBQUssQ0FBQ0ssT0FBTyxHQUFHMUIsS0FBSSxTQUFDQyxPQUFPLENBQUNGLE9BQU8sRUFBRUksZ0JBQWdCLENBQUN3QixRQUFRLE9BQU85QixPQUFPLENBQUMsU0FBUztRQUN2RixFQUFFLEdBQUdNLGdCQUFnQixDQUFDSyxLQUFLLElBQUssS0FBSyxDQUFDZSxRQUFFLFNBQUNDLFVBQVUsQ0FBQ0UsT0FBTyxHQUFJLENBQUM7WUFDOUROLFNBQVMsQ0FBQ0ssSUFBSSxDQUFDQyxPQUFPO1FBQ3hCLENBQUM7UUFDRCxNQUFNLENBQUNOLFNBQVM7SUFDbEIsQ0FBQzs7O1FBMUNZLElBMkNkLENBMUNDaEIsSUFBSSxHQUFHLENBQVU7UUFESixJQTJDZCxDQXhDQ3dCLGdCQUFnQixHQUFvQixDQUFDO1lBQUEsQ0FBTztRQUFBLENBQUM7OztrQkFIMUIzQyxhQUFhO1FBNkN6QkEsYUFBYSxHQUFiQSxhQUFhIn0=