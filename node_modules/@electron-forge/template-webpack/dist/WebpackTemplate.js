"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _templateBase = require("@electron-forge/template-base");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class WebpackTemplate extends _templateBase.BaseTemplate {
    async initializeTemplate(directory, options) {
        const superTasks = await super.initializeTemplate(directory, options);
        return [
            ...superTasks,
            {
                title: 'Setting up Forge configuration',
                task: async ()=>{
                    await this.copyTemplateFile(directory, 'forge.config.js');
                }
            },
            {
                title: 'Setting up webpack configuration',
                task: async ()=>{
                    await this.copyTemplateFile(directory, 'webpack.main.config.js');
                    await this.copyTemplateFile(directory, 'webpack.renderer.config.js');
                    await this.copyTemplateFile(directory, 'webpack.rules.js');
                    await this.copyTemplateFile(_path.default.join(directory, 'src'), 'renderer.js');
                    await this.copyTemplateFile(_path.default.join(directory, 'src'), 'preload.js');
                    await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.js'), (line)=>{
                        if (line.includes('mainWindow.loadFile')) return '  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);';
                        if (line.includes('preload: ')) return '      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,';
                        return line;
                    }, _path.default.resolve(directory, 'src', 'main.js'));
                    await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.html'), (line)=>{
                        if (line.includes('link rel="stylesheet"')) return '';
                        return line;
                    });
                    // update package.json entry point
                    const pjPath = _path.default.resolve(directory, 'package.json');
                    const currentPJ = await _fsExtra.default.readJson(pjPath);
                    currentPJ.main = '.webpack/main';
                    await _fsExtra.default.writeJson(pjPath, currentPJ, {
                        spaces: 2
                    });
                }
            }, 
        ];
    }
    constructor(...args){
        super(...args);
        this.templateDir = _path.default.resolve(__dirname, '..', 'tmpl');
    }
}
var _default = new WebpackTemplate();
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJwYWNrVGVtcGxhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IEZvcmdlTGlzdHJUYXNrRGVmaW5pdGlvbiwgSW5pdFRlbXBsYXRlT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgQmFzZVRlbXBsYXRlIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3RlbXBsYXRlLWJhc2UnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcblxuY2xhc3MgV2VicGFja1RlbXBsYXRlIGV4dGVuZHMgQmFzZVRlbXBsYXRlIHtcbiAgcHVibGljIHRlbXBsYXRlRGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ3RtcGwnKTtcblxuICBwdWJsaWMgYXN5bmMgaW5pdGlhbGl6ZVRlbXBsYXRlKGRpcmVjdG9yeTogc3RyaW5nLCBvcHRpb25zOiBJbml0VGVtcGxhdGVPcHRpb25zKTogUHJvbWlzZTxGb3JnZUxpc3RyVGFza0RlZmluaXRpb25bXT4ge1xuICAgIGNvbnN0IHN1cGVyVGFza3MgPSBhd2FpdCBzdXBlci5pbml0aWFsaXplVGVtcGxhdGUoZGlyZWN0b3J5LCBvcHRpb25zKTtcbiAgICByZXR1cm4gW1xuICAgICAgLi4uc3VwZXJUYXNrcyxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdTZXR0aW5nIHVwIEZvcmdlIGNvbmZpZ3VyYXRpb24nLFxuICAgICAgICB0YXNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ2ZvcmdlLmNvbmZpZy5qcycpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdTZXR0aW5nIHVwIHdlYnBhY2sgY29uZmlndXJhdGlvbicsXG4gICAgICAgIHRhc2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5tYWluLmNvbmZpZy5qcycpO1xuICAgICAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICd3ZWJwYWNrLnJlbmRlcmVyLmNvbmZpZy5qcycpO1xuICAgICAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICd3ZWJwYWNrLnJ1bGVzLmpzJyk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ3JlbmRlcmVyLmpzJyk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ3ByZWxvYWQuanMnKTtcblxuICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlRmlsZUJ5TGluZShcbiAgICAgICAgICAgIHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMnLCAnaW5kZXguanMnKSxcbiAgICAgICAgICAgIChsaW5lKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKCdtYWluV2luZG93LmxvYWRGaWxlJykpIHJldHVybiAnICBtYWluV2luZG93LmxvYWRVUkwoTUFJTl9XSU5ET1dfV0VCUEFDS19FTlRSWSk7JztcbiAgICAgICAgICAgICAgaWYgKGxpbmUuaW5jbHVkZXMoJ3ByZWxvYWQ6ICcpKSByZXR1cm4gJyAgICAgIHByZWxvYWQ6IE1BSU5fV0lORE9XX1BSRUxPQURfV0VCUEFDS19FTlRSWSwnO1xuICAgICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAnc3JjJywgJ21haW4uanMnKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUZpbGVCeUxpbmUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdpbmRleC5odG1sJyksIChsaW5lKSA9PiB7XG4gICAgICAgICAgICBpZiAobGluZS5pbmNsdWRlcygnbGluayByZWw9XCJzdHlsZXNoZWV0XCInKSkgcmV0dXJuICcnO1xuICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgcGFja2FnZS5qc29uIGVudHJ5IHBvaW50XG4gICAgICAgICAgY29uc3QgcGpQYXRoID0gcGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3BhY2thZ2UuanNvbicpO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRQSiA9IGF3YWl0IGZzLnJlYWRKc29uKHBqUGF0aCk7XG4gICAgICAgICAgY3VycmVudFBKLm1haW4gPSAnLndlYnBhY2svbWFpbic7XG4gICAgICAgICAgYXdhaXQgZnMud3JpdGVKc29uKHBqUGF0aCwgY3VycmVudFBKLCB7XG4gICAgICAgICAgICBzcGFjZXM6IDIsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFdlYnBhY2tUZW1wbGF0ZSgpO1xuIl0sIm5hbWVzIjpbIldlYnBhY2tUZW1wbGF0ZSIsIkJhc2VUZW1wbGF0ZSIsImluaXRpYWxpemVUZW1wbGF0ZSIsImRpcmVjdG9yeSIsIm9wdGlvbnMiLCJzdXBlclRhc2tzIiwidGl0bGUiLCJ0YXNrIiwiY29weVRlbXBsYXRlRmlsZSIsInBhdGgiLCJqb2luIiwidXBkYXRlRmlsZUJ5TGluZSIsInJlc29sdmUiLCJsaW5lIiwiaW5jbHVkZXMiLCJwalBhdGgiLCJjdXJyZW50UEoiLCJmcyIsInJlYWRKc29uIiwibWFpbiIsIndyaXRlSnNvbiIsInNwYWNlcyIsInRlbXBsYXRlRGlyIiwiX19kaXJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFpQixHQUFNLENBQU4sS0FBTTtBQUdNLEdBQStCLENBQS9CLGFB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