"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findTemplate = void 0;
var _debug = _interopRequireDefault(require("debug"));
var _resolvePackage = _interopRequireDefault(require("resolve-package"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:init:find-template');
const findTemplate = async (dir, template)=>{
    let templateModulePath;
    const resolveTemplateTypes = [
        [
            'global',
            `electron-forge-template-${template}`
        ],
        [
            'global',
            `@electron-forge/template-${template}`
        ],
        [
            'local',
            `electron-forge-template-${template}`
        ],
        [
            'local',
            `@electron-forge/template-${template}`
        ],
        [
            'local',
            template
        ], 
    ];
    let foundTemplate = false;
    for (const [templateType, moduleName] of resolveTemplateTypes){
        try {
            d(`Trying ${templateType} template: ${moduleName}`);
            if (templateType === 'global') {
                templateModulePath = await (0, _resolvePackage).default(moduleName);
            } else {
                // local
                templateModulePath = require.resolve(moduleName);
            }
            foundTemplate = true;
            break;
        } catch (err) {
            d(`Error: ${err instanceof Error ? err.message : err}`);
        }
    }
    if (!foundTemplate) {
        throw new Error(`Failed to locate custom template: "${template}"\n\nTry \`npm install -g @electron-forge/template-${template}\``);
    }
    d(`found template module at: ${templateModulePath}`);
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const templateModule = require(templateModulePath);
    return templateModule.default || templateModule;
};
exports.findTemplate = findTemplate;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2ZpbmQtdGVtcGxhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9yZ2VUZW1wbGF0ZSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCByZXNvbHZlUGFja2FnZSBmcm9tICdyZXNvbHZlLXBhY2thZ2UnO1xuXG5pbXBvcnQgeyBQb3NzaWJsZU1vZHVsZSB9IGZyb20gJy4uLy4uL3V0aWwvcmVxdWlyZS1zZWFyY2gnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmluaXQ6ZmluZC10ZW1wbGF0ZScpO1xuXG5leHBvcnQgY29uc3QgZmluZFRlbXBsYXRlID0gYXN5bmMgKGRpcjogc3RyaW5nLCB0ZW1wbGF0ZTogc3RyaW5nKTogUHJvbWlzZTxGb3JnZVRlbXBsYXRlPiA9PiB7XG4gIGxldCB0ZW1wbGF0ZU1vZHVsZVBhdGghOiBzdHJpbmc7XG4gIGNvbnN0IHJlc29sdmVUZW1wbGF0ZVR5cGVzID0gW1xuICAgIFsnZ2xvYmFsJywgYGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgWydnbG9iYWwnLCBgQGVsZWN0cm9uLWZvcmdlL3RlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgWydsb2NhbCcsIGBlbGVjdHJvbi1mb3JnZS10ZW1wbGF0ZS0ke3RlbXBsYXRlfWBdLFxuICAgIFsnbG9jYWwnLCBgQGVsZWN0cm9uLWZvcmdlL3RlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgWydsb2NhbCcsIHRlbXBsYXRlXSxcbiAgXTtcbiAgbGV0IGZvdW5kVGVtcGxhdGUgPSBmYWxzZTtcbiAgZm9yIChjb25zdCBbdGVtcGxhdGVUeXBlLCBtb2R1bGVOYW1lXSBvZiByZXNvbHZlVGVtcGxhdGVUeXBlcykge1xuICAgIHRyeSB7XG4gICAgICBkKGBUcnlpbmcgJHt0ZW1wbGF0ZVR5cGV9IHRlbXBsYXRlOiAke21vZHVsZU5hbWV9YCk7XG4gICAgICBpZiAodGVtcGxhdGVUeXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSBhd2FpdCByZXNvbHZlUGFja2FnZShtb2R1bGVOYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGxvY2FsXG4gICAgICAgIHRlbXBsYXRlTW9kdWxlUGF0aCA9IHJlcXVpcmUucmVzb2x2ZShtb2R1bGVOYW1lKTtcbiAgICAgIH1cbiAgICAgIGZvdW5kVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBkKGBFcnJvcjogJHtlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogZXJyfWApO1xuICAgIH1cbiAgfVxuICBpZiAoIWZvdW5kVGVtcGxhdGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2NhdGUgY3VzdG9tIHRlbXBsYXRlOiBcIiR7dGVtcGxhdGV9XCJcXG5cXG5UcnkgXFxgbnBtIGluc3RhbGwgLWcgQGVsZWN0cm9uLWZvcmdlL3RlbXBsYXRlLSR7dGVtcGxhdGV9XFxgYCk7XG4gIH1cblxuICBkKGBmb3VuZCB0ZW1wbGF0ZSBtb2R1bGUgYXQ6ICR7dGVtcGxhdGVNb2R1bGVQYXRofWApO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gIGNvbnN0IHRlbXBsYXRlTW9kdWxlOiBQb3NzaWJsZU1vZHVsZTxGb3JnZVRlbXBsYXRlPiA9IHJlcXVpcmUodGVtcGxhdGVNb2R1bGVQYXRoKTtcblxuICByZXR1cm4gdGVtcGxhdGVNb2R1bGUuZGVmYXVsdCB8fCB0ZW1wbGF0ZU1vZHVsZTtcbn07XG4iXSwibmFtZXMiOlsiZCIsImRlYnVnIiwiZmluZFRlbXBsYXRlIiwiZGlyIiwidGVtcGxhdGUiLCJ0ZW1wbGF0ZU1vZHVsZVBhdGgiLCJyZXNvbHZlVGVtcGxhdGVUeXBlcyIsImZvdW5kVGVtcGxhdGUiLCJ0ZW1wbGF0ZVR5cGUiLCJtb2R1bGVOYW1lIiwicmVzb2x2ZVBhY2thZ2UiLCJyZXF1aXJlIiwicmVzb2x2ZSIsImVyciIsIkVycm9yIiwibWVzc2FnZSIsInRlbXBsYXRlTW9kdWxlIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDa0IsR0FBTyxDQUFQLE1BQU87QUFDRSxHQUFpQixDQUFqQixlQUFpQjs7Ozs7O0FBSTVDLEtBQUssQ0FBQ0EsQ0FBQyxPQUFHQyxNQUFLLFVBQUMsQ0FBbUM7QUFFNUMsS0FBSyxDQUFDQyxZQUFZLFVBQVVDLEdBQVcsRUFBRUMsUUFBZ0IsR0FBNkIsQ0FBQztJQUM1RixHQUFHLENBQUNDLGtCQUFrQjtJQUN0QixLQUFLLENBQUNDLG9CQUFvQixHQUFHLENBQUM7UUFDNUIsQ0FBQztZQUFBLENBQVE7YUFBRyx3QkFBd0IsRUFBRUYsUUFBUTtRQUFFLENBQUM7UUFDakQsQ0FBQztZQUFBLENBQVE7YUFBRyx5QkFBeUIsRUFBRUEsUUFBUTtRQUFFLENBQUM7UUFDbEQsQ0FBQztZQUFBLENBQU87YUFBRyx3QkFBd0IsRUFBRUEsUUFBUTtRQUFFLENBQUM7UUFDaEQsQ0FBQztZQUFBLENBQU87YUFBRyx5QkFBeUIsRUFBRUEsUUFBUTtRQUFFLENBQUM7UUFDakQsQ0FBQztZQUFBLENBQU87WUFBRUEsUUFBUTtRQUFBLENBQUM7SUFDckIsQ0FBQztJQUNELEdBQUcsQ0FBQ0csYUFBYSxHQUFHLEtBQUs7SUFDekIsR0FBRyxFQUFFLEtBQUssRUFBRUMsWUFBWSxFQUFFQyxVQUFVLEtBQUtILG9CQUFvQixDQUFFLENBQUM7UUFDOUQsR0FBRyxDQUFDLENBQUM7WUFDSE4sQ0FBQyxFQUFFLE9BQU8sRUFBRVEsWUFBWSxDQUFDLFdBQVcsRUFBRUMsVUFBVTtZQUNoRCxFQUFFLEVBQUVELFlBQVksS0FBSyxDQUFRLFNBQUUsQ0FBQztnQkFDOUJILGtCQUFrQixHQUFHLEtBQUssS0FBQ0ssZUFBYyxVQUFDRCxVQUFVO1lBQ3RELENBQUMsTUFBTSxDQUFDO2dCQUNOLEVBQVEsQUFBUixNQUFRO2dCQUNSSixrQkFBa0IsR0FBR00sT0FBTyxDQUFDQyxPQUFPLENBQUNILFVBQVU7WUFDakQsQ0FBQztZQUNERixhQUFhLEdBQUcsSUFBSTtZQUNwQixLQUFLO1FBQ1AsQ0FBQyxDQUFDLEtBQUssRUFBRU0sR0FBRyxFQUFFLENBQUM7WUFDYmIsQ0FBQyxFQUFFLE9BQU8sRUFBRWEsR0FBRyxZQUFZQyxLQUFLLEdBQUdELEdBQUcsQ0FBQ0UsT0FBTyxHQUFHRixHQUFHO1FBQ3RELENBQUM7SUFDSCxDQUFDO0lBQ0QsRUFBRSxHQUFHTixhQUFhLEVBQUUsQ0FBQztRQUNuQixLQUFLLENBQUMsR0FBRyxDQUFDTyxLQUFLLEVBQUUsbUNBQW1DLEVBQUVWLFFBQVEsQ0FBQyxtREFBbUQsRUFBRUEsUUFBUSxDQUFDLEVBQUU7SUFDakksQ0FBQztJQUVESixDQUFDLEVBQUUsMEJBQTBCLEVBQUVLLGtCQUFrQjtJQUVqRCxFQUE4RCxBQUE5RCw0REFBOEQ7SUFDOUQsS0FBSyxDQUFDVyxjQUFjLEdBQWtDTCxPQUFPLENBQUNOLGtCQUFrQjtJQUVoRixNQUFNLENBQUNXLGNBQWMsQ0FBQ0MsT0FBTyxJQUFJRCxjQUFjO0FBQ2pELENBQUM7UUFuQ1lkLFlBQVksR0FBWkEsWUFBWSJ9