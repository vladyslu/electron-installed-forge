"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.siblingDep = siblingDep;
exports.initNPM = exports.exactDevDeps = exports.devDeps = exports.deps = void 0;
var _path = _interopRequireDefault(require("path"));
var _coreUtils = require("@electron-forge/core-utils");
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _installDependencies = _interopRequireWildcard(require("../../util/install-dependencies"));
var _readPackageJson = require("../../util/read-package-json");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const d = (0, _debug).default('electron-forge:init:npm');
const corePackage = _fsExtra.default.readJsonSync(_path.default.resolve(__dirname, '../../../package.json'));
function siblingDep(name) {
    return `@electron-forge/${name}@^${corePackage.version}`;
}
const deps = [
    'electron-squirrel-startup'
];
exports.deps = deps;
const devDeps = [
    siblingDep('cli'),
    siblingDep('maker-squirrel'),
    siblingDep('maker-zip'),
    siblingDep('maker-deb'),
    siblingDep('maker-rpm')
];
exports.devDeps = devDeps;
const exactDevDeps = [
    'electron'
];
exports.exactDevDeps = exactDevDeps;
const initNPM = async (dir, task)=>{
    d('installing dependencies');
    const packageManager = (0, _coreUtils).safeYarnOrNpm();
    task.output = `${packageManager} install ${deps.join(' ')}`;
    await (0, _installDependencies).default(dir, deps);
    d('installing devDependencies');
    task.output = `${packageManager} install --dev ${deps.join(' ')}`;
    await (0, _installDependencies).default(dir, devDeps, _installDependencies.DepType.DEV);
    d('installing exact devDependencies');
    for (const packageName of exactDevDeps){
        task.output = `${packageManager} install --dev --exact ${packageName}`;
        await (0, _installDependencies).default(dir, [
            packageName
        ], _installDependencies.DepType.DEV, _installDependencies.DepVersionRestriction.EXACT);
    }
    // This logic allows developers working on forge itself to easily init
    // a local template and have it use their local plugins / core / cli packages
    if (process.env.LINK_FORGE_DEPENDENCIES_ON_INIT) {
        const packageJson = await (0, _readPackageJson).readRawPackageJson(dir);
        const linkFolder = _path.default.resolve(__dirname, '..', '..', '..', '..', '..', '..', '.links');
        for (const packageName of Object.keys(packageJson.devDependencies)){
            if (packageName.startsWith('@electron-forge/')) {
                task.output = `${packageManager} link --link-folder ${linkFolder} ${packageName}`;
                await (0, _coreUtils).yarnOrNpmSpawn([
                    'link',
                    '--link-folder',
                    linkFolder,
                    packageName
                ], {
                    cwd: dir
                });
            }
        }
    }
};
exports.initNPM = initNPM;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtbnBtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBzYWZlWWFybk9yTnBtLCB5YXJuT3JOcG1TcGF3biB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9jb3JlLXV0aWxzJztcbmltcG9ydCB7IEZvcmdlTGlzdHJUYXNrIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcblxuaW1wb3J0IGluc3RhbGxEZXBMaXN0LCB7IERlcFR5cGUsIERlcFZlcnNpb25SZXN0cmljdGlvbiB9IGZyb20gJy4uLy4uL3V0aWwvaW5zdGFsbC1kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcmVhZFJhd1BhY2thZ2VKc29uIH0gZnJvbSAnLi4vLi4vdXRpbC9yZWFkLXBhY2thZ2UtanNvbic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdDpucG0nKTtcbmNvbnN0IGNvcmVQYWNrYWdlID0gZnMucmVhZEpzb25TeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi8uLi9wYWNrYWdlLmpzb24nKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWJsaW5nRGVwKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgQGVsZWN0cm9uLWZvcmdlLyR7bmFtZX1AXiR7Y29yZVBhY2thZ2UudmVyc2lvbn1gO1xufVxuXG5leHBvcnQgY29uc3QgZGVwcyA9IFsnZWxlY3Ryb24tc3F1aXJyZWwtc3RhcnR1cCddO1xuZXhwb3J0IGNvbnN0IGRldkRlcHMgPSBbc2libGluZ0RlcCgnY2xpJyksIHNpYmxpbmdEZXAoJ21ha2VyLXNxdWlycmVsJyksIHNpYmxpbmdEZXAoJ21ha2VyLXppcCcpLCBzaWJsaW5nRGVwKCdtYWtlci1kZWInKSwgc2libGluZ0RlcCgnbWFrZXItcnBtJyldO1xuZXhwb3J0IGNvbnN0IGV4YWN0RGV2RGVwcyA9IFsnZWxlY3Ryb24nXTtcblxuZXhwb3J0IGNvbnN0IGluaXROUE0gPSBhc3luYyAoZGlyOiBzdHJpbmcsIHRhc2s6IEZvcmdlTGlzdHJUYXNrPGFueT4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgZCgnaW5zdGFsbGluZyBkZXBlbmRlbmNpZXMnKTtcbiAgY29uc3QgcGFja2FnZU1hbmFnZXIgPSBzYWZlWWFybk9yTnBtKCk7XG4gIHRhc2sub3V0cHV0ID0gYCR7cGFja2FnZU1hbmFnZXJ9IGluc3RhbGwgJHtkZXBzLmpvaW4oJyAnKX1gO1xuICBhd2FpdCBpbnN0YWxsRGVwTGlzdChkaXIsIGRlcHMpO1xuXG4gIGQoJ2luc3RhbGxpbmcgZGV2RGVwZW5kZW5jaWVzJyk7XG4gIHRhc2sub3V0cHV0ID0gYCR7cGFja2FnZU1hbmFnZXJ9IGluc3RhbGwgLS1kZXYgJHtkZXBzLmpvaW4oJyAnKX1gO1xuICBhd2FpdCBpbnN0YWxsRGVwTGlzdChkaXIsIGRldkRlcHMsIERlcFR5cGUuREVWKTtcblxuICBkKCdpbnN0YWxsaW5nIGV4YWN0IGRldkRlcGVuZGVuY2llcycpO1xuICBmb3IgKGNvbnN0IHBhY2thZ2VOYW1lIG9mIGV4YWN0RGV2RGVwcykge1xuICAgIHRhc2sub3V0cHV0ID0gYCR7cGFja2FnZU1hbmFnZXJ9IGluc3RhbGwgLS1kZXYgLS1leGFjdCAke3BhY2thZ2VOYW1lfWA7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCBbcGFja2FnZU5hbWVdLCBEZXBUeXBlLkRFViwgRGVwVmVyc2lvblJlc3RyaWN0aW9uLkVYQUNUKTtcbiAgfVxuXG4gIC8vIFRoaXMgbG9naWMgYWxsb3dzIGRldmVsb3BlcnMgd29ya2luZyBvbiBmb3JnZSBpdHNlbGYgdG8gZWFzaWx5IGluaXRcbiAgLy8gYSBsb2NhbCB0ZW1wbGF0ZSBhbmQgaGF2ZSBpdCB1c2UgdGhlaXIgbG9jYWwgcGx1Z2lucyAvIGNvcmUgLyBjbGkgcGFja2FnZXNcbiAgaWYgKHByb2Nlc3MuZW52LkxJTktfRk9SR0VfREVQRU5ERU5DSUVTX09OX0lOSVQpIHtcbiAgICBjb25zdCBwYWNrYWdlSnNvbiA9IGF3YWl0IHJlYWRSYXdQYWNrYWdlSnNvbihkaXIpO1xuICAgIGNvbnN0IGxpbmtGb2xkZXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLi4nLCAnLi4nLCAnLi4nLCAnLi4nLCAnLmxpbmtzJyk7XG4gICAgZm9yIChjb25zdCBwYWNrYWdlTmFtZSBvZiBPYmplY3Qua2V5cyhwYWNrYWdlSnNvbi5kZXZEZXBlbmRlbmNpZXMpKSB7XG4gICAgICBpZiAocGFja2FnZU5hbWUuc3RhcnRzV2l0aCgnQGVsZWN0cm9uLWZvcmdlLycpKSB7XG4gICAgICAgIHRhc2sub3V0cHV0ID0gYCR7cGFja2FnZU1hbmFnZXJ9IGxpbmsgLS1saW5rLWZvbGRlciAke2xpbmtGb2xkZXJ9ICR7cGFja2FnZU5hbWV9YDtcbiAgICAgICAgYXdhaXQgeWFybk9yTnBtU3Bhd24oWydsaW5rJywgJy0tbGluay1mb2xkZXInLCBsaW5rRm9sZGVyLCBwYWNrYWdlTmFtZV0sIHtcbiAgICAgICAgICBjd2Q6IGRpcixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuIl0sIm5hbWVzIjpbInNpYmxpbmdEZXAiLCJkIiwiZGVidWciLCJjb3JlUGFja2FnZSIsImZzIiwicmVhZEpzb25TeW5jIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJuYW1lIiwidmVyc2lvbiIsImRlcHMiLCJkZXZEZXBzIiwiZXhhY3REZXZEZXBzIiwiaW5pdE5QTSIsImRpciIsInRhc2siLCJwYWNrYWdlTWFuYWdlciIsInNhZmVZYXJuT3JOcG0iLCJvdXRwdXQiLCJqb2luIiwiaW5zdGFsbERlcExpc3QiLCJEZXBUeXBlIiwiREVWIiwicGFja2FnZU5hbWUiLCJEZXBWZXJzaW9uUmVzdHJpY3Rpb24iLCJFWEFDVCIsInByb2Nlc3MiLCJlbnYiLCJMSU5LX0ZPUkdFX0RFUEVOREVOQ0lFU19PTl9JTklUIiwicGFja2FnZUpzb24iLCJyZWFkUmF3UGFja2FnZUpzb24iLCJsaW5rRm9sZGVyIiwiT2JqZWN0Iiwia2V5cyIsImRldkRlcGVuZGVuY2llcyIsInN0YXJ0c1dpdGgiLCJ5YXJuT3JOcG1TcGF3biIsImN3ZCJdLCJtYXBwaW5ncyI6Ijs7OztRQWFnQkEsVUFBVSxHQUFWQSxVQUFVOztBQWJULEdBQU0sQ0FBTixLQUFNO0FBRXVCLEdBQTRCLENBQTVCLFVBQTRCO0FBRXhELEdBQU8sQ0FBUCxNQUFPO0FBQ1YsR0FBVSxDQUFWLFFBQVU7QUFFc0MsR0FBaUMsQ0FBakMsb0JBQWlDO0FBQzdELEdBQThCLENBQTlCLGdCQUE4Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWpFLEtBQUssQ0FBQ0MsQ0FBQyxPQUFHQyxNQUFLLFVBQUMsQ0FBeUI7QUFDekMsS0FBSyxDQUFDQyxXQUFXLEdBQUdDLFFBQUUsU0FBQ0MsWUFBWSxDQUFDQyxLQUFJLFNBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxFQUFFLENBQXVCO1NBRW5FUixVQUFVLENBQUNTLElBQVksRUFBVSxDQUFDO0lBQ2hELE1BQU0sRUFBRSxnQkFBZ0IsRUFBRUEsSUFBSSxDQUFDLEVBQUUsRUFBRU4sV0FBVyxDQUFDTyxPQUFPO0FBQ3hELENBQUM7QUFFTSxLQUFLLENBQUNDLElBQUksR0FBRyxDQUFDO0lBQUEsQ0FBMkI7QUFBQSxDQUFDO1FBQXBDQSxJQUFJLEdBQUpBLElBQUk7QUFDVixLQUFLLENBQUNDLE9BQU8sR0FBRyxDQUFDWjtJQUFBQSxVQUFVLENBQUMsQ0FBSztJQUFHQSxVQUFVLENBQUMsQ0FBZ0I7SUFBR0EsVUFBVSxDQUFDLENBQVc7SUFBR0EsVUFBVSxDQUFDLENBQVc7SUFBR0EsVUFBVSxDQUFDLENBQVc7QUFBQyxDQUFDO1FBQXRJWSxPQUFPLEdBQVBBLE9BQU87QUFDYixLQUFLLENBQUNDLFlBQVksR0FBRyxDQUFDO0lBQUEsQ0FBVTtBQUFBLENBQUM7UUFBM0JBLFlBQVksR0FBWkEsWUFBWTtBQUVsQixLQUFLLENBQUNDLE9BQU8sVUFBVUMsR0FBVyxFQUFFQyxJQUF5QixHQUFvQixDQUFDO0lBQ3ZGZixDQUFDLENBQUMsQ0FBeUI7SUFDM0IsS0FBSyxDQUFDZ0IsY0FBYyxPQUFHQyxVQUFhO0lBQ3BDRixJQUFJLENBQUNHLE1BQU0sTUFBTUYsY0FBYyxDQUFDLFNBQVMsRUFBRU4sSUFBSSxDQUFDUyxJQUFJLENBQUMsQ0FBRztJQUN4RCxLQUFLLEtBQUNDLG9CQUFjLFVBQUNOLEdBQUcsRUFBRUosSUFBSTtJQUU5QlYsQ0FBQyxDQUFDLENBQTRCO0lBQzlCZSxJQUFJLENBQUNHLE1BQU0sTUFBTUYsY0FBYyxDQUFDLGVBQWUsRUFBRU4sSUFBSSxDQUFDUyxJQUFJLENBQUMsQ0FBRztJQUM5RCxLQUFLLEtBQUNDLG9CQUFjLFVBQUNOLEdBQUcsRUFBRUgsT0FBTyxFQUFFVSxvQkFBTyxTQUFDQyxHQUFHO0lBRTlDdEIsQ0FBQyxDQUFDLENBQWtDO0lBQ3BDLEdBQUcsRUFBRSxLQUFLLENBQUN1QixXQUFXLElBQUlYLFlBQVksQ0FBRSxDQUFDO1FBQ3ZDRyxJQUFJLENBQUNHLE1BQU0sTUFBTUYsY0FBYyxDQUFDLHVCQUF1QixFQUFFTyxXQUFXO1FBQ3BFLEtBQUssS0FBQ0gsb0JBQWMsVUFBQ04sR0FBRyxFQUFFLENBQUNTO1lBQUFBLFdBQVc7UUFBQSxDQUFDLEVBQUVGLG9CQUFPLFNBQUNDLEdBQUcsRUFBRUUsb0JBQXFCLHVCQUFDQyxLQUFLO0lBQ25GLENBQUM7SUFFRCxFQUFzRSxBQUF0RSxvRUFBc0U7SUFDdEUsRUFBNkUsQUFBN0UsMkVBQTZFO0lBQzdFLEVBQUUsRUFBRUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLCtCQUErQixFQUFFLENBQUM7UUFDaEQsS0FBSyxDQUFDQyxXQUFXLEdBQUcsS0FBSyxLQUFDQyxnQkFBa0IscUJBQUNoQixHQUFHO1FBQ2hELEtBQUssQ0FBQ2lCLFVBQVUsR0FBRzFCLEtBQUksU0FBQ0MsT0FBTyxDQUFDQyxTQUFTLEVBQUUsQ0FBSSxLQUFFLENBQUksS0FBRSxDQUFJLEtBQUUsQ0FBSSxLQUFFLENBQUksS0FBRSxDQUFJLEtBQUUsQ0FBUTtRQUN2RixHQUFHLEVBQUUsS0FBSyxDQUFDZ0IsV0FBVyxJQUFJUyxNQUFNLENBQUNDLElBQUksQ0FBQ0osV0FBVyxDQUFDSyxlQUFlLEVBQUcsQ0FBQztZQUNuRSxFQUFFLEVBQUVYLFdBQVcsQ0FBQ1ksVUFBVSxDQUFDLENBQWtCLG9CQUFHLENBQUM7Z0JBQy9DcEIsSUFBSSxDQUFDRyxNQUFNLE1BQU1GLGNBQWMsQ0FBQyxvQkFBb0IsRUFBRWUsVUFBVSxDQUFDLENBQUMsRUFBRVIsV0FBVztnQkFDL0UsS0FBSyxLQUFDYSxVQUFjLGlCQUFDLENBQUM7b0JBQUEsQ0FBTTtvQkFBRSxDQUFlO29CQUFFTCxVQUFVO29CQUFFUixXQUFXO2dCQUFBLENBQUMsRUFBRSxDQUFDO29CQUN4RWMsR0FBRyxFQUFFdkIsR0FBRztnQkFDVixDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztRQTlCWUQsT0FBTyxHQUFQQSxPQUFPIn0=