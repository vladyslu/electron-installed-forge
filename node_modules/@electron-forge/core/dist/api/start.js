"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StartOptions", {
    enumerable: true,
    get: function() {
        return _sharedTypes.StartOptions;
    }
});
exports.default = void 0;
var _childProcess = require("child_process");
var _coreUtils = require("@electron-forge/core-utils");
var _sharedTypes = require("@electron-forge/shared-types");
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _listr2 = require("listr2");
var _electronExecutable = _interopRequireDefault(require("../util/electron-executable"));
var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));
var _hook = require("../util/hook");
var _readPackageJson = require("../util/read-package-json");
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:start');
var _default = async ({ dir: providedDir = process.cwd() , appPath ='.' , interactive =false , enableLogging =false , args =[] , runAsNode =false , inspect =false , inspectBrk =false  })=>{
    const platform = process.env.npm_config_platform || process.platform;
    const arch = process.env.npm_config_arch || process.arch;
    const listrOptions = {
        concurrent: false,
        rendererOptions: {
            collapseErrors: false
        },
        rendererSilent: !interactive,
        rendererFallback: Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'))
    };
    const runner = new _listr2.Listr([
        {
            title: 'Locating application',
            task: async (ctx)=>{
                const resolvedDir = await (0, _resolveDir).default(providedDir);
                if (!resolvedDir) {
                    throw new Error('Failed to locate startable Electron application');
                }
                ctx.dir = resolvedDir;
            }
        },
        {
            title: 'Loading configuration',
            task: async (ctx)=>{
                const { dir  } = ctx;
                ctx.forgeConfig = await (0, _forgeConfig).default(dir);
                ctx.packageJSON = await (0, _readPackageJson).readMutatedPackageJson(dir, ctx.forgeConfig);
                if (!ctx.packageJSON.version) {
                    throw new Error(`Please set your application's 'version' in '${dir}/package.json'.`);
                }
            }
        },
        {
            title: 'Preparing native dependencies',
            task: async ({ dir , forgeConfig , packageJSON  }, task)=>{
                await (0, _coreUtils).listrCompatibleRebuildHook(dir, await (0, _coreUtils).getElectronVersion(dir, packageJSON), platform, arch, forgeConfig.rebuildConfig, task);
            },
            options: {
                persistentOutput: true,
                bottomBar: Infinity,
                showTimer: true
            }
        },
        {
            title: `Running ${_chalk.default.yellow('generateAssets')} hook`,
            task: async ({ forgeConfig  }, task)=>{
                return task.newListr(await (0, _hook).getHookListrTasks(forgeConfig, 'generateAssets', platform, arch));
            }
        }, 
    ], listrOptions);
    await runner.run();
    const { dir: dir1 , forgeConfig: forgeConfig1 , packageJSON: packageJSON1  } = runner.ctx;
    let lastSpawned = null;
    const forgeSpawn = async ()=>{
        let electronExecPath = null;
        // If a plugin has taken over the start command let's stop here
        let spawnedPluginChild = await forgeConfig1.pluginInterface.overrideStartLogic({
            dir: dir1,
            appPath,
            interactive,
            enableLogging,
            args,
            runAsNode,
            inspect,
            inspectBrk
        });
        if (typeof spawnedPluginChild === 'object' && 'tasks' in spawnedPluginChild) {
            const innerRunner = new _listr2.Listr([], listrOptions);
            for (const task of spawnedPluginChild.tasks){
                innerRunner.add(task);
            }
            await innerRunner.run();
            spawnedPluginChild = spawnedPluginChild.result;
        }
        let prefixArgs = [];
        if (typeof spawnedPluginChild === 'string') {
            electronExecPath = spawnedPluginChild;
        } else if (Array.isArray(spawnedPluginChild)) {
            [electronExecPath, ...prefixArgs] = spawnedPluginChild;
        } else if (spawnedPluginChild) {
            await (0, _hook).runHook(forgeConfig1, 'postStart', spawnedPluginChild);
            return spawnedPluginChild;
        }
        if (!electronExecPath) {
            electronExecPath = await (0, _electronExecutable).default(dir1, packageJSON1);
        }
        d('Electron binary path:', electronExecPath);
        const spawnOpts = {
            cwd: dir1,
            stdio: 'inherit',
            env: {
                ...process.env,
                ...enableLogging ? {
                    ELECTRON_ENABLE_LOGGING: 'true',
                    ELECTRON_ENABLE_STACK_DUMPING: 'true'
                } : {}
            }
        };
        if (runAsNode) {
            spawnOpts.env.ELECTRON_RUN_AS_NODE = 'true';
        } else {
            delete spawnOpts.env.ELECTRON_RUN_AS_NODE;
        }
        if (inspect) {
            args = [
                '--inspect'
            ].concat(args);
        }
        if (inspectBrk) {
            args = [
                '--inspect-brk'
            ].concat(args);
        }
        const spawned = (0, _childProcess).spawn(electronExecPath, prefixArgs.concat([
            appPath
        ]).concat(args), spawnOpts);
        await (0, _hook).runHook(forgeConfig1, 'postStart', spawned);
        return spawned;
    };
    const forgeSpawnWrapper = async ()=>{
        const spawned = await forgeSpawn();
        // When the child app is closed we should stop listening for stdin
        if (spawned) {
            if (interactive && process.stdin.isPaused()) {
                process.stdin.resume();
            }
            spawned.on('exit', ()=>{
                if (spawned.restarted) {
                    return;
                }
                if (interactive && !process.stdin.isPaused()) {
                    process.stdin.pause();
                }
            });
        } else if (interactive && !process.stdin.isPaused()) {
            process.stdin.pause();
        }
        lastSpawned = spawned;
        return lastSpawned;
    };
    if (interactive) {
        process.stdin.on('data', async (data)=>{
            if (data.toString().trim() === 'rs' && lastSpawned) {
                console.info(_chalk.default.cyan('\nRestarting App\n'));
                lastSpawned.restarted = true;
                lastSpawned.kill('SIGTERM');
                lastSpawned.emit('restarted', await forgeSpawnWrapper());
            }
        });
        process.stdin.resume();
    }
    const spawned1 = await forgeSpawnWrapper();
    if (interactive) console.log('');
    return spawned1;
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,