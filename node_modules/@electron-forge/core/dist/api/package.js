"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.listrPackage = void 0;
var _path = _interopRequireDefault(require("path"));
var _util = require("util");
var _coreUtils = require("@electron-forge/core-utils");
var _get = require("@electron/get");
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _electronPackager = _interopRequireDefault(require("electron-packager"));
var _fastGlob = _interopRequireDefault(require("fast-glob"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _listr2 = require("listr2");
var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));
var _hook = require("../util/hook");
var _messages = require("../util/messages");
var _outDir = _interopRequireDefault(require("../util/out-dir"));
var _readPackageJson = require("../util/read-package-json");
var _requireSearch = _interopRequireDefault(require("../util/require-search"));
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:packager');
/**
 * Resolves hooks if they are a path to a file (instead of a `Function`).
 */ function resolveHooks(hooks, dir) {
    if (hooks) {
        return hooks.map((hook)=>typeof hook === 'string' ? (0, _requireSearch).default(dir, [
                hook
            ]) : hook
        );
    }
    return [];
}
/**
 * Runs given hooks sequentially by mapping them to promises and iterating
 * through while awaiting
 */ function sequentialHooks(hooks) {
    return [
        async (buildPath, electronVersion, platform, arch, done)=>{
            for (const hook of hooks){
                try {
                    await (0, _util).promisify(hook)(buildPath, electronVersion, platform, arch);
                } catch (err) {
                    d('hook failed:', hook.toString(), err);
                    return done(err);
                }
            }
            done();
        }, 
    ];
}
function sequentialFinalizePackageTargetsHooks(hooks) {
    return [
        async (targets, done)=>{
            for (const hook of hooks){
                try {
                    await (0, _util).promisify(hook)(targets);
                } catch (err) {
                    return done(err);
                }
            }
            done();
        }, 
    ];
}
const listrPackage = ({ dir: providedDir = process.cwd() , interactive =false , arch: arch1 = (0, _get).getHostArch() , platform: platform1 = process.platform , outDir  })=>{
    const runner = new _listr2.Listr([
        {
            title: 'Preparing to package application',
            task: async (ctx)=>{
                const resolvedDir = await (0, _resolveDir).default(providedDir);
                if (!resolvedDir) {
                    throw new Error('Failed to locate compilable Electron application');
                }
                ctx.dir = resolvedDir;
                ctx.forgeConfig = await (0, _forgeConfig).default(resolvedDir);
                ctx.packageJSON = await (0, _readPackageJson).readMutatedPackageJson(resolvedDir, ctx.forgeConfig);
                if (!ctx.packageJSON.main) {
                    throw new Error('packageJSON.main must be set to a valid entry point for your Electron app');
                }
                ctx.calculatedOutDir = outDir || (0, _outDir).default(resolvedDir, ctx.forgeConfig);
            }
        },
        {
            title: 'Running packaging hooks',
            task: async ({ forgeConfig  }, task1)=>{
                return task1.newListr([
                    {
                        title: `Running ${_chalk.default.yellow('generateAssets')} hook`,
                        task: async (_, task)=>{
                            return task.newListr(await (0, _hook).getHookListrTasks(forgeConfig, 'generateAssets', platform1, arch1));
                        }
                    },
                    {
                        title: `Running ${_chalk.default.yellow('prePackage')} hook`,
                        task: async (_, task)=>{
                            return task.newListr(await (0, _hook).getHookListrTasks(forgeConfig, 'prePackage', platform1, arch1));
                        }
                    }, 
                ]);
            }
        },
        {
            title: 'Packaging application',
            task: async (ctx, task2)=>{
                const { calculatedOutDir , forgeConfig , packageJSON  } = ctx;
                const getTargetKey = (target)=>`${target.platform}/${target.arch}`
                ;
                task2.output = 'Determining targets...';
                let provideTargets;
                const targetsPromise = new Promise((resolve)=>{
                    provideTargets = resolve;
                });
                const signalCopyDone = new Map();
                const signalRebuildDone = new Map();
                const signalPackageDone = new Map();
                const rejects = [];
                const signalDone = (map, target)=>{
                    var ref, ref1;
                    (ref1 = (ref = map.get(getTargetKey(target))) === null || ref === void 0 ? void 0 : ref.pop()) === null || ref1 === void 0 ? void 0 : ref1();
                };
                const addSignalAndWait = async (map, target)=>{
                    const targetKey = getTargetKey(target);
                    await new Promise((resolve, reject)=>{
                        rejects.push(reject);
                        map.set(targetKey, (map.get(targetKey) || []).concat([
                            resolve
                        ]));
                    });
                };
                const rebuildTasks = new Map();
                const signalRebuildStart = new Map();
                const afterFinalizePackageTargetsHooks = [
                    (targets, done)=>{
                        provideTargets(targets);
                        done();
                    },
                    ...resolveHooks(forgeConfig.packagerConfig.afterFinalizePackageTargets, ctx.dir), 
                ];
                const pruneEnabled = !('prune' in forgeConfig.packagerConfig) || forgeConfig.packagerConfig.prune;
                const afterCopyHooks = [
                    async (buildPath, electronVersion, platform, arch, done)=>{
                        signalDone(signalCopyDone, {
                            platform,
                            arch
                        });
                        done();
                    },
                    async (buildPath, electronVersion, pPlatform, pArch, done)=>{
                        const bins = await (0, _fastGlob).default(_path.default.join(buildPath, '**/.bin/**/*'));
                        for (const bin of bins){
                            await _fsExtra.default.remove(bin);
                        }
                        done();
                    },
                    async (buildPath, electronVersion, pPlatform, pArch, done)=>{
                        await (0, _hook).runHook(forgeConfig, 'packageAfterCopy', buildPath, electronVersion, pPlatform, pArch);
                        done();
                    },
                    async (buildPath, electronVersion, pPlatform, pArch, done)=>{
                        var ref, ref2;
                        const targetKey = getTargetKey({
                            platform: pPlatform,
                            arch: pArch
                        });
                        await (0, _coreUtils).listrCompatibleRebuildHook(buildPath, electronVersion, pPlatform, pArch, forgeConfig.rebuildConfig, // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        await rebuildTasks.get(targetKey).pop());
                        (ref2 = (ref = signalRebuildDone.get(targetKey)) === null || ref === void 0 ? void 0 : ref.pop()) === null || ref2 === void 0 ? void 0 : ref2();
                        done();
                    },
                    async (buildPath, electronVersion, pPlatform, pArch, done)=>{
                        const copiedPackageJSON = await (0, _readPackageJson).readMutatedPackageJson(buildPath, forgeConfig);
                        if (copiedPackageJSON.config && copiedPackageJSON.config.forge) {
                            delete copiedPackageJSON.config.forge;
                        }
                        await _fsExtra.default.writeJson(_path.default.resolve(buildPath, 'package.json'), copiedPackageJSON, {
                            spaces: 2
                        });
                        done();
                    },
                    ...resolveHooks(forgeConfig.packagerConfig.afterCopy, ctx.dir), 
                ];
                const afterCompleteHooks = [
                    async (buildPath, electronVersion, pPlatform, pArch, done)=>{
                        var ref, ref3;
                        (ref3 = (ref = signalPackageDone.get(getTargetKey({
                            platform: pPlatform,
                            arch: pArch
                        }))) === null || ref === void 0 ? void 0 : ref.pop()) === null || ref3 === void 0 ? void 0 : ref3();
                        done();
                    }, 
                ];
                const afterPruneHooks = [];
                if (pruneEnabled) {
                    afterPruneHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterPrune, ctx.dir));
                }
                afterPruneHooks.push(async (buildPath, electronVersion, pPlatform, pArch, done)=>{
                    await (0, _hook).runHook(forgeConfig, 'packageAfterPrune', buildPath, electronVersion, pPlatform, pArch);
                    done();
                });
                const afterExtractHooks = [
                    async (buildPath, electronVersion, pPlatform, pArch, done)=>{
                        await (0, _hook).runHook(forgeConfig, 'packageAfterExtract', buildPath, electronVersion, pPlatform, pArch);
                        done();
                    }, 
                ];
                afterExtractHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterExtract, ctx.dir));
                const packageOpts = {
                    asar: false,
                    overwrite: true,
                    ignore: [
                        /^\/out\//g
                    ],
                    ...forgeConfig.packagerConfig,
                    quiet: true,
                    dir: ctx.dir,
                    arch: arch1,
                    platform: platform1,
                    afterFinalizePackageTargets: sequentialFinalizePackageTargetsHooks(afterFinalizePackageTargetsHooks),
                    afterComplete: sequentialHooks(afterCompleteHooks),
                    afterCopy: sequentialHooks(afterCopyHooks),
                    afterExtract: sequentialHooks(afterExtractHooks),
                    afterPrune: sequentialHooks(afterPruneHooks),
                    out: calculatedOutDir,
                    electronVersion: await (0, _coreUtils).getElectronVersion(ctx.dir, packageJSON)
                };
                packageOpts.quiet = true;
                if (packageOpts.all) {
                    throw new Error('config.forge.packagerConfig.all is not supported by Electron Forge');
                }
                if (!packageJSON.version && !packageOpts.appVersion) {
                    (0, _messages).warn(interactive, _chalk.default.yellow('Please set "version" or "config.forge.packagerConfig.appVersion" in your application\'s package.json so auto-updates work properly'));
                }
                if (packageOpts.prebuiltAsar) {
                    throw new Error('config.forge.packagerConfig.prebuiltAsar is not supported by Electron Forge');
                }
                d('packaging with options', packageOpts);
                ctx.packagerPromise = (0, _electronPackager).default(packageOpts);
                // Handle error by failing this task
                // rejects is populated by the reject handlers for every
                // signal based promise in every subtask
                ctx.packagerPromise.catch((err)=>{
                    for (const reject of rejects)reject(err);
                });
                const targets1 = await targetsPromise;
                // Copy the resolved targets into the context for later
                ctx.targets = [
                    ...targets1
                ];
                // If we are targetting a universal build we need to add the "fake"
                // x64 and arm64 builds into the list of targets so that we can
                // show progress for those
                for (const target2 of targets1){
                    if (target2.arch === 'universal') {
                        targets1.push({
                            platform: target2.platform,
                            arch: 'x64',
                            forUniversal: true
                        }, {
                            platform: target2.platform,
                            arch: 'arm64',
                            forUniversal: true
                        });
                    }
                }
                // Populate rebuildTasks with promises that resolve with the rebuild tasks
                // that will eventually run
                for (const target1 of targets1){
                    // Skip universal tasks as they do not have rebuild sub-tasks
                    if (target1.arch === 'universal') continue;
                    const targetKey = getTargetKey(target1);
                    rebuildTasks.set(targetKey, (rebuildTasks.get(targetKey) || []).concat([
                        new Promise((resolve)=>{
                            signalRebuildStart.set(targetKey, (signalRebuildStart.get(targetKey) || []).concat([
                                resolve
                            ]));
                        }), 
                    ]));
                }
                d('targets:', targets1);
                return task2.newListr(targets1.map((target)=>{
                    return target.arch === 'universal' ? {
                        title: `Stitching ${_chalk.default.cyan(`${target.platform}/x64`)} and ${_chalk.default.cyan(`${target.platform}/arm64`)} into a ${_chalk.default.green(`${target.platform}/universal`)} package`,
                        task: async ()=>{
                            await addSignalAndWait(signalPackageDone, target);
                        },
                        options: {
                            showTimer: true
                        }
                    } : {
                        title: `Packaging for ${_chalk.default.cyan(target.arch)} on ${_chalk.default.cyan(target.platform)}${target.forUniversal ? _chalk.default.italic(' (for universal package)') : ''}`,
                        task: async (_, task3)=>{
                            return task3.newListr([
                                {
                                    title: 'Copying files',
                                    task: async ()=>{
                                        await addSignalAndWait(signalCopyDone, target);
                                    }
                                },
                                {
                                    title: 'Preparing native dependencies',
                                    task: async (_, task)=>{
                                        var ref, ref4;
                                        (ref4 = (ref = signalRebuildStart.get(getTargetKey(target))) === null || ref === void 0 ? void 0 : ref.pop()) === null || ref4 === void 0 ? void 0 : ref4(task);
                                        await addSignalAndWait(signalRebuildDone, target);
                                    },
                                    options: {
                                        persistentOutput: true,
                                        bottomBar: Infinity,
                                        showTimer: true
                                    }
                                },
                                {
                                    title: 'Finalizing package',
                                    task: async ()=>{
                                        await addSignalAndWait(signalPackageDone, target);
                                    }
                                }, 
                            ], {
                                rendererOptions: {
                                    collapse: true,
                                    collapseErrors: false
                                }
                            });
                        },
                        options: {
                            showTimer: true
                        }
                    };
                }), {
                    concurrent: true,
                    rendererOptions: {
                        collapse: false,
                        collapseErrors: false
                    }
                });
            }
        },
        {
            title: `Running ${_chalk.default.yellow('postPackage')} hook`,
            task: async ({ packagerPromise , forgeConfig  }, task)=>{
                const outputPaths = await packagerPromise;
                d('outputPaths:', outputPaths);
                return task.newListr(await (0, _hook).getHookListrTasks(forgeConfig, 'postPackage', {
                    arch: arch1,
                    outputPaths,
                    platform: platform1
                }));
            }
        }, 
    ], {
        concurrent: false,
        rendererSilent: !interactive,
        rendererFallback: Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge')),
        rendererOptions: {
            collapse: false,
            collapseErrors: false
        },
        ctx: {}
    });
    return runner;
};
exports.listrPackage = listrPackage;
var _default = async (opts)=>{
    const runner = listrPackage(opts);
    await runner.run();
    const outputPaths = await runner.ctx.packagerPromise;
    return runner.ctx.targets.map((target, index)=>({
            platform: target.platform,
            arch: target.arch,
            packagedPath: outputPaths[index]
        })
    );
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,