"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.listrMake = void 0;
var _path = _interopRequireDefault(require("path"));
var _coreUtils = require("@electron-forge/core-utils");
var _makerBase = require("@electron-forge/maker-base");
var _get = require("@electron/get");
var _chalk = _interopRequireDefault(require("chalk"));
var _filenamify = _interopRequireDefault(require("filenamify"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _listr2 = require("listr2");
var _logSymbols = _interopRequireDefault(require("log-symbols"));
var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));
var _hook = require("../util/hook");
var _outDir = _interopRequireDefault(require("../util/out-dir"));
var _parseArchs = _interopRequireDefault(require("../util/parse-archs"));
var _readPackageJson = require("../util/read-package-json");
var _requireSearch = _interopRequireDefault(require("../util/require-search"));
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
var _package = require("./package");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
class MakerImpl extends _makerBase.MakerBase {
    constructor(...args){
        super(...args);
        this.name = 'impl';
        this.defaultPlatforms = [];
    }
}
function generateTargets(forgeConfig, overrideTargets) {
    if (overrideTargets) {
        return overrideTargets.map((target)=>{
            if (typeof target === 'string') {
                return forgeConfig.makers.find((maker)=>maker.name === target
                ) || {
                    name: target
                };
            }
            return target;
        });
    }
    return forgeConfig.makers;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isElectronForgeMaker(target) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return target.__isElectronForgeMaker;
}
const listrMake = ({ dir: providedDir = process.cwd() , interactive =false , skipPackage =false , arch =(0, _get).getHostArch() , platform =process.platform , overrideTargets , outDir  }, receiveMakeResults)=>{
    const listrOptions = {
        concurrent: false,
        rendererOptions: {
            collapse: false,
            collapseErrors: false
        },
        rendererSilent: !interactive,
        rendererFallback: Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'))
    };
    const runner = new _listr2.Listr([
        {
            title: 'Loading configuration',
            task: async (ctx)=>{
                const resolvedDir = await (0, _resolveDir).default(providedDir);
                if (!resolvedDir) {
                    throw new Error('Failed to locate startable Electron application');
                }
                ctx.dir = resolvedDir;
                ctx.forgeConfig = await (0, _forgeConfig).default(resolvedDir);
            }
        },
        {
            title: 'Resolving make targets',
            task: async (ctx, task)=>{
                const { dir , forgeConfig  } = ctx;
                ctx.actualOutDir = outDir || (0, _outDir).default(dir, forgeConfig);
                if (![
                    'darwin',
                    'win32',
                    'linux',
                    'mas'
                ].includes(platform)) {
                    throw new Error(`'${platform}' is an invalid platform. Choices are 'darwin', 'mas', 'win32' or 'linux'.`);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const makers = [];
                const possibleMakers = generateTargets(forgeConfig, overrideTargets);
                for (const possibleMaker of possibleMakers){
                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */ let maker;
                    if (isElectronForgeMaker(possibleMaker)) {
                        maker = possibleMaker;
                        if (!maker.platforms.includes(platform)) continue;
                    } else {
                        const resolvableTarget = possibleMaker;
                        // non-false falsy values should be 'true'
                        if (resolvableTarget.enabled === false) continue;
                        if (!resolvableTarget.name) {
                            throw new Error(`The following maker config is missing a maker name: ${JSON.stringify(resolvableTarget)}`);
                        } else if (typeof resolvableTarget.name !== 'string') {
                            throw new Error(`The following maker config has a maker name that is not a string: ${JSON.stringify(resolvableTarget)}`);
                        }
                        const MakerClass = (0, _requireSearch).default(dir, [
                            resolvableTarget.name
                        ]);
                        if (!MakerClass) {
                            throw new Error(`Could not find module with name '${resolvableTarget.name}'. If this is a package from NPM, make sure it's listed in the devDependencies of your package.json. If this is a local module, make sure you have the correct path to its entry point. Try using the DEBUG="electron-forge:require-search" environment variable for more information.`);
                        }
                        maker = new MakerClass(resolvableTarget.config, resolvableTarget.platforms || undefined);
                        if (!maker.platforms.includes(platform)) continue;
                    }
                    if (!maker.isSupportedOnCurrentPlatform) {
                        throw new Error([
                            `Maker for target ${maker.name} is incompatible with this version of `,
                            'Electron Forge, please upgrade or contact the maintainer ',
                            "(needs to implement 'isSupportedOnCurrentPlatform)')", 
                        ].join(''));
                    }
                    if (!maker.isSupportedOnCurrentPlatform()) {
                        throw new Error(`Cannot make for ${platform} and target ${maker.name}: the maker declared that it cannot run on ${process.platform}.`);
                    }
                    maker.ensureExternalBinariesExist();
                    makers.push(maker);
                }
                if (makers.length === 0) {
                    throw new Error(`Could not find any make targets configured for the "${platform}" platform.`);
                }
                ctx.makers = makers;
                task.output = `Making for the following targets: ${_chalk.default.magenta(`${makers.map((maker)=>maker.name
                ).join(', ')}`)}`;
            },
            options: {
                persistentOutput: true
            }
        },
        {
            title: `Running ${_chalk.default.yellow('package')} command`,
            task: async (ctx, task)=>{
                if (!skipPackage) {
                    return (0, _package).listrPackage({
                        dir: ctx.dir,
                        interactive,
                        arch,
                        outDir: ctx.actualOutDir,
                        platform
                    });
                } else {
                    task.output = _chalk.default.yellow(`${_logSymbols.default.warning} Skipping could result in an out of date build`);
                    task.skip();
                }
            },
            options: {
                persistentOutput: true
            }
        },
        {
            title: `Running ${_chalk.default.yellow('preMake')} hook`,
            task: async (ctx, task)=>{
                return task.newListr(await (0, _hook).getHookListrTasks(ctx.forgeConfig, 'preMake'));
            }
        },
        {
            title: 'Making distributables',
            task: async (ctx, task)=>{
                const { actualOutDir , dir , forgeConfig , makers  } = ctx;
                const packageJSON = await (0, _readPackageJson).readMutatedPackageJson(dir, forgeConfig);
                const appName = (0, _filenamify).default(forgeConfig.packagerConfig.name || packageJSON.productName || packageJSON.name, {
                    replacement: '-'
                });
                const outputs = [];
                ctx.outputs = outputs;
                const subRunner = task.newListr([], {
                    ...listrOptions,
                    rendererOptions: {
                        collapse: false,
                        collapseErrors: false
                    }
                });
                for (const targetArch of (0, _parseArchs).default(platform, arch, await (0, _coreUtils).getElectronVersion(dir, packageJSON))){
                    const packageDir = _path.default.resolve(actualOutDir, `${appName}-${platform}-${targetArch}`);
                    if (!await _fsExtra.default.pathExists(packageDir)) {
                        throw new Error(`Couldn't find packaged app at: ${packageDir}`);
                    }
                    for (const maker of makers){
                        subRunner.add({
                            title: `Making a ${_chalk.default.magenta(maker.name)} distributable for ${_chalk.default.cyan(`${platform}/${targetArch}`)}`,
                            task: async ()=>{
                                try {
                                    /**
                     * WARNING: DO NOT ATTEMPT TO PARALLELIZE MAKERS
                     *
                     * Currently it is assumed we have 1 maker per make call but that is
                     * not enforced.  It is technically possible to have 1 maker be called
                     * multiple times.  The "prepareConfig" method however implicitly
                     * requires a lock that is not enforced.  There are two options:
                     *
                     *   * Provide makers a getConfig() method
                     *   * Remove support for config being provided as a method
                     *   * Change the entire API of maker from a single constructor to
                     *     providing a MakerFactory
                     */ maker.prepareConfig(targetArch);
                                    const artifacts = await maker.make({
                                        appName,
                                        forgeConfig,
                                        packageJSON,
                                        targetArch,
                                        dir: packageDir,
                                        makeDir: _path.default.resolve(actualOutDir, 'make'),
                                        targetPlatform: platform
                                    });
                                    outputs.push({
                                        artifacts,
                                        packageJSON,
                                        platform,
                                        arch: targetArch
                                    });
                                } catch (err) {
                                    if (err instanceof Error) {
                                        throw {
                                            message: `An error occured while making for target: ${maker.name}`,
                                            stack: `${err.message}\n${err.stack}`
                                        };
                                    } else if (err) {
                                        throw err;
                                    } else {
                                        throw new Error(`An unknown error occured while making for target: ${maker.name}`);
                                    }
                                }
                            },
                            options: {
                                showTimer: true
                            }
                        });
                    }
                }
                return subRunner;
            }
        },
        {
            title: `Running ${_chalk.default.yellow('postMake')} hook`,
            task: async (ctx, task)=>{
                // If the postMake hooks modifies the locations / names of the outputs it must return
                // the new locations so that the publish step knows where to look
                ctx.outputs = await (0, _hook).runMutatingHook(ctx.forgeConfig, 'postMake', ctx.outputs);
                receiveMakeResults === null || receiveMakeResults === void 0 ? void 0 : receiveMakeResults(ctx.outputs);
                task.output = `Artifacts available at: ${_chalk.default.green(_path.default.resolve(ctx.actualOutDir, 'make'))}`;
            },
            options: {
                persistentOutput: true
            }
        }, 
    ], {
        ...listrOptions,
        ctx: {}
    });
    return runner;
};
exports.listrMake = listrMake;
const make = async (opts)=>{
    const runner = listrMake(opts);
    await runner.run();
    return runner.ctx.outputs;
};
var _default = make;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,