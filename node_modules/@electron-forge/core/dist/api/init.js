"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _coreUtils = require("@electron-forge/core-utils");
var _debug = _interopRequireDefault(require("debug"));
var _listr2 = require("listr2");
var _semver = _interopRequireDefault(require("semver"));
var _installDependencies = _interopRequireWildcard(require("../util/install-dependencies"));
var _readPackageJson = require("../util/read-package-json");
var _findTemplate = require("./init-scripts/find-template");
var _initDirectory = require("./init-scripts/init-directory");
var _initGit = require("./init-scripts/init-git");
var _initNpm = require("./init-scripts/init-npm");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const d = (0, _debug).default('electron-forge:init');
async function validateTemplate(template, templateModule) {
    if (!templateModule.requiredForgeVersion) {
        throw new Error(`Cannot use a template (${template}) with this version of Electron Forge, as it does not specify its required Forge version.`);
    }
    const forgeVersion = (await (0, _readPackageJson).readRawPackageJson(_path.default.join(__dirname, '..', '..'))).version;
    if (!_semver.default.satisfies(forgeVersion, templateModule.requiredForgeVersion)) {
        throw new Error(`Template (${template}) is not compatible with this version of Electron Forge (${forgeVersion}), it requires ${templateModule.requiredForgeVersion}`);
    }
}
var _default = async ({ dir =process.cwd() , interactive =false , copyCIFiles =false , force =false , template ='base'  })=>{
    d(`Initializing in: ${dir}`);
    const packageManager = (0, _coreUtils).safeYarnOrNpm();
    const runner = new _listr2.Listr([
        {
            title: `Locating custom template: "${template}"`,
            task: async (ctx)=>{
                ctx.templateModule = await (0, _findTemplate).findTemplate(dir, template);
            }
        },
        {
            title: 'Initializing directory',
            task: async (_, task)=>{
                await (0, _initDirectory).initDirectory(dir, task, force);
                await (0, _initGit).initGit(dir);
            },
            options: {
                persistentOutput: true
            }
        },
        {
            title: 'Preparing template',
            task: async ({ templateModule  })=>{
                await validateTemplate(template, templateModule);
            }
        },
        {
            title: 'Initializing template',
            task: async ({ templateModule  }, task)=>{
                if (typeof templateModule.initializeTemplate === 'function') {
                    const tasks = await templateModule.initializeTemplate(dir, {
                        copyCIFiles
                    });
                    if (tasks) {
                        return task.newListr(tasks, {
                            concurrent: false
                        });
                    }
                }
            }
        },
        {
            title: 'Installing template dependencies',
            task: async ({ templateModule  }, task1)=>{
                return task1.newListr([
                    {
                        title: 'Installing production dependencies',
                        task: async (_, task)=>{
                            var ref;
                            d('installing dependencies');
                            if ((ref = templateModule.dependencies) === null || ref === void 0 ? void 0 : ref.length) {
                                task.output = `${packageManager} install ${templateModule.dependencies.join(' ')}`;
                            }
                            return await (0, _installDependencies).default(dir, templateModule.dependencies || [], _installDependencies.DepType.PROD, _installDependencies.DepVersionRestriction.RANGE);
                        }
                    },
                    {
                        title: 'Installing development dependencies',
                        task: async (_, task)=>{
                            var ref;
                            d('installing devDependencies');
                            if ((ref = templateModule.devDependencies) === null || ref === void 0 ? void 0 : ref.length) {
                                task.output = `${packageManager} install --dev ${templateModule.devDependencies.join(' ')}`;
                            }
                            await (0, _installDependencies).default(dir, templateModule.devDependencies || [], _installDependencies.DepType.DEV);
                        }
                    },
                    {
                        title: 'Finalizing dependencies',
                        task: async (_, task)=>{
                            await (0, _initNpm).initNPM(dir, task);
                        }
                    }, 
                ], {
                    concurrent: false,
                    exitOnError: false
                });
            }
        }, 
    ], {
        concurrent: false,
        rendererSilent: !interactive,
        rendererFallback: Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'))
    });
    await runner.run();
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,