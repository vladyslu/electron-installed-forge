"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _listr2 = require("listr2");
var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));
var _outDir = _interopRequireDefault(require("../util/out-dir"));
var _publishState = _interopRequireDefault(require("../util/publish-state"));
var _requireSearch = _interopRequireDefault(require("../util/require-search"));
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
var _make = require("./make");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:publish');
const publish = async ({ dir: providedDir = process.cwd() , interactive =false , makeOptions ={} , publishTargets =undefined , dryRun =false , dryRunResume =false , outDir  })=>{
    if (dryRun && dryRunResume) {
        throw new Error("Can't dry run and resume a dry run at the same time");
    }
    const listrOptions = {
        concurrent: false,
        rendererOptions: {
            collapseErrors: false
        },
        rendererSilent: !interactive,
        rendererFallback: Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'))
    };
    const publishDistributablesTasks = [
        {
            title: 'Publishing distributables',
            task: async ({ dir , forgeConfig , makeResults , publishers  }, task1)=>{
                if (publishers.length === 0) {
                    task1.output = 'No publishers configured';
                    task1.skip();
                    return;
                }
                return task1.newListr(publishers.map((publisher)=>({
                        title: `${_chalk.default.cyan(`[publisher-${publisher.name}]`)} Running the ${_chalk.default.yellow('publish')} command`,
                        task: async (_, task)=>{
                            const setStatusLine = (s)=>{
                                task.output = s;
                            };
                            await publisher.publish({
                                dir,
                                makeResults: makeResults,
                                forgeConfig,
                                setStatusLine
                            });
                        },
                        options: {
                            persistentOutput: true
                        }
                    })
                ), {
                    rendererOptions: {
                        collapse: false,
                        collapseErrors: false
                    }
                });
            },
            options: {
                persistentOutput: true
            }
        }, 
    ];
    const runner = new _listr2.Listr([
        {
            title: 'Loading configuration',
            task: async (ctx)=>{
                const resolvedDir = await (0, _resolveDir).default(providedDir);
                if (!resolvedDir) {
                    throw new Error('Failed to locate publishable Electron application');
                }
                ctx.dir = resolvedDir;
                ctx.forgeConfig = await (0, _forgeConfig).default(resolvedDir);
            }
        },
        {
            title: 'Resolving publish targets',
            task: async (ctx, task)=>{
                const { dir , forgeConfig  } = ctx;
                if (!publishTargets) {
                    publishTargets = forgeConfig.publishers || [];
                }
                publishTargets = publishTargets.map((target)=>{
                    if (typeof target === 'string') {
                        return (forgeConfig.publishers || []).find((p)=>{
                            if (typeof p === 'string') return false;
                            if (p.__isElectronForgePublisher) return false;
                            return p.name === target;
                        }) || {
                            name: target
                        };
                    }
                    return target;
                });
                ctx.publishers = [];
                for (const publishTarget of publishTargets){
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    let publisher;
                    if (publishTarget.__isElectronForgePublisher) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        publisher = publishTarget;
                    } else {
                        const resolvablePublishTarget = publishTarget;
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const PublisherClass = (0, _requireSearch).default(dir, [
                            resolvablePublishTarget.name
                        ]);
                        if (!PublisherClass) {
                            throw new Error(`Could not find a publish target with the name: ${resolvablePublishTarget.name}. Make sure it's listed in the devDependencies of your package.json`);
                        }
                        publisher = new PublisherClass(resolvablePublishTarget.config || {}, resolvablePublishTarget.platforms);
                    }
                    ctx.publishers.push(publisher);
                }
                if (ctx.publishers.length) {
                    task.output = `Publishing to the following targets: ${_chalk.default.magenta(`${ctx.publishers.map((publisher)=>publisher.name
                    ).join(', ')}`)}`;
                }
            },
            options: {
                persistentOutput: true
            }
        },
        {
            title: dryRunResume ? 'Resuming from dry run...' : `Running ${_chalk.default.yellow('make')} command`,
            task: async (ctx1, task2)=>{
                const { dir , forgeConfig  } = ctx1;
                const calculatedOutDir = outDir || (0, _outDir).default(dir, forgeConfig);
                const dryRunDir = _path.default.resolve(calculatedOutDir, 'publish-dry-run');
                if (dryRunResume) {
                    d('attempting to resume from dry run');
                    const publishes = await _publishState.default.loadFromDirectory(dryRunDir, dir);
                    task2.title = `Resuming ${publishes.length} found dry runs...`;
                    return task2.newListr(publishes.map((publishStates, index)=>{
                        return {
                            title: `Publishing dry-run ${_chalk.default.blue(`#${index + 1}`)}`,
                            task: async (ctx, task)=>{
                                const restoredMakeResults = publishStates.map(({ state  })=>state
                                );
                                d('restoring publish settings from dry run');
                                for (const makeResult of restoredMakeResults){
                                    for (const makePath of makeResult.artifacts){
                                        if (!await _fsExtra.default.pathExists(makePath)) {
                                            throw new Error(`Attempted to resume a dry run but an artifact (${makePath}) could not be found`);
                                        }
                                    }
                                }
                                d('publishing for given state set');
                                return task.newListr(publishDistributablesTasks, {
                                    ctx: {
                                        ...ctx,
                                        makeResults: restoredMakeResults
                                    },
                                    rendererOptions: {
                                        collapse: false,
                                        collapseErrors: false
                                    }
                                });
                            }
                        };
                    }), {
                        rendererOptions: {
                            collapse: false,
                            collapseErrors: false
                        }
                    });
                }
                d('triggering make');
                return (0, _make).listrMake({
                    dir,
                    interactive,
                    ...makeOptions
                }, (results)=>{
                    ctx1.makeResults = results;
                });
            }
        },
        ...dryRunResume ? [] : dryRun ? [
            {
                title: 'Saving dry-run state',
                task: async ({ dir , forgeConfig , makeResults  })=>{
                    d('saving results of make in dry run state', makeResults);
                    const calculatedOutDir = outDir || (0, _outDir).default(dir, forgeConfig);
                    const dryRunDir = _path.default.resolve(calculatedOutDir, 'publish-dry-run');
                    await _fsExtra.default.remove(dryRunDir);
                    await _publishState.default.saveToDirectory(dryRunDir, makeResults, dir);
                }
            }, 
        ] : publishDistributablesTasks, 
    ], listrOptions);
    await runner.run();
};
var _default = publish;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,