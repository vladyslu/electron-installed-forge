"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ElectronProcess", {
    enumerable: true,
    get: function() {
        return _sharedTypes.ElectronProcess;
    }
});
Object.defineProperty(exports, "ForgeMakeResult", {
    enumerable: true,
    get: function() {
        return _sharedTypes.ForgeMakeResult;
    }
});
Object.defineProperty(exports, "ForgeUtils", {
    enumerable: true,
    get: function() {
        return _util.default;
    }
});
Object.defineProperty(exports, "ImportOptions", {
    enumerable: true,
    get: function() {
        return _import.ImportOptions;
    }
});
Object.defineProperty(exports, "InitOptions", {
    enumerable: true,
    get: function() {
        return _init.InitOptions;
    }
});
Object.defineProperty(exports, "MakeOptions", {
    enumerable: true,
    get: function() {
        return _make.MakeOptions;
    }
});
Object.defineProperty(exports, "PackageOptions", {
    enumerable: true,
    get: function() {
        return _package.PackageOptions;
    }
});
Object.defineProperty(exports, "PublishOptions", {
    enumerable: true,
    get: function() {
        return _publish.PublishOptions;
    }
});
Object.defineProperty(exports, "StartOptions", {
    enumerable: true,
    get: function() {
        return _start.StartOptions;
    }
});
exports.utils = exports.api = void 0;
var _sharedTypes = require("@electron-forge/shared-types");
var _util = _interopRequireDefault(require("../util"));
var _import = _interopRequireWildcard(require("./import"));
var _init = _interopRequireWildcard(require("./init"));
var _make = _interopRequireWildcard(require("./make"));
var _package = _interopRequireWildcard(require("./package"));
var _publish = _interopRequireWildcard(require("./publish"));
var _start = _interopRequireWildcard(require("./start"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
class ForgeAPI {
    /**
   * Attempt to import a given module directory to the Electron Forge standard.
   *
   * * Sets up `git` and the correct NPM dependencies
   * * Adds a template forge config to `package.json`
   */ import(opts) {
        return (0, _import).default(opts);
    }
    /**
   * Initialize a new Electron Forge template project in the given directory.
   */ init(opts) {
        return (0, _init).default(opts);
    }
    /**
   * Make distributables for an Electron application
   */ make(opts) {
        return (0, _make).default(opts);
    }
    /**
   * Resolves hooks if they are a path to a file (instead of a `Function`)
   */ async package(opts) {
        await (0, _package).default(opts);
    }
    /**
   * Publish an Electron application into the given target service
   */ publish(opts) {
        return (0, _publish).default(opts);
    }
    /**
   * Start an Electron application.
   *
   * Handles things like native module rebuilding for you on the fly
   */ start(opts) {
        return (0, _start).default(opts);
    }
}
exports.ForgeAPI = ForgeAPI;
const api = new ForgeAPI();
exports.api = api;
const utils = new _util.default();
exports.utils = utils;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlY3Ryb25Qcm9jZXNzLCBGb3JnZU1ha2VSZXN1bHQgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IEZvcmdlVXRpbHMgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCBfaW1wb3J0LCB7IEltcG9ydE9wdGlvbnMgfSBmcm9tICcuL2ltcG9ydCc7XG5pbXBvcnQgaW5pdCwgeyBJbml0T3B0aW9ucyB9IGZyb20gJy4vaW5pdCc7XG5pbXBvcnQgbWFrZSwgeyBNYWtlT3B0aW9ucyB9IGZyb20gJy4vbWFrZSc7XG5pbXBvcnQgX3BhY2thZ2UsIHsgUGFja2FnZU9wdGlvbnMgfSBmcm9tICcuL3BhY2thZ2UnO1xuaW1wb3J0IHB1Ymxpc2gsIHsgUHVibGlzaE9wdGlvbnMgfSBmcm9tICcuL3B1Ymxpc2gnO1xuaW1wb3J0IHN0YXJ0LCB7IFN0YXJ0T3B0aW9ucyB9IGZyb20gJy4vc3RhcnQnO1xuXG5leHBvcnQgY2xhc3MgRm9yZ2VBUEkge1xuICAvKipcbiAgICogQXR0ZW1wdCB0byBpbXBvcnQgYSBnaXZlbiBtb2R1bGUgZGlyZWN0b3J5IHRvIHRoZSBFbGVjdHJvbiBGb3JnZSBzdGFuZGFyZC5cbiAgICpcbiAgICogKiBTZXRzIHVwIGBnaXRgIGFuZCB0aGUgY29ycmVjdCBOUE0gZGVwZW5kZW5jaWVzXG4gICAqICogQWRkcyBhIHRlbXBsYXRlIGZvcmdlIGNvbmZpZyB0byBgcGFja2FnZS5qc29uYFxuICAgKi9cbiAgaW1wb3J0KG9wdHM6IEltcG9ydE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gX2ltcG9ydChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgbmV3IEVsZWN0cm9uIEZvcmdlIHRlbXBsYXRlIHByb2plY3QgaW4gdGhlIGdpdmVuIGRpcmVjdG9yeS5cbiAgICovXG4gIGluaXQob3B0czogSW5pdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gaW5pdChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIGRpc3RyaWJ1dGFibGVzIGZvciBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvblxuICAgKi9cbiAgbWFrZShvcHRzOiBNYWtlT3B0aW9ucyk6IFByb21pc2U8Rm9yZ2VNYWtlUmVzdWx0W10+IHtcbiAgICByZXR1cm4gbWFrZShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBob29rcyBpZiB0aGV5IGFyZSBhIHBhdGggdG8gYSBmaWxlIChpbnN0ZWFkIG9mIGEgYEZ1bmN0aW9uYClcbiAgICovXG4gIGFzeW5jIHBhY2thZ2Uob3B0czogUGFja2FnZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBfcGFja2FnZShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uIGludG8gdGhlIGdpdmVuIHRhcmdldCBzZXJ2aWNlXG4gICAqL1xuICBwdWJsaXNoKG9wdHM6IFB1Ymxpc2hPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHB1Ymxpc2gob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEhhbmRsZXMgdGhpbmdzIGxpa2UgbmF0aXZlIG1vZHVsZSByZWJ1aWxkaW5nIGZvciB5b3Ugb24gdGhlIGZseVxuICAgKi9cbiAgc3RhcnQob3B0czogU3RhcnRPcHRpb25zKTogUHJvbWlzZTxFbGVjdHJvblByb2Nlc3M+IHtcbiAgICByZXR1cm4gc3RhcnQob3B0cyk7XG4gIH1cbn1cblxuY29uc3QgYXBpID0gbmV3IEZvcmdlQVBJKCk7XG5jb25zdCB1dGlscyA9IG5ldyBGb3JnZVV0aWxzKCk7XG5cbmV4cG9ydCB7IEZvcmdlTWFrZVJlc3VsdCwgRWxlY3Ryb25Qcm9jZXNzLCBGb3JnZVV0aWxzLCBJbXBvcnRPcHRpb25zLCBJbml0T3B0aW9ucywgTWFrZU9wdGlvbnMsIFBhY2thZ2VPcHRpb25zLCBQdWJsaXNoT3B0aW9ucywgU3RhcnRPcHRpb25zLCBhcGksIHV0aWxzIH07XG4iXSwibmFtZXMiOlsiRWxlY3Ryb25Qcm9jZXNzIiwiRm9yZ2VNYWtlUmVzdWx0IiwiRm9yZ2VVdGlscyIsIkltcG9ydE9wdGlvbnMiLCJJbml0T3B0aW9ucyIsIk1ha2VPcHRpb25zIiwiUGFja2FnZU9wdGlvbnMiLCJQdWJsaXNoT3B0aW9ucyIsIlN0YXJ0T3B0aW9ucyIsIkZvcmdlQVBJIiwiaW1wb3J0Iiwib3B0cyIsIl9pbXBvcnQiLCJpbml0IiwibWFrZSIsInBhY2thZ2UiLCJfcGFja2FnZSIsInB1Ymxpc2giLCJzdGFydCIsImFwaSIsInV0aWxzIl0sIm1hcHBpbmdzIjoiOzs7OytCQStEMEJBLENBQWU7OztlQUFmQSxZQUFlOzs7K0JBQWhDQyxDQUFlOzs7ZUFBZkEsWUFBZTs7OytCQUFtQkMsQ0FBVTs7O2VBQVZBLEtBQVU7OzsrQkFBRUMsQ0FBYTs7O2VBQWJBLE9BQWE7OzsrQkFBRUMsQ0FBVzs7O2VBQVhBLEtBQVc7OzsrQkFBRUMsQ0FBVzs7O2VBQVhBLEtBQVc7OzsrQkFBRUMsQ0FBYzs7O2VBQWRBLFFBQWM7OzsrQkFBRUMsQ0FBYzs7O2VBQWRBLFFBQWM7OzsrQkFBRUMsQ0FBWTs7O2VBQVpBLE1BQVk7Ozs7QUEvRDNGLEdBQThCLENBQTlCLFlBQThCO0FBRXhELEdBQVMsQ0FBVCxLQUFTO0FBRU8sR0FBVSxDQUFWLE9BQVU7QUFDZixHQUFRLENBQVIsS0FBUTtBQUNSLEdBQVEsQ0FBUixLQUFRO0FBQ0QsR0FBVyxDQUFYLFFBQVc7QUFDWixHQUFXLENBQVgsUUFBVztBQUNmLEdBQVMsQ0FBVCxNQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFFaENDLFFBQVE7SUFDbkIsRUFLRyxBQUxIOzs7OztHQUtHLEFBTEgsRUFLRyxDQUNIQyxNQUFNLENBQUNDLElBQW1CLEVBQWlCLENBQUM7UUFDMUMsTUFBTSxLQUFDQyxPQUFPLFVBQUNELElBQUk7SUFDckIsQ0FBQztJQUVELEVBRUcsQUFGSDs7R0FFRyxBQUZILEVBRUcsQ0FDSEUsSUFBSSxDQUFDRixJQUFpQixFQUFpQixDQUFDO1FBQ3RDLE1BQU0sS0FBQ0UsS0FBSSxVQUFDRixJQUFJO0lBQ2xCLENBQUM7SUFFRCxFQUVHLEFBRkg7O0dBRUcsQUFGSCxFQUVHLENBQ0hHLElBQUksQ0FBQ0gsSUFBaUIsRUFBOEIsQ0FBQztRQUNuRCxNQUFNLEtBQUNHLEtBQUksVUFBQ0gsSUFBSTtJQUNsQixDQUFDO0lBRUQsRUFFRyxBQUZIOztHQUVHLEFBRkgsRUFFRyxPQUNHSSxPQUFPLENBQUNKLElBQW9CLEVBQWlCLENBQUM7UUFDbEQsS0FBSyxLQUFDSyxRQUFRLFVBQUNMLElBQUk7SUFDckIsQ0FBQztJQUVELEVBRUcsQUFGSDs7R0FFRyxBQUZILEVBRUcsQ0FDSE0sT0FBTyxDQUFDTixJQUFvQixFQUFpQixDQUFDO1FBQzVDLE1BQU0sS0FBQ00sUUFBTyxVQUFDTixJQUFJO0lBQ3JCLENBQUM7SUFFRCxFQUlHLEFBSkg7Ozs7R0FJRyxBQUpILEVBSUcsQ0FDSE8sS0FBSyxDQUFDUCxJQUFrQixFQUE0QixDQUFDO1FBQ25ELE1BQU0sS0FBQ08sTUFBSyxVQUFDUCxJQUFJO0lBQ25CLENBQUM7O1FBOUNVRixRQUFRLEdBQVJBLFFBQVE7QUFpRHJCLEtBQUssQ0FBQ1UsR0FBRyxHQUFHLEdBQUcsQ0FBQ1YsUUFBUTtRQUdzSFUsR0FBRyxHQUFIQSxHQUFHO0FBRmpKLEtBQUssQ0FBQ0MsS0FBSyxHQUFHLEdBQUcsQ0FBQ2xCLEtBQVU7UUFFdUhrQixLQUFLLEdBQUxBLEtBQUsifQ==