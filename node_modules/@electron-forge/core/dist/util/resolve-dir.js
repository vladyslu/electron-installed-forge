"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _coreUtils = require("@electron-forge/core-utils");
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _readPackageJson = require("./read-package-json");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:project-resolver');
var _default = async (dir)=>{
    let mDir = dir;
    let bestGuessDir = null;
    let lastError = null;
    let prevDir;
    while(prevDir !== mDir){
        prevDir = mDir;
        const testPath = _path.default.resolve(mDir, 'package.json');
        d('searching for project in:', mDir);
        if (await _fsExtra.default.pathExists(testPath)) {
            var ref;
            const packageJSON = await (0, _readPackageJson).readRawPackageJson(mDir);
            // TODO: Move this check to inside the forge config resolver and use
            //       mutatedPackageJson reader
            try {
                await (0, _coreUtils).getElectronVersion(mDir, packageJSON);
            } catch (err) {
                if (err instanceof Error) {
                    lastError = err.message;
                }
            }
            if (packageJSON.config && packageJSON.config.forge) {
                d('electron-forge compatible package.json found in', testPath);
                return mDir;
            }
            if ((ref = packageJSON.devDependencies) === null || ref === void 0 ? void 0 : ref['@electron-forge/cli']) {
                d('package.json with forge dependency found in', testPath);
                return mDir;
            }
            bestGuessDir = mDir;
        }
        mDir = _path.default.dirname(mDir);
    }
    if (bestGuessDir) {
        d('guessing on the best electron-forge package.json found in', bestGuessDir);
        return bestGuessDir;
    }
    if (lastError) {
        throw lastError;
    }
    return null;
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3Jlc29sdmUtZGlyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBnZXRFbGVjdHJvblZlcnNpb24gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvY29yZS11dGlscyc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcblxuaW1wb3J0IHsgcmVhZFJhd1BhY2thZ2VKc29uIH0gZnJvbSAnLi9yZWFkLXBhY2thZ2UtanNvbic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6cHJvamVjdC1yZXNvbHZlcicpO1xuXG4vLyBGSVhNRTogSWYgd2Ugd2FudCBnZXRFbGVjdHJvblZlcnNpb24gdG8gYmUgb3ZlcnJpZGFibGUgYnkgcGx1Z2luc1xuLy8gICAgICAgIGFuZCAvIG9yIGZvcmdlIGNvbmZpZyB0aGVuIHdlIG5lZWQgdG8gYmUgYWJsZSB0byByZXNvbHZlXG4vLyAgICAgICAgdGhlIGRpciB3aXRob3V0IGNhbGxpbmcgZ2V0RWxlY3Ryb25WZXJzaW9uXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+ID0+IHtcbiAgbGV0IG1EaXIgPSBkaXI7XG4gIGxldCBiZXN0R3Vlc3NEaXI6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBsZXQgbGFzdEVycm9yOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBsZXQgcHJldkRpcjtcbiAgd2hpbGUgKHByZXZEaXIgIT09IG1EaXIpIHtcbiAgICBwcmV2RGlyID0gbURpcjtcbiAgICBjb25zdCB0ZXN0UGF0aCA9IHBhdGgucmVzb2x2ZShtRGlyLCAncGFja2FnZS5qc29uJyk7XG4gICAgZCgnc2VhcmNoaW5nIGZvciBwcm9qZWN0IGluOicsIG1EaXIpO1xuICAgIGlmIChhd2FpdCBmcy5wYXRoRXhpc3RzKHRlc3RQYXRoKSkge1xuICAgICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCByZWFkUmF3UGFja2FnZUpzb24obURpcik7XG5cbiAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyBjaGVjayB0byBpbnNpZGUgdGhlIGZvcmdlIGNvbmZpZyByZXNvbHZlciBhbmQgdXNlXG4gICAgICAvLyAgICAgICBtdXRhdGVkUGFja2FnZUpzb24gcmVhZGVyXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBnZXRFbGVjdHJvblZlcnNpb24obURpciwgcGFja2FnZUpTT04pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIGxhc3RFcnJvciA9IGVyci5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYWNrYWdlSlNPTi5jb25maWcgJiYgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlKSB7XG4gICAgICAgIGQoJ2VsZWN0cm9uLWZvcmdlIGNvbXBhdGlibGUgcGFja2FnZS5qc29uIGZvdW5kIGluJywgdGVzdFBhdGgpO1xuICAgICAgICByZXR1cm4gbURpcjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhY2thZ2VKU09OLmRldkRlcGVuZGVuY2llcz8uWydAZWxlY3Ryb24tZm9yZ2UvY2xpJ10pIHtcbiAgICAgICAgZCgncGFja2FnZS5qc29uIHdpdGggZm9yZ2UgZGVwZW5kZW5jeSBmb3VuZCBpbicsIHRlc3RQYXRoKTtcbiAgICAgICAgcmV0dXJuIG1EaXI7XG4gICAgICB9XG5cbiAgICAgIGJlc3RHdWVzc0RpciA9IG1EaXI7XG4gICAgfVxuICAgIG1EaXIgPSBwYXRoLmRpcm5hbWUobURpcik7XG4gIH1cbiAgaWYgKGJlc3RHdWVzc0Rpcikge1xuICAgIGQoJ2d1ZXNzaW5nIG9uIHRoZSBiZXN0IGVsZWN0cm9uLWZvcmdlIHBhY2thZ2UuanNvbiBmb3VuZCBpbicsIGJlc3RHdWVzc0Rpcik7XG4gICAgcmV0dXJuIGJlc3RHdWVzc0RpcjtcbiAgfVxuICBpZiAobGFzdEVycm9yKSB7XG4gICAgdGhyb3cgbGFzdEVycm9yO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbiJdLCJuYW1lcyI6WyJkIiwiZGVidWciLCJkaXIiLCJtRGlyIiwiYmVzdEd1ZXNzRGlyIiwibGFzdEVycm9yIiwicHJldkRpciIsInRlc3RQYXRoIiwicGF0aCIsInJlc29sdmUiLCJmcyIsInBhdGhFeGlzdHMiLCJwYWNrYWdlSlNPTiIsInJlYWRSYXdQYWNrYWdlSnNvbiIsImdldEVsZWN0cm9uVmVyc2lvbiIsImVyciIsIkVycm9yIiwibWVzc2FnZSIsImNvbmZpZyIsImZvcmdlIiwiZGV2RGVwZW5kZW5jaWVzIiwiZGlybmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUIsR0FBTSxDQUFOLEtBQU07QUFFWSxHQUE0QixDQUE1QixVQUE0QjtBQUM3QyxHQUFPLENBQVAsTUFBTztBQUNWLEdBQVUsQ0FBVixRQUFVO0FBRVUsR0FBcUIsQ0FBckIsZ0JBQXFCOzs7Ozs7QUFFeEQsS0FBSyxDQUFDQSxDQUFDLE9BQUdDLE1BQUssVUFBQyxDQUFpQztzQkFLM0JDLEdBQVcsR0FBNkIsQ0FBQztJQUM3RCxHQUFHLENBQUNDLElBQUksR0FBR0QsR0FBRztJQUNkLEdBQUcsQ0FBQ0UsWUFBWSxHQUFrQixJQUFJO0lBQ3RDLEdBQUcsQ0FBQ0MsU0FBUyxHQUFrQixJQUFJO0lBRW5DLEdBQUcsQ0FBQ0MsT0FBTztVQUNKQSxPQUFPLEtBQUtILElBQUksQ0FBRSxDQUFDO1FBQ3hCRyxPQUFPLEdBQUdILElBQUk7UUFDZCxLQUFLLENBQUNJLFFBQVEsR0FBR0MsS0FBSSxTQUFDQyxPQUFPLENBQUNOLElBQUksRUFBRSxDQUFjO1FBQ2xESCxDQUFDLENBQUMsQ0FBMkIsNEJBQUVHLElBQUk7UUFDbkMsRUFBRSxFQUFFLEtBQUssQ0FBQ08sUUFBRSxTQUFDQyxVQUFVLENBQUNKLFFBQVEsR0FBRyxDQUFDO2dCQWtCOUJLLEdBQTJCO1lBakIvQixLQUFLLENBQUNBLFdBQVcsR0FBRyxLQUFLLEtBQUNDLGdCQUFrQixxQkFBQ1YsSUFBSTtZQUVqRCxFQUFvRSxBQUFwRSxrRUFBb0U7WUFDcEUsRUFBa0MsQUFBbEMsZ0NBQWtDO1lBQ2xDLEdBQUcsQ0FBQyxDQUFDO2dCQUNILEtBQUssS0FBQ1csVUFBa0IscUJBQUNYLElBQUksRUFBRVMsV0FBVztZQUM1QyxDQUFDLENBQUMsS0FBSyxFQUFFRyxHQUFHLEVBQUUsQ0FBQztnQkFDYixFQUFFLEVBQUVBLEdBQUcsWUFBWUMsS0FBSyxFQUFFLENBQUM7b0JBQ3pCWCxTQUFTLEdBQUdVLEdBQUcsQ0FBQ0UsT0FBTztnQkFDekIsQ0FBQztZQUNILENBQUM7WUFFRCxFQUFFLEVBQUVMLFdBQVcsQ0FBQ00sTUFBTSxJQUFJTixXQUFXLENBQUNNLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7Z0JBQ25EbkIsQ0FBQyxDQUFDLENBQWlELGtEQUFFTyxRQUFRO2dCQUM3RCxNQUFNLENBQUNKLElBQUk7WUFDYixDQUFDO1lBRUQsRUFBRSxHQUFFUyxHQUEyQixHQUEzQkEsV0FBVyxDQUFDUSxlQUFlLGNBQTNCUixHQUEyQixLQUEzQkEsSUFBSSxDQUFKQSxDQUFvRCxHQUFwREEsSUFBSSxDQUFKQSxDQUFvRCxHQUFwREEsR0FBMkIsQ0FBRyxDQUFxQix1QkFBRyxDQUFDO2dCQUN6RFosQ0FBQyxDQUFDLENBQTZDLDhDQUFFTyxRQUFRO2dCQUN6RCxNQUFNLENBQUNKLElBQUk7WUFDYixDQUFDO1lBRURDLFlBQVksR0FBR0QsSUFBSTtRQUNyQixDQUFDO1FBQ0RBLElBQUksR0FBR0ssS0FBSSxTQUFDYSxPQUFPLENBQUNsQixJQUFJO0lBQzFCLENBQUM7SUFDRCxFQUFFLEVBQUVDLFlBQVksRUFBRSxDQUFDO1FBQ2pCSixDQUFDLENBQUMsQ0FBMkQsNERBQUVJLFlBQVk7UUFDM0UsTUFBTSxDQUFDQSxZQUFZO0lBQ3JCLENBQUM7SUFDRCxFQUFFLEVBQUVDLFNBQVMsRUFBRSxDQUFDO1FBQ2QsS0FBSyxDQUFDQSxTQUFTO0lBQ2pCLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSTtBQUNiLENBQUMifQ==