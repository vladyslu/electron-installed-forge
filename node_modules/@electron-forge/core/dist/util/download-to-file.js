"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.downloadToFile = downloadToFile;
var path = _interopRequireWildcard(require("path"));
var fs = _interopRequireWildcard(require("fs-extra"));
var _got = _interopRequireWildcard(require("got"));
var _progress = _interopRequireDefault(require("progress"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const PROGRESS_BAR_DELAY_IN_SECONDS = 30;
async function downloadToFile(targetFilePath, url) {
    let downloadCompleted = false;
    let bar;
    let progressPercent;
    await fs.mkdirp(path.dirname(targetFilePath));
    const writeStream = fs.createWriteStream(targetFilePath);
    const start = new Date();
    const timeout = setTimeout(()=>{
        if (!downloadCompleted) {
            bar = new _progress.default(`Downloading ${path.basename(url)}: [:bar] :percent ETA: :eta seconds `, {
                curr: progressPercent,
                total: 100
            });
            // https://github.com/visionmedia/node-progress/issues/159
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (bar).start = start;
        }
    }, PROGRESS_BAR_DELAY_IN_SECONDS * 1000);
    await new Promise((resolve, reject)=>{
        const downloadStream = _got.default.stream(url);
        downloadStream.on('downloadProgress', async (progress)=>{
            progressPercent = progress.percent;
            if (bar) {
                bar.update(progress.percent);
            }
        });
        downloadStream.on('error', (error)=>{
            if (error instanceof _got.HTTPError && error.response.statusCode === 404) {
                error.message += ` for ${error.response.url}`;
            }
            if (writeStream.destroy) {
                writeStream.destroy(error);
            }
            reject(error);
        });
        writeStream.on('error', (error)=>reject(error)
        );
        writeStream.on('close', ()=>resolve()
        );
        downloadStream.pipe(writeStream);
    });
    downloadCompleted = true;
    if (timeout) {
        clearTimeout(timeout);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2Rvd25sb2FkLXRvLWZpbGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IGdvdCwgeyBIVFRQRXJyb3IgfSBmcm9tICdnb3QnO1xuaW1wb3J0IFByb2dyZXNzQmFyIGZyb20gJ3Byb2dyZXNzJztcblxuY29uc3QgUFJPR1JFU1NfQkFSX0RFTEFZX0lOX1NFQ09ORFMgPSAzMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkVG9GaWxlKHRhcmdldEZpbGVQYXRoOiBzdHJpbmcsIHVybDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGxldCBkb3dubG9hZENvbXBsZXRlZCA9IGZhbHNlO1xuICBsZXQgYmFyOiBQcm9ncmVzc0JhciB8IHVuZGVmaW5lZDtcbiAgbGV0IHByb2dyZXNzUGVyY2VudDogbnVtYmVyO1xuICBhd2FpdCBmcy5ta2RpcnAocGF0aC5kaXJuYW1lKHRhcmdldEZpbGVQYXRoKSk7XG4gIGNvbnN0IHdyaXRlU3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0odGFyZ2V0RmlsZVBhdGgpO1xuXG4gIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKTtcbiAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlmICghZG93bmxvYWRDb21wbGV0ZWQpIHtcbiAgICAgIGJhciA9IG5ldyBQcm9ncmVzc0JhcihgRG93bmxvYWRpbmcgJHtwYXRoLmJhc2VuYW1lKHVybCl9OiBbOmJhcl0gOnBlcmNlbnQgRVRBOiA6ZXRhIHNlY29uZHMgYCwge1xuICAgICAgICBjdXJyOiBwcm9ncmVzc1BlcmNlbnQsXG4gICAgICAgIHRvdGFsOiAxMDAsXG4gICAgICB9KTtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92aXNpb25tZWRpYS9ub2RlLXByb2dyZXNzL2lzc3Vlcy8xNTlcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAoYmFyIGFzIGFueSkuc3RhcnQgPSBzdGFydDtcbiAgICB9XG4gIH0sIFBST0dSRVNTX0JBUl9ERUxBWV9JTl9TRUNPTkRTICogMTAwMCk7XG5cbiAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGRvd25sb2FkU3RyZWFtID0gZ290LnN0cmVhbSh1cmwpO1xuICAgIGRvd25sb2FkU3RyZWFtLm9uKCdkb3dubG9hZFByb2dyZXNzJywgYXN5bmMgKHByb2dyZXNzKSA9PiB7XG4gICAgICBwcm9ncmVzc1BlcmNlbnQgPSBwcm9ncmVzcy5wZXJjZW50O1xuICAgICAgaWYgKGJhcikge1xuICAgICAgICBiYXIudXBkYXRlKHByb2dyZXNzLnBlcmNlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGRvd25sb2FkU3RyZWFtLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSFRUUEVycm9yICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQwNCkge1xuICAgICAgICBlcnJvci5tZXNzYWdlICs9IGAgZm9yICR7ZXJyb3IucmVzcG9uc2UudXJsfWA7XG4gICAgICB9XG4gICAgICBpZiAod3JpdGVTdHJlYW0uZGVzdHJveSkge1xuICAgICAgICB3cml0ZVN0cmVhbS5kZXN0cm95KGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbiAgICB3cml0ZVN0cmVhbS5vbignZXJyb3InLCAoZXJyb3IpID0+IHJlamVjdChlcnJvcikpO1xuICAgIHdyaXRlU3RyZWFtLm9uKCdjbG9zZScsICgpID0+IHJlc29sdmUoKSk7XG5cbiAgICBkb3dubG9hZFN0cmVhbS5waXBlKHdyaXRlU3RyZWFtKTtcbiAgfSk7XG5cbiAgZG93bmxvYWRDb21wbGV0ZWQgPSB0cnVlO1xuICBpZiAodGltZW91dCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImRvd25sb2FkVG9GaWxlIiwicGF0aCIsImZzIiwiUFJPR1JFU1NfQkFSX0RFTEFZX0lOX1NFQ09ORFMiLCJ0YXJnZXRGaWxlUGF0aCIsInVybCIsImRvd25sb2FkQ29tcGxldGVkIiwiYmFyIiwicHJvZ3Jlc3NQZXJjZW50IiwibWtkaXJwIiwiZGlybmFtZSIsIndyaXRlU3RyZWFtIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJzdGFydCIsIkRhdGUiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsIlByb2dyZXNzQmFyIiwiYmFzZW5hbWUiLCJjdXJyIiwidG90YWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRvd25sb2FkU3RyZWFtIiwiZ290Iiwic3RyZWFtIiwib24iLCJwcm9ncmVzcyIsInBlcmNlbnQiLCJ1cGRhdGUiLCJlcnJvciIsIkhUVFBFcnJvciIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsIm1lc3NhZ2UiLCJkZXN0cm95IiwicGlwZSIsImNsZWFyVGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7OztRQVFzQkEsY0FBYyxHQUFkQSxjQUFjO0FBUnhCQyxHQUFJLENBQUpBLElBQUk7QUFFSkMsR0FBRSxDQUFGQSxFQUFFO0FBQ2lCLEdBQUssQ0FBTCxJQUFLO0FBQ1osR0FBVSxDQUFWLFNBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVsQyxLQUFLLENBQUNDLDZCQUE2QixHQUFHLEVBQUU7ZUFFbEJILGNBQWMsQ0FBQ0ksY0FBc0IsRUFBRUMsR0FBVyxFQUFpQixDQUFDO0lBQ3hGLEdBQUcsQ0FBQ0MsaUJBQWlCLEdBQUcsS0FBSztJQUM3QixHQUFHLENBQUNDLEdBQUc7SUFDUCxHQUFHLENBQUNDLGVBQWU7SUFDbkIsS0FBSyxDQUFDTixFQUFFLENBQUNPLE1BQU0sQ0FBQ1IsSUFBSSxDQUFDUyxPQUFPLENBQUNOLGNBQWM7SUFDM0MsS0FBSyxDQUFDTyxXQUFXLEdBQUdULEVBQUUsQ0FBQ1UsaUJBQWlCLENBQUNSLGNBQWM7SUFFdkQsS0FBSyxDQUFDUyxLQUFLLEdBQUcsR0FBRyxDQUFDQyxJQUFJO0lBQ3RCLEtBQUssQ0FBQ0MsT0FBTyxHQUFHQyxVQUFVLEtBQU8sQ0FBQztRQUNoQyxFQUFFLEdBQUdWLGlCQUFpQixFQUFFLENBQUM7WUFDdkJDLEdBQUcsR0FBRyxHQUFHLENBQUNVLFNBQVcsVUFBRSxZQUFZLEVBQUVoQixJQUFJLENBQUNpQixRQUFRLENBQUNiLEdBQUcsRUFBRSxvQ0FBb0MsR0FBRyxDQUFDO2dCQUM5RmMsSUFBSSxFQUFFWCxlQUFlO2dCQUNyQlksS0FBSyxFQUFFLEdBQUc7WUFDWixDQUFDO1lBQ0QsRUFBMEQsQUFBMUQsd0RBQTBEO1lBQzFELEVBQThELEFBQTlELDREQUE4RDthQUM3RGIsR0FBRyxFQUFTTSxLQUFLLEdBQUdBLEtBQUs7UUFDNUIsQ0FBQztJQUNILENBQUMsRUFBRVYsNkJBQTZCLEdBQUcsSUFBSTtJQUV2QyxLQUFLLENBQUMsR0FBRyxDQUFDa0IsT0FBTyxFQUFRQyxPQUFPLEVBQUVDLE1BQU0sR0FBSyxDQUFDO1FBQzVDLEtBQUssQ0FBQ0MsY0FBYyxHQUFHQyxJQUFHLFNBQUNDLE1BQU0sQ0FBQ3JCLEdBQUc7UUFDckNtQixjQUFjLENBQUNHLEVBQUUsQ0FBQyxDQUFrQiwwQkFBU0MsUUFBUSxHQUFLLENBQUM7WUFDekRwQixlQUFlLEdBQUdvQixRQUFRLENBQUNDLE9BQU87WUFDbEMsRUFBRSxFQUFFdEIsR0FBRyxFQUFFLENBQUM7Z0JBQ1JBLEdBQUcsQ0FBQ3VCLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDQyxPQUFPO1lBQzdCLENBQUM7UUFDSCxDQUFDO1FBQ0RMLGNBQWMsQ0FBQ0csRUFBRSxDQUFDLENBQU8sU0FBR0ksS0FBSyxHQUFLLENBQUM7WUFDckMsRUFBRSxFQUFFQSxLQUFLLFlBQVlDLElBQVMsY0FBSUQsS0FBSyxDQUFDRSxRQUFRLENBQUNDLFVBQVUsS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDcEVILEtBQUssQ0FBQ0ksT0FBTyxLQUFLLEtBQUssRUFBRUosS0FBSyxDQUFDRSxRQUFRLENBQUM1QixHQUFHO1lBQzdDLENBQUM7WUFDRCxFQUFFLEVBQUVNLFdBQVcsQ0FBQ3lCLE9BQU8sRUFBRSxDQUFDO2dCQUN4QnpCLFdBQVcsQ0FBQ3lCLE9BQU8sQ0FBQ0wsS0FBSztZQUMzQixDQUFDO1lBRURSLE1BQU0sQ0FBQ1EsS0FBSztRQUNkLENBQUM7UUFDRHBCLFdBQVcsQ0FBQ2dCLEVBQUUsQ0FBQyxDQUFPLFNBQUdJLEtBQUssR0FBS1IsTUFBTSxDQUFDUSxLQUFLOztRQUMvQ3BCLFdBQVcsQ0FBQ2dCLEVBQUUsQ0FBQyxDQUFPLFlBQVFMLE9BQU87O1FBRXJDRSxjQUFjLENBQUNhLElBQUksQ0FBQzFCLFdBQVc7SUFDakMsQ0FBQztJQUVETCxpQkFBaUIsR0FBRyxJQUFJO0lBQ3hCLEVBQUUsRUFBRVMsT0FBTyxFQUFFLENBQUM7UUFDWnVCLFlBQVksQ0FBQ3ZCLE9BQU87SUFDdEIsQ0FBQztBQUNILENBQUMifQ==