"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _pluginBase = require("@electron-forge/plugin-base");
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _requireSearch = _interopRequireDefault(require("./require-search"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:plugins');
function isForgePlugin(plugin) {
    return plugin.__isElectronForgePlugin;
}
class PluginInterface {
    constructor(dir, forgeConfig){
        this.plugins = forgeConfig.plugins.map((plugin)=>{
            if (isForgePlugin(plugin)) {
                return plugin;
            }
            if (typeof plugin === 'object' && 'name' in plugin && 'config' in plugin) {
                const { name: pluginName , config: opts  } = plugin;
                if (typeof pluginName !== 'string') {
                    throw new Error(`Expected plugin[0] to be a string but found ${pluginName}`);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const Plugin = (0, _requireSearch).default(dir, [
                    pluginName
                ]);
                if (!Plugin) {
                    throw new Error(`Could not find module with name: ${pluginName}. Make sure it's listed in the devDependencies of your package.json`);
                }
                return new Plugin(opts);
            }
            throw new Error(`Expected plugin to either be a plugin instance or a { name, config } object but found ${plugin}`);
        });
        // TODO: fix hack
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.config = null;
        Object.defineProperty(this, 'config', {
            value: forgeConfig,
            enumerable: false,
            configurable: false,
            writable: false
        });
        for (const plugin1 of this.plugins){
            plugin1.init(dir, forgeConfig);
        }
        this.triggerHook = this.triggerHook.bind(this);
        this.overrideStartLogic = this.overrideStartLogic.bind(this);
    }
    async triggerHook(hookName, hookArgs) {
        for (const plugin of this.plugins){
            if (typeof plugin.getHooks === 'function') {
                let hooks = plugin.getHooks()[hookName];
                if (hooks) {
                    if (typeof hooks === 'function') hooks = [
                        hooks
                    ];
                    for (const hook of hooks){
                        await hook(this.config, ...hookArgs);
                    }
                }
            }
        }
    }
    async getHookListrTasks(hookName, hookArgs) {
        const tasks = [];
        for (const plugin of this.plugins){
            if (typeof plugin.getHooks === 'function') {
                let hooks = plugin.getHooks()[hookName];
                if (hooks) {
                    if (typeof hooks === 'function') hooks = [
                        hooks
                    ];
                    for (const hook of hooks){
                        tasks.push({
                            title: `${_chalk.default.cyan(`[plugin-${plugin.name}]`)} ${hook.__hookName || `Running ${_chalk.default.yellow(hookName)} hook`}`,
                            task: async (_, task)=>{
                                if (hook.__hookName) {
                                    // Also give it the task
                                    await hook.call(task, ...hookArgs);
                                } else {
                                    await hook(this.config, ...hookArgs);
                                }
                            },
                            options: {}
                        });
                    }
                }
            }
        }
        return tasks;
    }
    async triggerMutatingHook(hookName, ...item) {
        let result = item[0];
        for (const plugin of this.plugins){
            if (typeof plugin.getHooks === 'function') {
                let hooks = plugin.getHooks()[hookName];
                if (hooks) {
                    if (typeof hooks === 'function') hooks = [
                        hooks
                    ];
                    for (const hook of hooks){
                        result = await hook(this.config, ...item) || result;
                    }
                }
            }
        }
        return result;
    }
    async overrideStartLogic(opts) {
        let newStartFn;
        const claimed = [];
        for (const plugin of this.plugins){
            if (typeof plugin.startLogic === 'function' && plugin.startLogic !== _pluginBase.PluginBase.prototype.startLogic) {
                claimed.push(plugin.name);
                newStartFn = plugin.startLogic;
            }
        }
        if (claimed.length > 1) {
            throw new Error(`Multiple plugins tried to take control of the start command, please remove one of them\n --> ${claimed.join(', ')}`);
        }
        if (claimed.length === 1 && newStartFn) {
            d(`plugin: "${claimed[0]}" has taken control of the start command`);
            const result = await newStartFn(opts);
            if (typeof result === 'object' && 'tasks' in result) {
                result.tasks = result.tasks.map((task)=>({
                        ...task,
                        title: `${_chalk.default.cyan(`[plugin-${claimed[0]}]`)} ${task.title}`
                    })
                );
            }
            return result;
        }
        return false;
    }
}
exports.default = PluginInterface;

//# sourceMappingURL=data:application/json;base64,