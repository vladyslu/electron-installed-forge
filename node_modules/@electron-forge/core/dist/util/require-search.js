"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.requireSearchRaw = requireSearchRaw;
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _debug = _interopRequireDefault(require("debug"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:require-search');
function requireSearchRaw(relativeTo, paths) {
    // Attempt to locally short-circuit if we're running from a checkout of forge
    if (__dirname.includes('forge/packages/api/core/') && paths.length === 1 && paths[0].startsWith('@electron-forge/')) {
        const [moduleType, moduleName] = paths[0].split('/')[1].split('-');
        try {
            const localPath = _path.default.resolve(__dirname, '..', '..', '..', '..', moduleType, moduleName);
            d('testing local forge build', {
                moduleType,
                moduleName,
                localPath
            });
            return require(localPath);
        } catch  {
        // Ignore
        }
    }
    // Load via normal search paths
    const testPaths = paths.concat(paths.map((mapPath)=>_path.default.resolve(relativeTo, mapPath)
    )).concat(paths.map((mapPath)=>_path.default.resolve(relativeTo, 'node_modules', mapPath)
    ));
    d('searching', testPaths, 'relative to', relativeTo);
    for (const testPath of testPaths){
        try {
            d('testing', testPath);
            return require(testPath);
        } catch (err) {
            if (err instanceof Error) {
                const requireErr = err;
                // Ignore require-related errors
                if (requireErr.code !== 'MODULE_NOT_FOUND' || ![
                    undefined,
                    testPath
                ].includes(requireErr.requestPath)) {
                    throw err;
                }
            }
        }
    }
    d('failed to find a module in', testPaths);
    return null;
}
var _default = (relativeTo, paths)=>{
    const result = requireSearchRaw(relativeTo, paths);
    return typeof result === 'object' && result && result.default ? result.default : result;
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3JlcXVpcmUtc2VhcmNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOnJlcXVpcmUtc2VhcmNoJyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL2RhMGVkZTFhZDU1YTUwMmEyNWI0MTM5ZjU4YWFiM2ZiMWVlM2JmM2YvbGliL2ludGVybmFsL21vZHVsZXMvY2pzL2xvYWRlci5qcyNMMzUzLUwzNTlcbnR5cGUgUmVxdWlyZUVycm9yID0gRXJyb3IgJiB7XG4gIGNvZGU6IHN0cmluZztcbiAgcGF0aDogc3RyaW5nO1xuICByZXF1ZXN0UGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVTZWFyY2hSYXc8VD4ocmVsYXRpdmVUbzogc3RyaW5nLCBwYXRoczogc3RyaW5nW10pOiBUIHwgbnVsbCB7XG4gIC8vIEF0dGVtcHQgdG8gbG9jYWxseSBzaG9ydC1jaXJjdWl0IGlmIHdlJ3JlIHJ1bm5pbmcgZnJvbSBhIGNoZWNrb3V0IG9mIGZvcmdlXG4gIGlmIChfX2Rpcm5hbWUuaW5jbHVkZXMoJ2ZvcmdlL3BhY2thZ2VzL2FwaS9jb3JlLycpICYmIHBhdGhzLmxlbmd0aCA9PT0gMSAmJiBwYXRoc1swXS5zdGFydHNXaXRoKCdAZWxlY3Ryb24tZm9yZ2UvJykpIHtcbiAgICBjb25zdCBbbW9kdWxlVHlwZSwgbW9kdWxlTmFtZV0gPSBwYXRoc1swXS5zcGxpdCgnLycpWzFdLnNwbGl0KCctJyk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGxvY2FsUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICcuLicsICcuLicsIG1vZHVsZVR5cGUsIG1vZHVsZU5hbWUpO1xuICAgICAgZCgndGVzdGluZyBsb2NhbCBmb3JnZSBidWlsZCcsIHsgbW9kdWxlVHlwZSwgbW9kdWxlTmFtZSwgbG9jYWxQYXRoIH0pO1xuICAgICAgcmV0dXJuIHJlcXVpcmUobG9jYWxQYXRoKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIElnbm9yZVxuICAgIH1cbiAgfVxuXG4gIC8vIExvYWQgdmlhIG5vcm1hbCBzZWFyY2ggcGF0aHNcbiAgY29uc3QgdGVzdFBhdGhzID0gcGF0aHNcbiAgICAuY29uY2F0KHBhdGhzLm1hcCgobWFwUGF0aCkgPT4gcGF0aC5yZXNvbHZlKHJlbGF0aXZlVG8sIG1hcFBhdGgpKSlcbiAgICAuY29uY2F0KHBhdGhzLm1hcCgobWFwUGF0aCkgPT4gcGF0aC5yZXNvbHZlKHJlbGF0aXZlVG8sICdub2RlX21vZHVsZXMnLCBtYXBQYXRoKSkpO1xuICBkKCdzZWFyY2hpbmcnLCB0ZXN0UGF0aHMsICdyZWxhdGl2ZSB0bycsIHJlbGF0aXZlVG8pO1xuICBmb3IgKGNvbnN0IHRlc3RQYXRoIG9mIHRlc3RQYXRocykge1xuICAgIHRyeSB7XG4gICAgICBkKCd0ZXN0aW5nJywgdGVzdFBhdGgpO1xuICAgICAgcmV0dXJuIHJlcXVpcmUodGVzdFBhdGgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVFcnIgPSBlcnIgYXMgUmVxdWlyZUVycm9yO1xuICAgICAgICAvLyBJZ25vcmUgcmVxdWlyZS1yZWxhdGVkIGVycm9yc1xuICAgICAgICBpZiAocmVxdWlyZUVyci5jb2RlICE9PSAnTU9EVUxFX05PVF9GT1VORCcgfHwgIVt1bmRlZmluZWQsIHRlc3RQYXRoXS5pbmNsdWRlcyhyZXF1aXJlRXJyLnJlcXVlc3RQYXRoKSkge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBkKCdmYWlsZWQgdG8gZmluZCBhIG1vZHVsZSBpbicsIHRlc3RQYXRocyk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBQb3NzaWJsZU1vZHVsZTxUPiA9IHtcbiAgZGVmYXVsdD86IFQ7XG59ICYgVDtcblxuZXhwb3J0IGRlZmF1bHQgPFQ+KHJlbGF0aXZlVG86IHN0cmluZywgcGF0aHM6IHN0cmluZ1tdKTogVCB8IG51bGwgPT4ge1xuICBjb25zdCByZXN1bHQgPSByZXF1aXJlU2VhcmNoUmF3PFBvc3NpYmxlTW9kdWxlPFQ+PihyZWxhdGl2ZVRvLCBwYXRocyk7XG4gIHJldHVybiB0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0LmRlZmF1bHQgPyByZXN1bHQuZGVmYXVsdCA6IChyZXN1bHQgYXMgVCB8IG51bGwpO1xufTtcbiJdLCJuYW1lcyI6WyJyZXF1aXJlU2VhcmNoUmF3IiwiZCIsImRlYnVnIiwicmVsYXRpdmVUbyIsInBhdGhzIiwiX19kaXJuYW1lIiwiaW5jbHVkZXMiLCJsZW5ndGgiLCJzdGFydHNXaXRoIiwibW9kdWxlVHlwZSIsIm1vZHVsZU5hbWUiLCJzcGxpdCIsImxvY2FsUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwicmVxdWlyZSIsInRlc3RQYXRocyIsImNvbmNhdCIsIm1hcCIsIm1hcFBhdGgiLCJ0ZXN0UGF0aCIsImVyciIsIkVycm9yIiwicmVxdWlyZUVyciIsImNvZGUiLCJ1bmRlZmluZWQiLCJyZXF1ZXN0UGF0aCIsInJlc3VsdCIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiI7Ozs7UUFhZ0JBLGdCQUFnQixHQUFoQkEsZ0JBQWdCOztBQWJmLEdBQU0sQ0FBTixLQUFNO0FBRUwsR0FBTyxDQUFQLE1BQU87Ozs7OztBQUV6QixLQUFLLENBQUNDLENBQUMsT0FBR0MsTUFBSyxVQUFDLENBQStCO1NBUy9CRixnQkFBZ0IsQ0FBSUcsVUFBa0IsRUFBRUMsS0FBZSxFQUFZLENBQUM7SUFDbEYsRUFBNkUsQUFBN0UsMkVBQTZFO0lBQzdFLEVBQUUsRUFBRUMsU0FBUyxDQUFDQyxRQUFRLENBQUMs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