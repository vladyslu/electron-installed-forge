"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.DepVersionRestriction = exports.DepType = void 0;
var _coreUtils = require("@electron-forge/core-utils");
var _crossSpawnPromise = require("@malept/cross-spawn-promise");
var _debug = _interopRequireDefault(require("debug"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:dependency-installer');
var DepType;
exports.DepType = DepType;
(function(DepType) {
    DepType["PROD"] = "PROD";
    DepType["DEV"] = "DEV";
})(DepType || (exports.DepType = DepType = {}));
var DepVersionRestriction;
exports.DepVersionRestriction = DepVersionRestriction;
(function(DepVersionRestriction) {
    DepVersionRestriction["EXACT"] = "EXACT";
    DepVersionRestriction["RANGE"] = "RANGE";
})(DepVersionRestriction || (exports.DepVersionRestriction = DepVersionRestriction = {}));
var _default = async (dir, deps, depType = DepType.PROD, versionRestriction = DepVersionRestriction.RANGE)=>{
    d('installing', JSON.stringify(deps), 'in:', dir, `depType=${depType},versionRestriction=${versionRestriction},withYarn=${(0, _coreUtils).hasYarn()}`);
    if (deps.length === 0) {
        d('nothing to install, stopping immediately');
        return Promise.resolve();
    }
    let cmd = [
        'install'
    ].concat(deps);
    if ((0, _coreUtils).hasYarn()) {
        cmd = [
            'add'
        ].concat(deps);
        if (depType === DepType.DEV) cmd.push('--dev');
        if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--exact');
    } else {
        if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--save-exact');
        if (depType === DepType.DEV) cmd.push('--save-dev');
        if (depType === DepType.PROD) cmd.push('--save');
    }
    d('executing', JSON.stringify(cmd), 'in:', dir);
    try {
        await (0, _coreUtils).yarnOrNpmSpawn(cmd, {
            cwd: dir,
            stdio: 'pipe'
        });
    } catch (err) {
        if (err instanceof _crossSpawnPromise.ExitError) {
            throw new Error(`Failed to install modules: ${JSON.stringify(deps)}\n\nWith output: ${err.message}\n${err.stderr ? err.stderr.toString() : ''}`);
        } else {
            throw err;
        }
    }
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2luc3RhbGwtZGVwZW5kZW5jaWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhc1lhcm4sIHlhcm5Pck5wbVNwYXduIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUtdXRpbHMnO1xuaW1wb3J0IHsgRXhpdEVycm9yIH0gZnJvbSAnQG1hbGVwdC9jcm9zcy1zcGF3bi1wcm9taXNlJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6ZGVwZW5kZW5jeS1pbnN0YWxsZXInKTtcblxuZXhwb3J0IGVudW0gRGVwVHlwZSB7XG4gIFBST0QgPSAnUFJPRCcsXG4gIERFViA9ICdERVYnLFxufVxuXG5leHBvcnQgZW51bSBEZXBWZXJzaW9uUmVzdHJpY3Rpb24ge1xuICBFWEFDVCA9ICdFWEFDVCcsXG4gIFJBTkdFID0gJ1JBTkdFJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGRpcjogc3RyaW5nLCBkZXBzOiBzdHJpbmdbXSwgZGVwVHlwZSA9IERlcFR5cGUuUFJPRCwgdmVyc2lvblJlc3RyaWN0aW9uID0gRGVwVmVyc2lvblJlc3RyaWN0aW9uLlJBTkdFKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGQoJ2luc3RhbGxpbmcnLCBKU09OLnN0cmluZ2lmeShkZXBzKSwgJ2luOicsIGRpciwgYGRlcFR5cGU9JHtkZXBUeXBlfSx2ZXJzaW9uUmVzdHJpY3Rpb249JHt2ZXJzaW9uUmVzdHJpY3Rpb259LHdpdGhZYXJuPSR7aGFzWWFybigpfWApO1xuICBpZiAoZGVwcy5sZW5ndGggPT09IDApIHtcbiAgICBkKCdub3RoaW5nIHRvIGluc3RhbGwsIHN0b3BwaW5nIGltbWVkaWF0ZWx5Jyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIGxldCBjbWQgPSBbJ2luc3RhbGwnXS5jb25jYXQoZGVwcyk7XG4gIGlmIChoYXNZYXJuKCkpIHtcbiAgICBjbWQgPSBbJ2FkZCddLmNvbmNhdChkZXBzKTtcbiAgICBpZiAoZGVwVHlwZSA9PT0gRGVwVHlwZS5ERVYpIGNtZC5wdXNoKCctLWRldicpO1xuICAgIGlmICh2ZXJzaW9uUmVzdHJpY3Rpb24gPT09IERlcFZlcnNpb25SZXN0cmljdGlvbi5FWEFDVCkgY21kLnB1c2goJy0tZXhhY3QnKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmVyc2lvblJlc3RyaWN0aW9uID09PSBEZXBWZXJzaW9uUmVzdHJpY3Rpb24uRVhBQ1QpIGNtZC5wdXNoKCctLXNhdmUtZXhhY3QnKTtcbiAgICBpZiAoZGVwVHlwZSA9PT0gRGVwVHlwZS5ERVYpIGNtZC5wdXNoKCctLXNhdmUtZGV2Jyk7XG4gICAgaWYgKGRlcFR5cGUgPT09IERlcFR5cGUuUFJPRCkgY21kLnB1c2goJy0tc2F2ZScpO1xuICB9XG4gIGQoJ2V4ZWN1dGluZycsIEpTT04uc3RyaW5naWZ5KGNtZCksICdpbjonLCBkaXIpO1xuICB0cnkge1xuICAgIGF3YWl0IHlhcm5Pck5wbVNwYXduKGNtZCwge1xuICAgICAgY3dkOiBkaXIsXG4gICAgICBzdGRpbzogJ3BpcGUnLFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXhpdEVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBpbnN0YWxsIG1vZHVsZXM6ICR7SlNPTi5zdHJpbmdpZnkoZGVwcyl9XFxuXFxuV2l0aCBvdXRwdXQ6ICR7ZXJyLm1lc3NhZ2V9XFxuJHtlcnIuc3RkZXJyID8gZXJyLnN0ZGVyci50b1N0cmluZygpIDogJyd9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiZCIsImRlYnVnIiwiRGVwVHlwZSIsIlBST0QiLCJERVYiLCJEZXBWZXJzaW9uUmVzdHJpY3Rpb24iLCJFWEFDVCIsIlJBTkdFIiwiZGlyIiwiZGVwcyIsImRlcFR5cGUiLCJ2ZXJzaW9uUmVzdHJpY3Rpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiaGFzWWFybiIsImxlbmd0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwiY21kIiwiY29uY2F0IiwicHVzaCIsInlhcm5Pck5wbVNwYXduIiwiY3dkIiwic3RkaW8iLCJlcnIiLCJFeGl0RXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdGRlcnIiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0MsR0FBNEIsQ0FBNUIsVUFBNEI7QUFDMUMsR0FBNkIsQ0FBN0Isa0JBQTZCO0FBQ3JDLEdBQU8sQ0FBUCxNQUFPOzs7Ozs7QUFFekIsS0FBSyxDQUFDQSxDQUFDLE9BQUdDLE1BQUssVUFBQyxDQUFxQzs7O1VBRXpDQyxPQUFPO0lBQVBBLE9BQU8sQ0FDakJDLENBQUksU0FBSkEsQ0FBSTtJQURNRCxPQUFPLENBRWpCRSxDQUFHLFFBQUhBLENBQUc7R0FGT0YsT0FBTyx1QkFBUEEsT0FBTzs7O1VBS1BHLHFCQUFxQjtJQUFyQkEscUJBQXFCLENBQy9CQyxDQUFLLFVBQUxBLENBQUs7SUFES0QscUJBQXFCLENBRS9CRSxDQUFLLFVBQUxBLENBQUs7R0FGS0YscUJBQXFCLHFDQUFyQkEscUJBQXFCO3NCQUtYRyxHQUFXLEVBQUVDLElBQWMsRUFBRUMsT0FBTyxHQUFHUixPQUFPLENBQUNDLElBQUksRUFBRVEsa0JBQWtCLEdBQUdOLHFCQUFxQixDQUFDRSxLQUFLLEdBQW9CLENBQUM7SUFDOUlQLENBQUMsQ0FBQyxDQUFZLGFBQUVZLElBQUksQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUcsQ0FBSyxNQUFFRCxHQUFHLEdBQUcsUUFBUSxFQUFFRSxPQUFPLENBQUMsb0JBQW9CLEVBQUVDLGtCQUFrQixDQUFDLFVBQVUsTUFBRUcsVUFBTztJQUNqSSxFQUFFLEVBQUVMLElBQUksQ0FBQ00sTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3RCZixDQUFDLENBQUMsQ0FBMEM7UUFDNUMsTUFBTSxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPO0lBQ3hCLENBQUM7SUFDRCxHQUFHLENBQUNDLEdBQUcsR0FBRyxDQUFDO1FBQUEsQ0FBUztJQUFBLENBQUMsQ0FBQ0MsTUFBTSxDQUFDVixJQUFJO0lBQ2pDLEVBQUUsTUFBRUssVUFBTyxhQUFJLENBQUM7UUFDZEksR0FBRyxHQUFHLENBQUM7WUFBQSxDQUFLO1FBQUEsQ0FBQyxDQUFDQyxNQUFNLENBQUNWLElBQUk7UUFDekIsRUFBRSxFQUFFQyxPQUFPLEtBQUtSLE9BQU8sQ0FBQ0UsR0FBRyxFQUFFYyxHQUFHLENBQUNFLElBQUksQ0FBQyxDQUFPO1FBQzdDLEVBQUUsRUFBRVQsa0JBQWtCLEtBQUtOLHFCQUFxQixDQUFDQyxLQUFLLEVBQUVZLEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLENBQVM7SUFDNUUsQ0FBQyxNQUFNLENBQUM7UUFDTixFQUFFLEVBQUVULGtCQUFrQixLQUFLTixxQkFBcUIsQ0FBQ0MsS0FBSyxFQUFFWSxHQUFHLENBQUNFLElBQUksQ0FBQyxDQUFjO1FBQy9FLEVBQUUsRUFBRVYsT0FBTyxLQUFLUixPQUFPLENBQUNFLEdBQUcsRUFBRWMsR0FBRyxDQUFDRSxJQUFJLENBQUMsQ0FBWTtRQUNsRCxFQUFFLEVBQUVWLE9BQU8sS0FBS1IsT0FBTyxDQUFDQyxJQUFJLEVBQUVlLEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLENBQVE7SUFDakQsQ0FBQztJQUNEcEIsQ0FBQyxDQUFDLENBQVcsWUFBRVksSUFBSSxDQUFDQyxTQUFTLENBQUNLLEdBQUcsR0FBRyxDQUFLLE1BQUVWLEdBQUc7SUFDOUMsR0FBRyxDQUFDLENBQUM7UUFDSCxLQUFLLEtBQUNhLFVBQWMsaUJBQUNILEdBQUcsRUFBRSxDQUFDO1lBQ3pCSSxHQUFHLEVBQUVkLEdBQUc7WUFDUmUsS0FBSyxFQUFFLENBQU07UUFDZixDQUFDO0lBQ0gsQ0FBQyxDQUFDLEtBQUssRUFBRUMsR0FBRyxFQUFFLENBQUM7UUFDYixFQUFFLEVBQUVBLEdBQUcsWUFBWUMsa0JBQVMsWUFBRSxDQUFDO1lBQzdCLEtBQUssQ0FBQyxHQUFHLENBQUNDLEtBQUssRUFBRSwyQkFBMkIsRUFBRWQsSUFBSSxDQUFDQyxTQUFTLENBQUNKLElBQUksRUFBRSxpQkFBaUIsRUFBRWUsR0FBRyxDQUFDRyxPQUFPLENBQUMsRUFBRSxFQUFFSCxHQUFHLENBQUNJLE1BQU0sR0FBR0osR0FBRyxDQUFDSSxNQUFNLENBQUNDLFFBQVEsS0FBSyxDQUFFO1FBQy9JLENBQUMsTUFBTSxDQUFDO1lBQ04sS0FBSyxDQUFDTCxHQUFHO1FBQ1gsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDIn0=