"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = locateElectronExecutable;
exports.pluginCompileExists = pluginCompileExists;
var _path = _interopRequireDefault(require("path"));
var _coreUtils = require("@electron-forge/core-utils");
var _chalk = _interopRequireDefault(require("chalk"));
var _logSymbols = _interopRequireDefault(require("log-symbols"));
async function locateElectronExecutable(dir, packageJSON) {
    let electronModulePath = await (0, _coreUtils).getElectronModulePath(dir, packageJSON);
    if ((electronModulePath === null || electronModulePath === void 0 ? void 0 : electronModulePath.endsWith('electron-prebuilt-compile')) && !pluginCompileExists(packageJSON)) {
        console.warn(_logSymbols.default.warning, _chalk.default.yellow('WARNING: found electron-prebuilt-compile without the Electron Forge compile plugin. Please remove the deprecated electron-prebuilt-compile from your devDependencies.'));
        electronModulePath = undefined;
    }
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    let electronExecPath = require(electronModulePath || _path.default.resolve(dir, 'node_modules/electron'));
    if (typeof electronExecPath !== 'string') {
        console.warn(_logSymbols.default.warning, 'Returned Electron executable path is not a string, defaulting to a hardcoded location. Value:', electronExecPath);
        electronExecPath = require(_path.default.resolve(dir, 'node_modules/electron'));
    }
    return electronExecPath;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function pluginCompileExists(packageJSON) {
    if (!packageJSON.devDependencies) {
        return false;
    }
    const pluginCompileName = '@electron-forge/plugin-compile';
    const findPluginCompile = (packageName)=>packageName === pluginCompileName
    ;
    if (Object.keys(packageJSON.devDependencies).find(findPluginCompile)) {
        return true;
    }
    if (Object.keys(packageJSON.dependencies || {}).find(findPluginCompile)) {
        console.warn(_logSymbols.default.warning, _chalk.default.yellow(`${pluginCompileName} was detected in dependencies, it should be in devDependencies`));
        return true;
    }
    return false;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2VsZWN0cm9uLWV4ZWN1dGFibGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGdldEVsZWN0cm9uTW9kdWxlUGF0aCB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9jb3JlLXV0aWxzJztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgbG9nU3ltYm9scyBmcm9tICdsb2ctc3ltYm9scyc7XG5cbnR5cGUgUGFja2FnZUpTT04gPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbnR5cGUgRGVwZW5kZW5jaWVzID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBsdWdpbkNvbXBpbGVFeGlzdHMocGFja2FnZUpTT046IFBhY2thZ2VKU09OKTogYm9vbGVhbiB7XG4gIGlmICghcGFja2FnZUpTT04uZGV2RGVwZW5kZW5jaWVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcGx1Z2luQ29tcGlsZU5hbWUgPSAnQGVsZWN0cm9uLWZvcmdlL3BsdWdpbi1jb21waWxlJztcbiAgY29uc3QgZmluZFBsdWdpbkNvbXBpbGUgPSAocGFja2FnZU5hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4gcGFja2FnZU5hbWUgPT09IHBsdWdpbkNvbXBpbGVOYW1lO1xuXG4gIGlmIChPYmplY3Qua2V5cyhwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXMgYXMgRGVwZW5kZW5jaWVzKS5maW5kKGZpbmRQbHVnaW5Db21waWxlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKChwYWNrYWdlSlNPTi5kZXBlbmRlbmNpZXMgYXMgRGVwZW5kZW5jaWVzKSB8fCB7fSkuZmluZChmaW5kUGx1Z2luQ29tcGlsZSkpIHtcbiAgICBjb25zb2xlLndhcm4obG9nU3ltYm9scy53YXJuaW5nLCBjaGFsay55ZWxsb3coYCR7cGx1Z2luQ29tcGlsZU5hbWV9IHdhcyBkZXRlY3RlZCBpbiBkZXBlbmRlbmNpZXMsIGl0IHNob3VsZCBiZSBpbiBkZXZEZXBlbmRlbmNpZXNgKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGxvY2F0ZUVsZWN0cm9uRXhlY3V0YWJsZShkaXI6IHN0cmluZywgcGFja2FnZUpTT046IFBhY2thZ2VKU09OKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgbGV0IGVsZWN0cm9uTW9kdWxlUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkID0gYXdhaXQgZ2V0RWxlY3Ryb25Nb2R1bGVQYXRoKGRpciwgcGFja2FnZUpTT04pO1xuICBpZiAoZWxlY3Ryb25Nb2R1bGVQYXRoPy5lbmRzV2l0aCgnZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZScpICYmICFwbHVnaW5Db21waWxlRXhpc3RzKHBhY2thZ2VKU09OKSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGxvZ1N5bWJvbHMud2FybmluZyxcbiAgICAgIGNoYWxrLnllbGxvdyhcbiAgICAgICAgJ1dBUk5JTkc6IGZvdW5kIGVsZWN0cm9uLXByZWJ1aWx0LWNvbXBpbGUgd2l0aG91dCB0aGUgRWxlY3Ryb24gRm9yZ2UgY29tcGlsZSBwbHVnaW4uIFBsZWFzZSByZW1vdmUgdGhlIGRlcHJlY2F0ZWQgZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZSBmcm9tIHlvdXIgZGV2RGVwZW5kZW5jaWVzLidcbiAgICAgIClcbiAgICApO1xuICAgIGVsZWN0cm9uTW9kdWxlUGF0aCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gIGxldCBlbGVjdHJvbkV4ZWNQYXRoID0gcmVxdWlyZShlbGVjdHJvbk1vZHVsZVBhdGggfHwgcGF0aC5yZXNvbHZlKGRpciwgJ25vZGVfbW9kdWxlcy9lbGVjdHJvbicpKTtcblxuICBpZiAodHlwZW9mIGVsZWN0cm9uRXhlY1BhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgY29uc29sZS53YXJuKGxvZ1N5bWJvbHMud2FybmluZywgJ1JldHVybmVkIEVsZWN0cm9uIGV4ZWN1dGFibGUgcGF0aCBpcyBub3QgYSBzdHJpbmcsIGRlZmF1bHRpbmcgdG8gYSBoYXJkY29kZWQgbG9jYXRpb24uIFZhbHVlOicsIGVsZWN0cm9uRXhlY1BhdGgpO1xuICAgIGVsZWN0cm9uRXhlY1BhdGggPSByZXF1aXJlKHBhdGgucmVzb2x2ZShkaXIsICdub2RlX21vZHVsZXMvZWxlY3Ryb24nKSk7XG4gIH1cblxuICByZXR1cm4gZWxlY3Ryb25FeGVjUGF0aDtcbn1cbiJdLCJuYW1lcyI6WyJsb2NhdGVFbGVjdHJvbkV4ZWN1dGFibGUiLCJwbHVnaW5Db21waWxlRXhpc3RzIiwiZGlyIiwicGFja2FnZUpTT04iLCJlbGVjdHJvbk1vZHVsZVBhdGgiLCJnZXRFbGVjdHJvbk1vZHVsZVBhdGgiLCJlbmRzV2l0aCIsImNvbnNvbGUiLCJ3YXJuIiwibG9nU3ltYm9scyIsIndhcm5pbmciLCJjaGFsayIsInllbGxvdyIsInVuZGVmaW5lZCIsImVsZWN0cm9uRXhlY1BhdGgiLCJyZXF1aXJlIiwicGF0aCIsInJlc29sdmUiLCJkZXZEZXBlbmRlbmNpZXMiLCJwbHVnaW5Db21waWxlTmFtZSIsImZpbmRQbHVnaW5Db21waWxlIiwicGFja2FnZU5hbWUiLCJPYmplY3QiLCJrZXlzIiwiZmluZCIsImRlcGVuZGVuY2llcyJdLCJtYXBwaW5ncyI6Ijs7OztrQkE2QjhCQSx3QkFBd0I7UUFwQnRDQyxtQkFBbUIsR0FBbkJBLG1CQUFtQjtBQVRsQixHQUFNLENBQU4sS0FBTTtBQUVlLEdBQTRCLENBQTVCLFVBQTRCO0FBQ2hELEdBQU8sQ0FBUCxNQUFPO0FBQ0YsR0FBYSxDQUFiLFdBQWE7ZUF5Qk5ELHdCQUF3QixDQUFDRSxHQUFXLEVBQUVDLFdBQXdCLEVBQW1CLENBQUM7SUFDOUcsR0FBRyxDQUFDQyxrQkFBa0IsR0FBdUIsS0FBSyxLQUFDQyxVQUFxQix3QkFBQ0gsR0FBRyxFQUFFQyxXQUFXO0lBQ3pGLEVBQUUsR0FBRUMsa0JBQWtCLGFBQWxCQSxrQkFBa0IsS0FBbEJBLElBQUksQ0FBSkEsQ0FBNEIsR0FBNUJBLElBQUksQ0FBSkEsQ0FBNEIsR0FBNUJBLGtCQUFrQixDQUFFRSxRQUFRLENBQUMsQ0FBMkIsaUNBQU1MLG1CQUFtQixDQUFDRSxXQUFXLEdBQUcsQ0FBQztRQUNuR0ksT0FBTyxDQUFDQyxJQUFJLENBQ1ZDLFdBQVUsU0FBQ0MsT0FBTyxFQUNsQkMsTUFBSyxTQUFDQyxNQUFNLENBQ1YsQ0FBdUs7UUFHM0tSLGtCQUFrQixHQUFHUyxTQUFTO0lBQ2hDLENBQUM7SUFFRCxFQUE4RCxBQUE5RCw0REFBOEQ7SUFDOUQsR0FBRyxDQUFDQyxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDWCxrQkFBa0IsSUFBSVksS0FBSSxTQUFDQyxPQUFPLENBQUNmLEdBQUcsRUFBRSxDQUF1QjtJQUU5RixFQUFFLEVBQUUsTUFBTSxDQUFDWSxnQkFBZ0IsS0FBSyxDQUFRLFNBQUUsQ0FBQztRQUN6Q1AsT0FBTyxDQUFDQyxJQUFJLENBQUNDLFdBQVUsU0FBQ0MsT0FBTyxFQUFFLENBQStGLGdHQUFFSSxnQkFBZ0I7UUFDbEpBLGdCQUFnQixHQUFHQyxPQUFPLENBQUNDLEtBQUksU0FBQ0MsT0FBTyxDQUFDZixHQUFHLEVBQUUsQ0FBdUI7SUFDdEUsQ0FBQztJQUVELE1BQU0sQ0FBQ1ksZ0JBQWdCO0FBQ3pCLENBQUM7Ozs7OztTQXpDZWIsbUJBQW1CLENBQUNFLFdBQXdCLEVBQVcsQ0FBQztJQUN0RSxFQUFFLEdBQUdBLFdBQVcsQ0FBQ2UsZUFBZSxFQUFFLENBQUM7UUFDakMsTUFBTSxDQUFDLEtBQUs7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDQyxpQkFBaUIsR0FBRyxDQUFnQztJQUMxRCxLQUFLLENBQUNDLGlCQUFpQixJQUFJQyxXQUFtQixHQUFjQSxXQUFXLEtBQUtGLGlCQUFpQjs7SUFFN0YsRUFBRSxFQUFFRyxNQUFNLENBQUNDLElBQUksQ0FBQ3BCLFdBQVcsQ0FBQ2UsZUFBZSxFQUFrQk0sSUFBSSxDQUFDSixpQkFBaUIsR0FBRyxDQUFDO1FBQ3JGLE1BQU0sQ0FBQyxJQUFJO0lBQ2IsQ0FBQztJQUVELEVBQUUsRUFBRUUsTUFBTSxDQUFDQyxJQUFJLENBQUVwQixXQUFXLENBQUNzQixZQUFZLElBQXFCLENBQUMsQ0FBQyxFQUFFRCxJQUFJLENBQUNKLGlCQUFpQixHQUFHLENBQUM7UUFDMUZiLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxXQUFVLFNBQUNDLE9BQU8sRUFBRUMsTUFBSyxTQUFDQyxNQUFNLElBQUlPLGlCQUFpQixDQUFDLDhEQUE4RDtRQUNqSSxNQUFNLENBQUMsSUFBSTtJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSztBQUNkLENBQUMifQ==