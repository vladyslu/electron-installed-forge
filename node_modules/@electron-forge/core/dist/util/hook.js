"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.runMutatingHook = runMutatingHook;
exports.getHookListrTasks = exports.runHook = void 0;
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:hook');
const runHook = async (forgeConfig, hookName, ...hookArgs)=>{
    const { hooks  } = forgeConfig;
    if (hooks) {
        d(`hook triggered: ${hookName}`);
        if (typeof hooks[hookName] === 'function') {
            d('calling hook:', hookName, 'with args:', hookArgs);
            await hooks[hookName](forgeConfig, ...hookArgs);
        }
    }
    await forgeConfig.pluginInterface.triggerHook(hookName, hookArgs);
};
exports.runHook = runHook;
const getHookListrTasks = async (forgeConfig, hookName, ...hookArgs)=>{
    const { hooks  } = forgeConfig;
    const tasks = [];
    if (hooks) {
        d(`hook triggered: ${hookName}`);
        if (typeof hooks[hookName] === 'function') {
            d('calling hook:', hookName, 'with args:', hookArgs);
            tasks.push({
                title: `Running ${_chalk.default.yellow(hookName)} hook from forgeConfig`,
                task: async ()=>{
                    await hooks[hookName](forgeConfig, ...hookArgs);
                }
            });
        }
    }
    tasks.push(...await forgeConfig.pluginInterface.getHookListrTasks(hookName, hookArgs));
    return tasks;
};
exports.getHookListrTasks = getHookListrTasks;
async function runMutatingHook(forgeConfig, hookName, ...item) {
    const { hooks  } = forgeConfig;
    if (hooks) {
        d(`hook triggered: ${hookName}`);
        if (typeof hooks[hookName] === 'function') {
            d('calling mutating hook:', hookName, 'with item:', item[0]);
            const hook = hooks[hookName];
            const result = await hook(forgeConfig, ...item);
            if (typeof result !== 'undefined') {
                item[0] = result;
            }
        }
    }
    return forgeConfig.pluginInterface.triggerMutatingHook(hookName, item[0]);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2hvb2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRm9yZ2VMaXN0clRhc2tEZWZpbml0aW9uLFxuICBGb3JnZU11dGF0aW5nSG9va0ZuLFxuICBGb3JnZU11dGF0aW5nSG9va1NpZ25hdHVyZXMsXG4gIEZvcmdlU2ltcGxlSG9va0ZuLFxuICBGb3JnZVNpbXBsZUhvb2tTaWduYXR1cmVzLFxuICBSZXNvbHZlZEZvcmdlQ29uZmlnLFxufSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmhvb2snKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBjb25zdCBydW5Ib29rID0gYXN5bmMgPEhvb2sgZXh0ZW5kcyBrZXlvZiBGb3JnZVNpbXBsZUhvb2tTaWduYXR1cmVzPihcbiAgZm9yZ2VDb25maWc6IFJlc29sdmVkRm9yZ2VDb25maWcsXG4gIGhvb2tOYW1lOiBIb29rLFxuICAuLi5ob29rQXJnczogRm9yZ2VTaW1wbGVIb29rU2lnbmF0dXJlc1tIb29rXVxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHsgaG9va3MgfSA9IGZvcmdlQ29uZmlnO1xuICBpZiAoaG9va3MpIHtcbiAgICBkKGBob29rIHRyaWdnZXJlZDogJHtob29rTmFtZX1gKTtcbiAgICBpZiAodHlwZW9mIGhvb2tzW2hvb2tOYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZCgnY2FsbGluZyBob29rOicsIGhvb2tOYW1lLCAnd2l0aCBhcmdzOicsIGhvb2tBcmdzKTtcbiAgICAgIGF3YWl0IChob29rc1tob29rTmFtZV0gYXMgRm9yZ2VTaW1wbGVIb29rRm48SG9vaz4pKGZvcmdlQ29uZmlnLCAuLi5ob29rQXJncyk7XG4gICAgfVxuICB9XG4gIGF3YWl0IGZvcmdlQ29uZmlnLnBsdWdpbkludGVyZmFjZS50cmlnZ2VySG9vayhob29rTmFtZSwgaG9va0FyZ3MpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEhvb2tMaXN0clRhc2tzID0gYXN5bmMgPEhvb2sgZXh0ZW5kcyBrZXlvZiBGb3JnZVNpbXBsZUhvb2tTaWduYXR1cmVzPihcbiAgZm9yZ2VDb25maWc6IFJlc29sdmVkRm9yZ2VDb25maWcsXG4gIGhvb2tOYW1lOiBIb29rLFxuICAuLi5ob29rQXJnczogRm9yZ2VTaW1wbGVIb29rU2lnbmF0dXJlc1tIb29rXVxuKTogUHJvbWlzZTxGb3JnZUxpc3RyVGFza0RlZmluaXRpb25bXT4gPT4ge1xuICBjb25zdCB7IGhvb2tzIH0gPSBmb3JnZUNvbmZpZztcbiAgY29uc3QgdGFza3M6IEZvcmdlTGlzdHJUYXNrRGVmaW5pdGlvbltdID0gW107XG4gIGlmIChob29rcykge1xuICAgIGQoYGhvb2sgdHJpZ2dlcmVkOiAke2hvb2tOYW1lfWApO1xuICAgIGlmICh0eXBlb2YgaG9va3NbaG9va05hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkKCdjYWxsaW5nIGhvb2s6JywgaG9va05hbWUsICd3aXRoIGFyZ3M6JywgaG9va0FyZ3MpO1xuICAgICAgdGFza3MucHVzaCh7XG4gICAgICAgIHRpdGxlOiBgUnVubmluZyAke2NoYWxrLnllbGxvdyhob29rTmFtZSl9IGhvb2sgZnJvbSBmb3JnZUNvbmZpZ2AsXG4gICAgICAgIHRhc2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBhd2FpdCAoaG9va3NbaG9va05hbWVdIGFzIEZvcmdlU2ltcGxlSG9va0ZuPEhvb2s+KShmb3JnZUNvbmZpZywgLi4uaG9va0FyZ3MpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHRhc2tzLnB1c2goLi4uKGF3YWl0IGZvcmdlQ29uZmlnLnBsdWdpbkludGVyZmFjZS5nZXRIb29rTGlzdHJUYXNrcyhob29rTmFtZSwgaG9va0FyZ3MpKSk7XG4gIHJldHVybiB0YXNrcztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5NdXRhdGluZ0hvb2s8SG9vayBleHRlbmRzIGtleW9mIEZvcmdlTXV0YXRpbmdIb29rU2lnbmF0dXJlcz4oXG4gIGZvcmdlQ29uZmlnOiBSZXNvbHZlZEZvcmdlQ29uZmlnLFxuICBob29rTmFtZTogSG9vayxcbiAgLi4uaXRlbTogRm9yZ2VNdXRhdGluZ0hvb2tTaWduYXR1cmVzW0hvb2tdXG4pOiBQcm9taXNlPEZvcmdlTXV0YXRpbmdIb29rU2lnbmF0dXJlc1tIb29rXVswXT4ge1xuICBjb25zdCB7IGhvb2tzIH0gPSBmb3JnZUNvbmZpZztcbiAgaWYgKGhvb2tzKSB7XG4gICAgZChgaG9vayB0cmlnZ2VyZWQ6ICR7aG9va05hbWV9YCk7XG4gICAgaWYgKHR5cGVvZiBob29rc1tob29rTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGQoJ2NhbGxpbmcgbXV0YXRpbmcgaG9vazonLCBob29rTmFtZSwgJ3dpdGggaXRlbTonLCBpdGVtWzBdKTtcbiAgICAgIGNvbnN0IGhvb2sgPSBob29rc1tob29rTmFtZV0gYXMgRm9yZ2VNdXRhdGluZ0hvb2tGbjxIb29rPjtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhvb2soZm9yZ2VDb25maWcsIC4uLml0ZW0pO1xuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGl0ZW1bMF0gPSByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JnZUNvbmZpZy5wbHVnaW5JbnRlcmZhY2UudHJpZ2dlck11dGF0aW5nSG9vayhob29rTmFtZSwgaXRlbVswXSk7XG59XG4iXSwibmFtZXMiOlsicnVuTXV0YXRpbmdIb29rIiwiZCIsImRlYnVnIiwicnVuSG9vayIsImZvcmdlQ29uZmlnIiwiaG9va05hbWUiLCJob29rQXJncyIsImhvb2tzIiwicGx1Z2luSW50ZXJmYWNlIiwidHJpZ2dlckhvb2siLCJnZXRIb29rTGlzdHJUYXNrcyIsInRhc2tzIiwicHVzaCIsInRpdGxlIiwiY2hhbGsiLCJ5ZWxsb3ciLCJ0YXNrIiwiaXRlbSIsImhvb2siLCJyZXN1bHQiLCJ0cmlnZ2VyTXV0YXRpbmdIb29rIl0sIm1hcHBpbmdzIjoiOzs7O1FBcURzQkEsZUFBZSxHQUFmQSxlQUFlOztBQTdDbkIsR0FBTyxDQUFQLE1BQU87QUFDUCxHQUFPLENBQVAsTUFBTzs7Ozs7O0FBRXpCLEtBQUssQ0FBQ0MsQ0FBQyxPQUFHQyxNQUFLLFVBQUMsQ0FBcUI7QUFHOUIsS0FBSyxDQUFDQyxPQUFPLFVBQ2xCQyxXQUFnQyxFQUNoQ0MsUUFBYyxLQUNYQyxRQUFRLEdBQ08sQ0FBQztJQUNuQixLQUFLLENBQUMsQ0FBQyxDQUFDQyxLQUFLLEVBQUMsQ0FBQyxHQUFHSCxXQUFXO0lBQzdCLEVBQUUsRUFBRUcsS0FBSyxFQUFFLENBQUM7UUFDVk4sQ0FBQyxFQUFFLGdCQUFnQixFQUFFSSxRQUFRO1FBQzdCLEVBQUUsRUFBRSxNQUFNLENBQUNFLEtBQUssQ0FBQ0YsUUFBUSxNQUFNLENBQVUsV0FBRSxDQUFDO1lBQzFDSixDQUFDLENBQUMsQ0FBZSxnQkFBRUksUUFBUSxFQUFFLENBQVksYUFBRUMsUUFBUTtZQUNuRCxLQUFLLENBQUVDLEtBQUssQ0FBQ0YsUUFBUSxFQUE4QkQsV0FBVyxLQUFLRSxRQUFRO1FBQzdFLENBQUM7SUFDSCxDQUFDO0lBQ0QsS0FBSyxDQUFDRixXQUFXLENBQUNJLGVBQWUsQ0FBQ0MsV0FBVyxDQUFDSixRQUFRLEVBQUVDLFFBQVE7QUFDbEUsQ0FBQztRQWRZSCxPQUFPLEdBQVBBLE9BQU87QUFnQmIsS0FBSyxDQUFDTyxpQkFBaUIsVUFDNUJOLFdBQWdDLEVBQ2hDQyxRQUFjLEtBQ1hDLFFBQVEsR0FDNkIsQ0FBQztJQUN6QyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxLQUFLLEVBQUMsQ0FBQyxHQUFHSCxXQUFXO0lBQzdCLEtBQUssQ0FBQ08sS0FBSyxHQUErQixDQUFDLENBQUM7SUFDNUMsRUFBRSxFQUFFSixLQUFLLEVBQUUsQ0FBQztRQUNWTixDQUFDLEVBQUUsZ0JBQWdCLEVBQUVJLFFBQVE7UUFDN0IsRUFBRSxFQUFFLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDRixRQUFRLE1BQU0sQ0FBVSxXQUFFLENBQUM7WUFDMUNKLENBQUMsQ0FBQyxDQUFlLGdCQUFFSSxRQUFRLEVBQUUsQ0FBWSxhQUFFQyxRQUFRO1lBQ25ESyxLQUFLLENBQUNDLElBQUksQ0FBQyxDQUFDO2dCQUNWQyxLQUFLLEdBQUcsUUFBUSxFQUFFQyxNQUFLLFNBQUNDLE1BQU0sQ0FBQ1YsUUFBUSxFQUFFLHNCQUFzQjtnQkFDL0RXLElBQUksWUFBYyxDQUFDO29CQUNqQixLQUFLLENBQUVULEtBQUssQ0FBQ0YsUUFBUSxFQUE4QkQsV0FBVyxLQUFLRSxRQUFRO2dCQUM3RSxDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBQ0RLLEtBQUssQ0FBQ0MsSUFBSSxJQUFLLEtBQUssQ0FBQ1IsV0FBVyxDQUFDSSxlQUFlLENBQUNFLGlCQUFpQixDQUFDTCxRQUFRLEVBQUVDLFFBQVE7SUFDckYsTUFBTSxDQUFDSyxLQUFLO0FBQ2QsQ0FBQztRQXJCWUQsaUJBQWlCLEdBQWpCQSxpQkFBaUI7ZUF1QlJWLGVBQWUsQ0FDbkNJLFdBQWdDLEVBQ2hDQyxRQUFjLEtBQ1hZLElBQUksRUFDd0MsQ0FBQztJQUNoRCxLQUFLLENBQUMsQ0FBQyxDQUFDVixLQUFLLEVBQUMsQ0FBQyxHQUFHSCxXQUFXO0lBQzdCLEVBQUUsRUFBRUcsS0FBSyxFQUFFLENBQUM7UUFDVk4sQ0FBQyxFQUFFLGdCQUFnQixFQUFFSSxRQUFRO1FBQzdCLEVBQUUsRUFBRSxNQUFNLENBQUNFLEtBQUssQ0FBQ0YsUUFBUSxNQUFNLENBQVUsV0FBRSxDQUFDO1lBQzFDSixDQUFDLENBQUMsQ0FBd0IseUJBQUVJLFFBQVEsRUFBRSxDQUFZLGFBQUVZLElBQUksQ0FBQyxDQUFDO1lBQzFELEtBQUssQ0FBQ0MsSUFBSSxHQUFHWCxLQUFLLENBQUNGLFFBQVE7WUFDM0IsS0FBSyxDQUFDYyxNQUFNLEdBQUcsS0FBSyxDQUFDRCxJQUFJLENBQUNkLFdBQVcsS0FBS2EsSUFBSTtZQUM5QyxFQUFFLEVBQUUsTUFBTSxDQUFDRSxNQUFNLEtBQUssQ0FBVyxZQUFFLENBQUM7Z0JBQ2xDRixJQUFJLENBQUMsQ0FBQyxJQUFJRSxNQUFNO1lBQ2xCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQ2YsV0FBVyxDQUFDSSxlQUFlLENBQUNZLG1CQUFtQixDQUFDZixRQUFRLEVBQUVZLElBQUksQ0FBQyxDQUFDO0FBQ3pFLENBQUMifQ==