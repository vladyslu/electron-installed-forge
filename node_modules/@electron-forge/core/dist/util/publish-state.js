"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _crypto = _interopRequireDefault(require("crypto"));
var _path = _interopRequireDefault(require("path"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const EXTENSION = '.forge.publish';
class PublishState {
    static async loadFromDirectory(directory, rootDir) {
        if (!await _fsExtra.default.pathExists(directory)) {
            throw new Error(`Attempted to load publish state from a missing directory: ${directory}`);
        }
        const publishes = [];
        for (const dirName of (await _fsExtra.default.readdir(directory))){
            const subDir = _path.default.resolve(directory, dirName);
            const states = [];
            if ((await _fsExtra.default.stat(subDir)).isDirectory()) {
                const filePaths = (await _fsExtra.default.readdir(subDir)).filter((fileName)=>fileName.endsWith(EXTENSION)
                ).map((fileName)=>_path.default.resolve(subDir, fileName)
                );
                for (const filePath of filePaths){
                    const state = new PublishState(filePath);
                    await state.load();
                    state.state.artifacts = state.state.artifacts.map((artifactPath)=>_path.default.resolve(rootDir, artifactPath)
                    );
                    states.push(state);
                }
            }
            publishes.push(states);
        }
        return publishes;
    }
    static async saveToDirectory(directory, artifacts, rootDir) {
        const id = _crypto.default.createHash('SHA256').update(JSON.stringify(artifacts)).digest('hex');
        for (const artifact of artifacts){
            artifact.artifacts = artifact.artifacts.map((artifactPath)=>_path.default.relative(rootDir, artifactPath)
            );
            const publishState = new PublishState(_path.default.resolve(directory, id, 'null'), false);
            publishState.state = artifact;
            await publishState.saveToDisk();
        }
    }
    constructor(filePath, hasHash = true){
        this.state = {};
        this.dir = _path.default.dirname(filePath);
        this.path = filePath;
        this.hasHash = hasHash;
    }
    generateHash() {
        const content = JSON.stringify(this.state || {});
        return _crypto.default.createHash('SHA256').update(content).digest('hex');
    }
    async load() {
        this.state = await _fsExtra.default.readJson(this.path);
    }
    async saveToDisk() {
        if (!this.hasHash) {
            this.path = _path.default.resolve(this.dir, `${this.generateHash()}${EXTENSION}`);
            this.hasHash = true;
        }
        await _fsExtra.default.mkdirs(_path.default.dirname(this.path));
        await _fsExtra.default.writeJson(this.path, this.state);
    }
}
exports.default = PublishState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3B1Ymxpc2gtc3RhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IEZvcmdlTWFrZVJlc3VsdCB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcblxuY29uc3QgRVhURU5TSU9OID0gJy5mb3JnZS5wdWJsaXNoJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHVibGlzaFN0YXRlIHtcbiAgc3RhdGljIGFzeW5jIGxvYWRGcm9tRGlyZWN0b3J5KGRpcmVjdG9yeTogc3RyaW5nLCByb290RGlyOiBzdHJpbmcpOiBQcm9taXNlPFB1Ymxpc2hTdGF0ZVtdW10+IHtcbiAgICBpZiAoIShhd2FpdCBmcy5wYXRoRXhpc3RzKGRpcmVjdG9yeSkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEF0dGVtcHRlZCB0byBsb2FkIHB1Ymxpc2ggc3RhdGUgZnJvbSBhIG1pc3NpbmcgZGlyZWN0b3J5OiAke2RpcmVjdG9yeX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBwdWJsaXNoZXM6IFB1Ymxpc2hTdGF0ZVtdW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGRpck5hbWUgb2YgYXdhaXQgZnMucmVhZGRpcihkaXJlY3RvcnkpKSB7XG4gICAgICBjb25zdCBzdWJEaXIgPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCBkaXJOYW1lKTtcbiAgICAgIGNvbnN0IHN0YXRlczogUHVibGlzaFN0YXRlW10gPSBbXTtcblxuICAgICAgaWYgKChhd2FpdCBmcy5zdGF0KHN1YkRpcikpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgY29uc3QgZmlsZVBhdGhzID0gKGF3YWl0IGZzLnJlYWRkaXIoc3ViRGlyKSkuZmlsdGVyKChmaWxlTmFtZSkgPT4gZmlsZU5hbWUuZW5kc1dpdGgoRVhURU5TSU9OKSkubWFwKChmaWxlTmFtZSkgPT4gcGF0aC5yZXNvbHZlKHN1YkRpciwgZmlsZU5hbWUpKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGZpbGVQYXRoIG9mIGZpbGVQYXRocykge1xuICAgICAgICAgIGNvbnN0IHN0YXRlID0gbmV3IFB1Ymxpc2hTdGF0ZShmaWxlUGF0aCk7XG4gICAgICAgICAgYXdhaXQgc3RhdGUubG9hZCgpO1xuICAgICAgICAgIHN0YXRlLnN0YXRlLmFydGlmYWN0cyA9IHN0YXRlLnN0YXRlLmFydGlmYWN0cy5tYXAoKGFydGlmYWN0UGF0aCkgPT4gcGF0aC5yZXNvbHZlKHJvb3REaXIsIGFydGlmYWN0UGF0aCkpO1xuICAgICAgICAgIHN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHVibGlzaGVzLnB1c2goc3RhdGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1Ymxpc2hlcztcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBzYXZlVG9EaXJlY3RvcnkoZGlyZWN0b3J5OiBzdHJpbmcsIGFydGlmYWN0czogRm9yZ2VNYWtlUmVzdWx0W10sIHJvb3REaXI6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGlkID0gY3J5cHRvLmNyZWF0ZUhhc2goJ1NIQTI1NicpLnVwZGF0ZShKU09OLnN0cmluZ2lmeShhcnRpZmFjdHMpKS5kaWdlc3QoJ2hleCcpO1xuICAgIGZvciAoY29uc3QgYXJ0aWZhY3Qgb2YgYXJ0aWZhY3RzKSB7XG4gICAgICBhcnRpZmFjdC5hcnRpZmFjdHMgPSBhcnRpZmFjdC5hcnRpZmFjdHMubWFwKChhcnRpZmFjdFBhdGgpID0+IHBhdGgucmVsYXRpdmUocm9vdERpciwgYXJ0aWZhY3RQYXRoKSk7XG4gICAgICBjb25zdCBwdWJsaXNoU3RhdGUgPSBuZXcgUHVibGlzaFN0YXRlKHBhdGgucmVzb2x2ZShkaXJlY3RvcnksIGlkLCAnbnVsbCcpLCBmYWxzZSk7XG4gICAgICBwdWJsaXNoU3RhdGUuc3RhdGUgPSBhcnRpZmFjdDtcbiAgICAgIGF3YWl0IHB1Ymxpc2hTdGF0ZS5zYXZlVG9EaXNrKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkaXI6IHN0cmluZztcblxuICBwcml2YXRlIHBhdGg6IHN0cmluZztcblxuICBwcml2YXRlIGhhc0hhc2g6IGJvb2xlYW47XG5cbiAgcHVibGljIHN0YXRlOiBGb3JnZU1ha2VSZXN1bHQgPSB7fSBhcyBGb3JnZU1ha2VSZXN1bHQ7XG5cbiAgY29uc3RydWN0b3IoZmlsZVBhdGg6IHN0cmluZywgaGFzSGFzaCA9IHRydWUpIHtcbiAgICB0aGlzLmRpciA9IHBhdGguZGlybmFtZShmaWxlUGF0aCk7XG4gICAgdGhpcy5wYXRoID0gZmlsZVBhdGg7XG4gICAgdGhpcy5oYXNIYXNoID0gaGFzSGFzaDtcbiAgfVxuXG4gIGdlbmVyYXRlSGFzaCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlIHx8IHt9KTtcbiAgICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ1NIQTI1NicpLnVwZGF0ZShjb250ZW50KS5kaWdlc3QoJ2hleCcpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLnN0YXRlID0gYXdhaXQgZnMucmVhZEpzb24odGhpcy5wYXRoKTtcbiAgfVxuXG4gIGFzeW5jIHNhdmVUb0Rpc2soKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmhhc0hhc2gpIHtcbiAgICAgIHRoaXMucGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLmRpciwgYCR7dGhpcy5nZW5lcmF0ZUhhc2goKX0ke0VYVEVOU0lPTn1gKTtcbiAgICAgIHRoaXMuaGFzSGFzaCA9IHRydWU7XG4gICAgfVxuXG4gICAgYXdhaXQgZnMubWtkaXJzKHBhdGguZGlybmFtZSh0aGlzLnBhdGgpKTtcbiAgICBhd2FpdCBmcy53cml0ZUpzb24odGhpcy5wYXRoLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkVYVEVOU0lPTiIsIlB1Ymxpc2hTdGF0ZSIsImxvYWRGcm9tRGlyZWN0b3J5IiwiZGlyZWN0b3J5Iiwicm9vdERpciIsImZzIiwicGF0aEV4aXN0cyIsIkVycm9yIiwicHVibGlzaGVzIiwiZGlyTmFtZSIsInJlYWRkaXIiLCJzdWJEaXIiLCJwYXRoIiwicmVzb2x2ZSIsInN0YXRlcyIsInN0YXQiLCJpc0RpcmVjdG9yeSIsImZpbGVQYXRocyIsImZpbHRlciIsImZpbGVOYW1lIiwiZW5kc1dpdGgiLCJtYXAiLCJmaWxlUGF0aCIsInN0YXRlIiwibG9hZCIsImFydGlmYWN0cyIsImFydGlmYWN0UGF0aCIsInB1c2giLCJzYXZlVG9EaXJlY3RvcnkiLCJpZCIsImNyeXB0byIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJKU09OIiwic3RyaW5naWZ5IiwiZGlnZXN0IiwiYXJ0aWZhY3QiLCJyZWxhdGl2ZSIsInB1Ymxpc2hTdGF0ZSIsInNhdmVUb0Rpc2siLCJoYXNIYXNoIiwiZGlyIiwiZGlybmFtZSIsImdlbmVyYXRlSGFzaCIsImNvbnRlbnQiLCJyZWFkSnNvbiIsIm1rZGlycyIsIndyaXRlSnNvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUIsR0FBUSxDQUFSLE9BQVE7QUFDVixHQUFNLENBQU4sS0FBTTtBQUdSLEdBQVUsQ0FBVixRQUFVOzs7Ozs7QUFFekIsS0FBSyxDQUFDQSxTQUFTLEdBQUcsQ0FBZ0I7TUFFYkMsWUFBWTtpQkFDbEJDLGlCQUFpQixDQUFDQyxTQUFpQixFQUFFQyxPQUFlLEVBQTZCLENBQUM7UUFDN0YsRUFBRSxHQUFJLEtBQUssQ0FBQ0MsUUFBRSxTQUFDQyxVQUFVLENBQUNILFNBQVMsR0FBSSxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxHQUFHLENBQUNJLEtBQUssRUFBRSwwREFBMEQsRUFBRUosU0FBUztRQUN4RixDQUFDO1FBRUQsS0FBSyxDQUFDSyxTQUFTLEdBQXFCLENBQUMsQ0FBQztRQUN0QyxHQUFHLEVBQUUsS0FBSyxDQUFDQyxP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