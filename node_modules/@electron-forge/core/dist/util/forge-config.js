"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fromBuildIdentifier = fromBuildIdentifier;
exports.forgeConfigIsValidFilePath = forgeConfigIsValidFilePath;
exports.renderConfigTemplate = renderConfigTemplate;
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var interpret = _interopRequireWildcard(require("interpret"));
var _lodash = require("lodash");
var rechoir = _interopRequireWildcard(require("rechoir"));
var _hook = require("./hook");
var _pluginInterface = _interopRequireDefault(require("./plugin-interface"));
var _readPackageJson = require("./read-package-json");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const underscoreCase = (str)=>str.replace(/(.)([A-Z][a-z]+)/g, '$1_$2').replace(/([a-z0-9])([A-Z])/g, '$1_$2').toUpperCase()
;
/* eslint-disable @typescript-eslint/no-explicit-any */ const proxify = (buildIdentifier, proxifiedObject, envPrefix)=>{
    let newObject = {};
    if (Array.isArray(proxifiedObject)) {
        newObject = [];
    }
    for (const [key, val] of Object.entries(proxifiedObject)){
        if (typeof val === 'object' && (val.constructor === Object || val.constructor === Array) && key !== 'pluginInterface' && !(val instanceof RegExp)) {
            newObject[key] = proxify(buildIdentifier, proxifiedObject[key], `${envPrefix}_${underscoreCase(key)}`);
        } else {
            newObject[key] = proxifiedObject[key];
        }
    }
    return new Proxy(newObject, {
        get (target, name, receiver) {
            // eslint-disable-next-line no-prototype-builtins
            if (!target.hasOwnProperty(name) && typeof name === 'string') {
                const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`];
                if (envValue) return envValue;
            }
            const value = Reflect.get(target, name, receiver);
            if (value && typeof value === 'object' && value.__isMagicBuildIdentifierMap) {
                const identifier = typeof buildIdentifier === 'function' ? buildIdentifier() : buildIdentifier;
                return value.map[identifier];
            }
            return value;
        },
        getOwnPropertyDescriptor (target, name) {
            const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`];
            // eslint-disable-next-line no-prototype-builtins
            if (target.hasOwnProperty(name)) {
                return Reflect.getOwnPropertyDescriptor(target, name);
            }
            if (envValue) {
                return {
                    writable: true,
                    enumerable: true,
                    configurable: true,
                    value: envValue
                };
            }
            return undefined;
        }
    });
};
function fromBuildIdentifier(map) {
    return {
        map,
        __isMagicBuildIdentifierMap: true
    };
}
async function forgeConfigIsValidFilePath(dir, forgeConfig) {
    return typeof forgeConfig === 'string' && (await _fsExtra.default.pathExists(_path.default.resolve(dir, forgeConfig)) || _fsExtra.default.pathExists(_path.default.resolve(dir, `${forgeConfig}.js`)));
}
function renderConfigTemplate(dir, templateObj, obj) {
    for (const [key, value] of Object.entries(obj)){
        if (typeof value === 'object' && value !== null) {
            renderConfigTemplate(dir, templateObj, value);
        } else if (typeof value === 'string') {
            obj[key] = (0, _lodash).template(value)(templateObj);
            if (obj[key].startsWith('require:')) {
                obj[key] = require(_path.default.resolve(dir, obj[key].substr(8)));
            }
        }
    }
}
var _default = async (dir)=>{
    const packageJSON = await (0, _readPackageJson).readRawPackageJson(dir);
    let forgeConfig = packageJSON.config && packageJSON.config.forge ? packageJSON.config.forge : null;
    if (!forgeConfig) {
        for (const extension of [
            '.js',
            ...Object.keys(interpret.extensions)
        ]){
            const pathToConfig = _path.default.resolve(dir, `forge.config${extension}`);
            if (await _fsExtra.default.pathExists(pathToConfig)) {
                rechoir.prepare(interpret.extensions, pathToConfig, dir);
                forgeConfig = `forge.config${extension}`;
                break;
            }
        }
    }
    forgeConfig = forgeConfig || {};
    if (await forgeConfigIsValidFilePath(dir, forgeConfig)) {
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const loaded = require(_path.default.resolve(dir, forgeConfig));
            forgeConfig = 'default' in loaded ? loaded.default : loaded;
        } catch (err) {
            console.error(`Failed to load: ${_path.default.resolve(dir, forgeConfig)}`);
            throw err;
        }
    } else if (typeof forgeConfig !== 'object') {
        throw new Error('Expected packageJSON.config.forge to be an object or point to a requirable JS file');
    }
    const defaultForgeConfig = {
        rebuildConfig: {},
        packagerConfig: {},
        makers: [],
        publishers: [],
        plugins: []
    };
    let resolvedForgeConfig = {
        ...defaultForgeConfig,
        ...forgeConfig,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        pluginInterface: null
    };
    const templateObj = {
        ...packageJSON,
        year: new Date().getFullYear()
    };
    renderConfigTemplate(dir, templateObj, resolvedForgeConfig);
    resolvedForgeConfig.pluginInterface = new _pluginInterface.default(dir, resolvedForgeConfig);
    resolvedForgeConfig = await (0, _hook).runMutatingHook(resolvedForgeConfig, 'resolveForgeConfig', resolvedForgeConfig);
    return proxify(resolvedForgeConfig.buildIdentifier || '', resolvedForgeConfig, 'ELECTRON_FORGE');
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,